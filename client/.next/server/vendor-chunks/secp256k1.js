"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/secp256k1";
exports.ids = ["vendor-chunks/secp256k1"];
exports.modules = {

/***/ "(ssr)/./node_modules/secp256k1/bindings.js":
/*!********************************************!*\
  !*** ./node_modules/secp256k1/bindings.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst addon = __webpack_require__(/*! node-gyp-build */ \"(ssr)/./node_modules/node-gyp-build/index.js\")(__dirname);\nmodule.exports = __webpack_require__(/*! ./lib */ \"(ssr)/./node_modules/secp256k1/lib/index.js\")(new addon.Secp256k1());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2JpbmRpbmdzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQyxzRUFBa0JDO0FBQ3hDQyxPQUFPQyxPQUFPLEdBQUdILG1CQUFPQSxDQUFDLDREQUFTLElBQUlELE1BQU1LLFNBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2JpbmRpbmdzLmpzP2Q4M2UiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYWRkb24gPSByZXF1aXJlKCdub2RlLWd5cC1idWlsZCcpKF9fZGlybmFtZSlcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWInKShuZXcgYWRkb24uU2VjcDI1NmsxKCkpXG4iXSwibmFtZXMiOlsiYWRkb24iLCJyZXF1aXJlIiwiX19kaXJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyIsIlNlY3AyNTZrMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/secp256k1/bindings.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/secp256k1/elliptic.js":
/*!********************************************!*\
  !*** ./node_modules/secp256k1/elliptic.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib */ \"(ssr)/./node_modules/secp256k1/lib/index.js\")(__webpack_require__(/*! ./lib/elliptic */ \"(ssr)/./node_modules/secp256k1/lib/elliptic.js\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2VsbGlwdGljLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQyxtQkFBT0EsQ0FBQyw0REFBU0EsbUJBQU9BLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2VsbGlwdGljLmpzPzQ0YTkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpKHJlcXVpcmUoJy4vbGliL2VsbGlwdGljJykpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/secp256k1/elliptic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/secp256k1/index.js":
/*!*****************************************!*\
  !*** ./node_modules/secp256k1/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\ntry {\n    module.exports = __webpack_require__(/*! ./bindings */ \"(ssr)/./node_modules/secp256k1/bindings.js\");\n} catch (err) {\n    module.exports = __webpack_require__(/*! ./elliptic */ \"(ssr)/./node_modules/secp256k1/elliptic.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvc2VjcDI1NmsxL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJO0lBQ0ZBLG9HQUF5QjtBQUMzQixFQUFFLE9BQU9HLEtBQUs7SUFDWkgsb0dBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3NlY3AyNTZrMS9pbmRleC5qcz9jMDMzIl0sInNvdXJjZXNDb250ZW50IjpbInRyeSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9iaW5kaW5ncycpXG59IGNhdGNoIChlcnIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2VsbGlwdGljJylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/secp256k1/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/secp256k1/lib/elliptic.js":
/*!************************************************!*\
  !*** ./node_modules/secp256k1/lib/elliptic.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EC = (__webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\").ec);\nconst ec = new EC(\"secp256k1\");\nconst ecparams = ec.curve;\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor;\nfunction loadCompressedPublicKey(first, xbuf) {\n    let x = new BN(xbuf);\n    // overflow\n    if (x.cmp(ecparams.p) >= 0) return null;\n    x = x.toRed(ecparams.red);\n    // compute corresponding Y\n    let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();\n    if (first === 0x03 !== y.isOdd()) y = y.redNeg();\n    return ec.keyPair({\n        pub: {\n            x: x,\n            y: y\n        }\n    });\n}\nfunction loadUncompressedPublicKey(first, xbuf, ybuf) {\n    let x = new BN(xbuf);\n    let y = new BN(ybuf);\n    // overflow\n    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;\n    x = x.toRed(ecparams.red);\n    y = y.toRed(ecparams.red);\n    // is odd flag\n    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;\n    // x*x*x + b = y*y\n    const x3 = x.redSqr().redIMul(x);\n    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;\n    return ec.keyPair({\n        pub: {\n            x: x,\n            y: y\n        }\n    });\n}\nfunction loadPublicKey(pubkey) {\n    // length should be validated in interface\n    const first = pubkey[0];\n    switch(first){\n        case 0x02:\n        case 0x03:\n            if (pubkey.length !== 33) return null;\n            return loadCompressedPublicKey(first, pubkey.subarray(1, 33));\n        case 0x04:\n        case 0x06:\n        case 0x07:\n            if (pubkey.length !== 65) return null;\n            return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));\n        default:\n            return null;\n    }\n}\nfunction savePublicKey(output, point) {\n    const pubkey = point.encode(null, output.length === 33);\n    // Loop should be faster because we do not need create extra Uint8Array\n    // output.set(new Uint8Array(pubkey))\n    for(let i = 0; i < output.length; ++i)output[i] = pubkey[i];\n}\nmodule.exports = {\n    contextRandomize () {\n        return 0;\n    },\n    privateKeyVerify (seckey) {\n        const bn = new BN(seckey);\n        return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;\n    },\n    privateKeyNegate (seckey) {\n        const bn = new BN(seckey);\n        const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, \"be\", 32);\n        seckey.set(negate);\n        return 0;\n    },\n    privateKeyTweakAdd (seckey, tweak) {\n        const bn = new BN(tweak);\n        if (bn.cmp(ecparams.n) >= 0) return 1;\n        bn.iadd(new BN(seckey));\n        if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);\n        if (bn.isZero()) return 1;\n        const tweaked = bn.toArrayLike(Uint8Array, \"be\", 32);\n        seckey.set(tweaked);\n        return 0;\n    },\n    privateKeyTweakMul (seckey, tweak) {\n        let bn = new BN(tweak);\n        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n        bn.imul(new BN(seckey));\n        if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n);\n        const tweaked = bn.toArrayLike(Uint8Array, \"be\", 32);\n        seckey.set(tweaked);\n        return 0;\n    },\n    publicKeyVerify (pubkey) {\n        const pair = loadPublicKey(pubkey);\n        return pair === null ? 1 : 0;\n    },\n    publicKeyCreate (output, seckey) {\n        const bn = new BN(seckey);\n        if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1;\n        const point = ec.keyFromPrivate(seckey).getPublic();\n        savePublicKey(output, point);\n        return 0;\n    },\n    publicKeyConvert (output, pubkey) {\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 1;\n        const point = pair.getPublic();\n        savePublicKey(output, point);\n        return 0;\n    },\n    publicKeyNegate (output, pubkey) {\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 1;\n        const point = pair.getPublic();\n        point.y = point.y.redNeg();\n        savePublicKey(output, point);\n        return 0;\n    },\n    publicKeyCombine (output, pubkeys) {\n        const pairs = new Array(pubkeys.length);\n        for(let i = 0; i < pubkeys.length; ++i){\n            pairs[i] = loadPublicKey(pubkeys[i]);\n            if (pairs[i] === null) return 1;\n        }\n        let point = pairs[0].getPublic();\n        for(let i = 1; i < pairs.length; ++i)point = point.add(pairs[i].pub);\n        if (point.isInfinity()) return 2;\n        savePublicKey(output, point);\n        return 0;\n    },\n    publicKeyTweakAdd (output, pubkey, tweak) {\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 1;\n        tweak = new BN(tweak);\n        if (tweak.cmp(ecparams.n) >= 0) return 2;\n        const point = pair.getPublic().add(ecparams.g.mul(tweak));\n        if (point.isInfinity()) return 2;\n        savePublicKey(output, point);\n        return 0;\n    },\n    publicKeyTweakMul (output, pubkey, tweak) {\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 1;\n        tweak = new BN(tweak);\n        if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;\n        const point = pair.getPublic().mul(tweak);\n        savePublicKey(output, point);\n        return 0;\n    },\n    signatureNormalize (sig) {\n        const r = new BN(sig.subarray(0, 32));\n        const s = new BN(sig.subarray(32, 64));\n        if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1;\n        if (s.cmp(ec.nh) === 1) {\n            sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, \"be\", 32), 32);\n        }\n        return 0;\n    },\n    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n    // Adapted for Uint8Array instead Buffer\n    signatureExport (obj, sig) {\n        const sigR = sig.subarray(0, 32);\n        const sigS = sig.subarray(32, 64);\n        if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;\n        if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;\n        const { output } = obj;\n        // Prepare R\n        let r = output.subarray(4, 4 + 33);\n        r[0] = 0x00;\n        r.set(sigR, 1);\n        let lenR = 33;\n        let posR = 0;\n        for(; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n        r = r.subarray(posR);\n        if (r[0] & 0x80) return 1;\n        if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) return 1;\n        // Prepare S\n        let s = output.subarray(6 + 33, 6 + 33 + 33);\n        s[0] = 0x00;\n        s.set(sigS, 1);\n        let lenS = 33;\n        let posS = 0;\n        for(; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n        s = s.subarray(posS);\n        if (s[0] & 0x80) return 1;\n        if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) return 1;\n        // Set output length for return\n        obj.outputlen = 6 + lenR + lenS;\n        // Output in specified format\n        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n        output[0] = 0x30;\n        output[1] = obj.outputlen - 2;\n        output[2] = 0x02;\n        output[3] = r.length;\n        output.set(r, 4);\n        output[4 + lenR] = 0x02;\n        output[5 + lenR] = s.length;\n        output.set(s, 6 + lenR);\n        return 0;\n    },\n    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n    // Adapted for Uint8Array instead Buffer\n    signatureImport (output, sig) {\n        if (sig.length < 8) return 1;\n        if (sig.length > 72) return 1;\n        if (sig[0] !== 0x30) return 1;\n        if (sig[1] !== sig.length - 2) return 1;\n        if (sig[2] !== 0x02) return 1;\n        const lenR = sig[3];\n        if (lenR === 0) return 1;\n        if (5 + lenR >= sig.length) return 1;\n        if (sig[4 + lenR] !== 0x02) return 1;\n        const lenS = sig[5 + lenR];\n        if (lenS === 0) return 1;\n        if (6 + lenR + lenS !== sig.length) return 1;\n        if (sig[4] & 0x80) return 1;\n        if (lenR > 1 && sig[4] === 0x00 && !(sig[5] & 0x80)) return 1;\n        if (sig[lenR + 6] & 0x80) return 1;\n        if (lenS > 1 && sig[lenR + 6] === 0x00 && !(sig[lenR + 7] & 0x80)) return 1;\n        let sigR = sig.subarray(4, 4 + lenR);\n        if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1);\n        if (sigR.length > 32) return 1;\n        let sigS = sig.subarray(6 + lenR);\n        if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1);\n        if (sigS.length > 32) throw new Error(\"S length is too long\");\n        let r = new BN(sigR);\n        if (r.cmp(ecparams.n) >= 0) r = new BN(0);\n        let s = new BN(sig.subarray(6 + lenR));\n        if (s.cmp(ecparams.n) >= 0) s = new BN(0);\n        output.set(r.toArrayLike(Uint8Array, \"be\", 32), 0);\n        output.set(s.toArrayLike(Uint8Array, \"be\", 32), 32);\n        return 0;\n    },\n    ecdsaSign (obj, message, seckey, data, noncefn) {\n        if (noncefn) {\n            const _noncefn = noncefn;\n            noncefn = (counter)=>{\n                const nonce = _noncefn(message, seckey, null, data, counter);\n                const isValid = nonce instanceof Uint8Array && nonce.length === 32;\n                if (!isValid) throw new Error(\"This is the way\");\n                return new BN(nonce);\n            };\n        }\n        const d = new BN(seckey);\n        if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;\n        let sig;\n        try {\n            sig = ec.sign(message, seckey, {\n                canonical: true,\n                k: noncefn,\n                pers: data\n            });\n        } catch (err) {\n            return 1;\n        }\n        obj.signature.set(sig.r.toArrayLike(Uint8Array, \"be\", 32), 0);\n        obj.signature.set(sig.s.toArrayLike(Uint8Array, \"be\", 32), 32);\n        obj.recid = sig.recoveryParam;\n        return 0;\n    },\n    ecdsaVerify (sig, msg32, pubkey) {\n        const sigObj = {\n            r: sig.subarray(0, 32),\n            s: sig.subarray(32, 64)\n        };\n        const sigr = new BN(sigObj.r);\n        const sigs = new BN(sigObj.s);\n        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n        if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 2;\n        const point = pair.getPublic();\n        const isValid = ec.verify(msg32, sigObj, point);\n        return isValid ? 0 : 3;\n    },\n    ecdsaRecover (output, sig, recid, msg32) {\n        const sigObj = {\n            r: sig.slice(0, 32),\n            s: sig.slice(32, 64)\n        };\n        const sigr = new BN(sigObj.r);\n        const sigs = new BN(sigObj.s);\n        if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;\n        if (sigr.isZero() || sigs.isZero()) return 2;\n        // Can throw `throw new Error('Unable to find sencond key candinate');`\n        let point;\n        try {\n            point = ec.recoverPubKey(msg32, sigObj, recid);\n        } catch (err) {\n            return 2;\n        }\n        savePublicKey(output, point);\n        return 0;\n    },\n    ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n        const pair = loadPublicKey(pubkey);\n        if (pair === null) return 1;\n        const scalar = new BN(seckey);\n        if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;\n        const point = pair.getPublic().mul(scalar);\n        if (hashfn === undefined) {\n            const data = point.encode(null, true);\n            const sha256 = ec.hash().update(data).digest();\n            for(let i = 0; i < 32; ++i)output[i] = sha256[i];\n        } else {\n            if (!xbuf) xbuf = new Uint8Array(32);\n            const x = point.getX().toArray(\"be\", 32);\n            for(let i = 0; i < 32; ++i)xbuf[i] = x[i];\n            if (!ybuf) ybuf = new Uint8Array(32);\n            const y = point.getY().toArray(\"be\", 32);\n            for(let i = 0; i < 32; ++i)ybuf[i] = y[i];\n            const hash = hashfn(xbuf, ybuf, data);\n            const isValid = hash instanceof Uint8Array && hash.length === output.length;\n            if (!isValid) return 2;\n            output.set(hash);\n        }\n        return 0;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/secp256k1/lib/elliptic.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/secp256k1/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/secp256k1/lib/index.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nconst errors = {\n    IMPOSSIBLE_CASE: \"Impossible case. Please create issue.\",\n    TWEAK_ADD: \"The tweak was out of range or the resulted private key is invalid\",\n    TWEAK_MUL: \"The tweak was out of range or equal to zero\",\n    CONTEXT_RANDOMIZE_UNKNOW: \"Unknow error on context randomization\",\n    SECKEY_INVALID: \"Private Key is invalid\",\n    PUBKEY_PARSE: \"Public Key could not be parsed\",\n    PUBKEY_SERIALIZE: \"Public Key serialization error\",\n    PUBKEY_COMBINE: \"The sum of the public keys is not valid\",\n    SIG_PARSE: \"Signature could not be parsed\",\n    SIGN: \"The nonce generation function failed, or the private key was invalid\",\n    RECOVER: \"Public key could not be recover\",\n    ECDH: \"Scalar was invalid (zero or overflow)\"\n};\nfunction assert(cond, msg) {\n    if (!cond) throw new Error(msg);\n}\nfunction isUint8Array(name, value, length) {\n    assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);\n    if (length !== undefined) {\n        if (Array.isArray(length)) {\n            const numbers = length.join(\", \");\n            const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;\n            assert(length.includes(value.length), msg);\n        } else {\n            const msg = `Expected ${name} to be an Uint8Array with length ${length}`;\n            assert(value.length === length, msg);\n        }\n    }\n}\nfunction isCompressed(value) {\n    assert(toTypeString(value) === \"Boolean\", \"Expected compressed to be a Boolean\");\n}\nfunction getAssertedOutput(output = (len)=>new Uint8Array(len), length) {\n    if (typeof output === \"function\") output = output(length);\n    isUint8Array(\"output\", output, length);\n    return output;\n}\nfunction toTypeString(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n}\nmodule.exports = (secp256k1)=>{\n    return {\n        contextRandomize (seed) {\n            assert(seed === null || seed instanceof Uint8Array, \"Expected seed to be an Uint8Array or null\");\n            if (seed !== null) isUint8Array(\"seed\", seed, 32);\n            switch(secp256k1.contextRandomize(seed)){\n                case 1:\n                    throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);\n            }\n        },\n        privateKeyVerify (seckey) {\n            isUint8Array(\"private key\", seckey, 32);\n            return secp256k1.privateKeyVerify(seckey) === 0;\n        },\n        privateKeyNegate (seckey) {\n            isUint8Array(\"private key\", seckey, 32);\n            switch(secp256k1.privateKeyNegate(seckey)){\n                case 0:\n                    return seckey;\n                case 1:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n            }\n        },\n        privateKeyTweakAdd (seckey, tweak) {\n            isUint8Array(\"private key\", seckey, 32);\n            isUint8Array(\"tweak\", tweak, 32);\n            switch(secp256k1.privateKeyTweakAdd(seckey, tweak)){\n                case 0:\n                    return seckey;\n                case 1:\n                    throw new Error(errors.TWEAK_ADD);\n            }\n        },\n        privateKeyTweakMul (seckey, tweak) {\n            isUint8Array(\"private key\", seckey, 32);\n            isUint8Array(\"tweak\", tweak, 32);\n            switch(secp256k1.privateKeyTweakMul(seckey, tweak)){\n                case 0:\n                    return seckey;\n                case 1:\n                    throw new Error(errors.TWEAK_MUL);\n            }\n        },\n        publicKeyVerify (pubkey) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            return secp256k1.publicKeyVerify(pubkey) === 0;\n        },\n        publicKeyCreate (seckey, compressed = true, output) {\n            isUint8Array(\"private key\", seckey, 32);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyCreate(output, seckey)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.SECKEY_INVALID);\n                case 2:\n                    throw new Error(errors.PUBKEY_SERIALIZE);\n            }\n        },\n        publicKeyConvert (pubkey, compressed = true, output) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyConvert(output, pubkey)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.PUBKEY_SERIALIZE);\n            }\n        },\n        publicKeyNegate (pubkey, compressed = true, output) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyNegate(output, pubkey)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n                case 3:\n                    throw new Error(errors.PUBKEY_SERIALIZE);\n            }\n        },\n        publicKeyCombine (pubkeys, compressed = true, output) {\n            assert(Array.isArray(pubkeys), \"Expected public keys to be an Array\");\n            assert(pubkeys.length > 0, \"Expected public keys array will have more than zero items\");\n            for (const pubkey of pubkeys){\n                isUint8Array(\"public key\", pubkey, [\n                    33,\n                    65\n                ]);\n            }\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyCombine(output, pubkeys)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.PUBKEY_COMBINE);\n                case 3:\n                    throw new Error(errors.PUBKEY_SERIALIZE);\n            }\n        },\n        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            isUint8Array(\"tweak\", tweak, 32);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyTweakAdd(output, pubkey, tweak)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.TWEAK_ADD);\n            }\n        },\n        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            isUint8Array(\"tweak\", tweak, 32);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.publicKeyTweakMul(output, pubkey, tweak)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.TWEAK_MUL);\n            }\n        },\n        signatureNormalize (sig) {\n            isUint8Array(\"signature\", sig, 64);\n            switch(secp256k1.signatureNormalize(sig)){\n                case 0:\n                    return sig;\n                case 1:\n                    throw new Error(errors.SIG_PARSE);\n            }\n        },\n        signatureExport (sig, output) {\n            isUint8Array(\"signature\", sig, 64);\n            output = getAssertedOutput(output, 72);\n            const obj = {\n                output,\n                outputlen: 72\n            };\n            switch(secp256k1.signatureExport(obj, sig)){\n                case 0:\n                    return output.slice(0, obj.outputlen);\n                case 1:\n                    throw new Error(errors.SIG_PARSE);\n                case 2:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n            }\n        },\n        signatureImport (sig, output) {\n            isUint8Array(\"signature\", sig);\n            output = getAssertedOutput(output, 64);\n            switch(secp256k1.signatureImport(output, sig)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.SIG_PARSE);\n                case 2:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n            }\n        },\n        ecdsaSign (msg32, seckey, options = {}, output) {\n            isUint8Array(\"message\", msg32, 32);\n            isUint8Array(\"private key\", seckey, 32);\n            assert(toTypeString(options) === \"Object\", \"Expected options to be an Object\");\n            if (options.data !== undefined) isUint8Array(\"options.data\", options.data);\n            if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === \"Function\", \"Expected options.noncefn to be a Function\");\n            output = getAssertedOutput(output, 64);\n            const obj = {\n                signature: output,\n                recid: null\n            };\n            switch(secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)){\n                case 0:\n                    return obj;\n                case 1:\n                    throw new Error(errors.SIGN);\n                case 2:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n            }\n        },\n        ecdsaVerify (sig, msg32, pubkey) {\n            isUint8Array(\"signature\", sig, 64);\n            isUint8Array(\"message\", msg32, 32);\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            switch(secp256k1.ecdsaVerify(sig, msg32, pubkey)){\n                case 0:\n                    return true;\n                case 3:\n                    return false;\n                case 1:\n                    throw new Error(errors.SIG_PARSE);\n                case 2:\n                    throw new Error(errors.PUBKEY_PARSE);\n            }\n        },\n        ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n            isUint8Array(\"signature\", sig, 64);\n            assert(toTypeString(recid) === \"Number\" && recid >= 0 && recid <= 3, \"Expected recovery id to be a Number within interval [0, 3]\");\n            isUint8Array(\"message\", msg32, 32);\n            isCompressed(compressed);\n            output = getAssertedOutput(output, compressed ? 33 : 65);\n            switch(secp256k1.ecdsaRecover(output, sig, recid, msg32)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.SIG_PARSE);\n                case 2:\n                    throw new Error(errors.RECOVER);\n                case 3:\n                    throw new Error(errors.IMPOSSIBLE_CASE);\n            }\n        },\n        ecdh (pubkey, seckey, options = {}, output) {\n            isUint8Array(\"public key\", pubkey, [\n                33,\n                65\n            ]);\n            isUint8Array(\"private key\", seckey, 32);\n            assert(toTypeString(options) === \"Object\", \"Expected options to be an Object\");\n            if (options.data !== undefined) isUint8Array(\"options.data\", options.data);\n            if (options.hashfn !== undefined) {\n                assert(toTypeString(options.hashfn) === \"Function\", \"Expected options.hashfn to be a Function\");\n                if (options.xbuf !== undefined) isUint8Array(\"options.xbuf\", options.xbuf, 32);\n                if (options.ybuf !== undefined) isUint8Array(\"options.ybuf\", options.ybuf, 32);\n                isUint8Array(\"output\", output);\n            } else {\n                output = getAssertedOutput(output, 32);\n            }\n            switch(secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)){\n                case 0:\n                    return output;\n                case 1:\n                    throw new Error(errors.PUBKEY_PARSE);\n                case 2:\n                    throw new Error(errors.ECDH);\n            }\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/secp256k1/lib/index.js\n");

/***/ })

};
;