"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/multibase";
exports.ids = ["vendor-chunks/multibase"];
exports.modules = {

/***/ "(ssr)/./node_modules/multibase/src/base.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/base.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import(\"./types\").BaseName} BaseName */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /**\n * Class to encode/decode in the supported Bases\n *\n */ class Base {\n    /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */ constructor(name, code, factory, alphabet){\n        this.name = name;\n        this.code = code;\n        this.codeBuf = encodeText(this.code);\n        this.alphabet = alphabet;\n        this.codec = factory(alphabet);\n    }\n    /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */ encode(buf) {\n        return this.codec.encode(buf);\n    }\n    /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */ decode(string) {\n        for (const char of string){\n            if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n                throw new Error(`invalid character '${char}' in '${string}'`);\n            }\n        }\n        return this.codec.decode(string);\n    }\n}\nmodule.exports = Base;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxVQUFVLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFL0IsMkRBQTJELEdBQzNELG1EQUFtRCxHQUNuRCxtREFBbUQsR0FFbkQ7OztDQUdDLEdBQ0QsTUFBTUM7SUFDSjs7Ozs7R0FLQyxHQUNEQyxZQUFhQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLENBQUU7UUFDMUMsSUFBSSxDQUFDSCxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDQyxJQUFJLEdBQUdBO1FBQ1osSUFBSSxDQUFDRyxPQUFPLEdBQUdSLFdBQVcsSUFBSSxDQUFDSyxJQUFJO1FBQ25DLElBQUksQ0FBQ0UsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNFLEtBQUssR0FBR0gsUUFBUUM7SUFDdkI7SUFFQTs7O0dBR0MsR0FDREcsT0FBUUMsR0FBRyxFQUFFO1FBQ1gsT0FBTyxJQUFJLENBQUNGLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQztJQUMzQjtJQUVBOzs7R0FHQyxHQUNEQyxPQUFRQyxNQUFNLEVBQUU7UUFDZCxLQUFLLE1BQU1DLFFBQVFELE9BQVE7WUFDekIsSUFBSSxJQUFJLENBQUNOLFFBQVEsSUFBSSxJQUFJLENBQUNBLFFBQVEsQ0FBQ1EsT0FBTyxDQUFDRCxRQUFRLEdBQUc7Z0JBQ3BELE1BQU0sSUFBSUUsTUFBTSxDQUFDLG1CQUFtQixFQUFFRixLQUFLLE1BQU0sRUFBRUQsT0FBTyxDQUFDLENBQUM7WUFDOUQ7UUFDRjtRQUNBLE9BQU8sSUFBSSxDQUFDSixLQUFLLENBQUNHLE1BQU0sQ0FBQ0M7SUFDM0I7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdoQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9tdWx0aWJhc2Uvc3JjL2Jhc2UuanM/Njc3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgeyBlbmNvZGVUZXh0IH0gPSByZXF1aXJlKCcuL3V0aWwnKVxuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkNvZGVjRmFjdG9yeX0gQ29kZWNGYWN0b3J5ICovXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4vdHlwZXNcIikuQmFzZU5hbWV9IEJhc2VOYW1lICovXG4vKiogQHR5cGVkZWYge2ltcG9ydChcIi4vdHlwZXNcIikuQmFzZUNvZGV9IEJhc2VDb2RlICovXG5cbi8qKlxuICogQ2xhc3MgdG8gZW5jb2RlL2RlY29kZSBpbiB0aGUgc3VwcG9ydGVkIEJhc2VzXG4gKlxuICovXG5jbGFzcyBCYXNlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7QmFzZU5hbWV9IG5hbWVcbiAgICogQHBhcmFtIHtCYXNlQ29kZX0gY29kZVxuICAgKiBAcGFyYW0ge0NvZGVjRmFjdG9yeX0gZmFjdG9yeVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWxwaGFiZXRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChuYW1lLCBjb2RlLCBmYWN0b3J5LCBhbHBoYWJldCkge1xuICAgIHRoaXMubmFtZSA9IG5hbWVcbiAgICB0aGlzLmNvZGUgPSBjb2RlXG4gICAgdGhpcy5jb2RlQnVmID0gZW5jb2RlVGV4dCh0aGlzLmNvZGUpXG4gICAgdGhpcy5hbHBoYWJldCA9IGFscGhhYmV0XG4gICAgdGhpcy5jb2RlYyA9IGZhY3RvcnkoYWxwaGFiZXQpXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSBidWZcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGVuY29kZSAoYnVmKSB7XG4gICAgcmV0dXJuIHRoaXMuY29kZWMuZW5jb2RlKGJ1ZilcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXG4gICAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICAgKi9cbiAgZGVjb2RlIChzdHJpbmcpIHtcbiAgICBmb3IgKGNvbnN0IGNoYXIgb2Ygc3RyaW5nKSB7XG4gICAgICBpZiAodGhpcy5hbHBoYWJldCAmJiB0aGlzLmFscGhhYmV0LmluZGV4T2YoY2hhcikgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBjaGFyYWN0ZXIgJyR7Y2hhcn0nIGluICcke3N0cmluZ30nYClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29kZWMuZGVjb2RlKHN0cmluZylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VcbiJdLCJuYW1lcyI6WyJlbmNvZGVUZXh0IiwicmVxdWlyZSIsIkJhc2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjb2RlIiwiZmFjdG9yeSIsImFscGhhYmV0IiwiY29kZUJ1ZiIsImNvZGVjIiwiZW5jb2RlIiwiYnVmIiwiZGVjb2RlIiwic3RyaW5nIiwiY2hhciIsImluZGV4T2YiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/constants.js":
/*!*************************************************!*\
  !*** ./node_modules/multibase/src/constants.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst baseX = __webpack_require__(/*! @multiformats/base-x */ \"(ssr)/./node_modules/@multiformats/base-x/src/index.js\");\nconst Base = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/multibase/src/base.js\");\nconst { rfc4648 } = __webpack_require__(/*! ./rfc4648 */ \"(ssr)/./node_modules/multibase/src/rfc4648.js\");\nconst { decodeText, encodeText } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /** @typedef {import('./types').Codec} Codec */ /** @typedef {import('./types').BaseName} BaseName */ /** @typedef {import('./types').BaseCode} BaseCode */ /** @type {CodecFactory} */ const identity = ()=>{\n    return {\n        encode: decodeText,\n        decode: encodeText\n    };\n};\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */ const constants = [\n    [\n        \"identity\",\n        \"\\x00\",\n        identity,\n        \"\"\n    ],\n    [\n        \"base2\",\n        \"0\",\n        rfc4648(1),\n        \"01\"\n    ],\n    [\n        \"base8\",\n        \"7\",\n        rfc4648(3),\n        \"01234567\"\n    ],\n    [\n        \"base10\",\n        \"9\",\n        baseX,\n        \"0123456789\"\n    ],\n    [\n        \"base16\",\n        \"f\",\n        rfc4648(4),\n        \"0123456789abcdef\"\n    ],\n    [\n        \"base16upper\",\n        \"F\",\n        rfc4648(4),\n        \"0123456789ABCDEF\"\n    ],\n    [\n        \"base32hex\",\n        \"v\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv\"\n    ],\n    [\n        \"base32hexupper\",\n        \"V\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV\"\n    ],\n    [\n        \"base32hexpad\",\n        \"t\",\n        rfc4648(5),\n        \"0123456789abcdefghijklmnopqrstuv=\"\n    ],\n    [\n        \"base32hexpadupper\",\n        \"T\",\n        rfc4648(5),\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\"\n    ],\n    [\n        \"base32\",\n        \"b\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567\"\n    ],\n    [\n        \"base32upper\",\n        \"B\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\n    ],\n    [\n        \"base32pad\",\n        \"c\",\n        rfc4648(5),\n        \"abcdefghijklmnopqrstuvwxyz234567=\"\n    ],\n    [\n        \"base32padupper\",\n        \"C\",\n        rfc4648(5),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\"\n    ],\n    [\n        \"base32z\",\n        \"h\",\n        rfc4648(5),\n        \"ybndrfg8ejkmcpqxot1uwisza345h769\"\n    ],\n    [\n        \"base36\",\n        \"k\",\n        baseX,\n        \"0123456789abcdefghijklmnopqrstuvwxyz\"\n    ],\n    [\n        \"base36upper\",\n        \"K\",\n        baseX,\n        \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    ],\n    [\n        \"base58btc\",\n        \"z\",\n        baseX,\n        \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    ],\n    [\n        \"base58flickr\",\n        \"Z\",\n        baseX,\n        \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n    ],\n    [\n        \"base64\",\n        \"m\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n    ],\n    [\n        \"base64pad\",\n        \"M\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n    ],\n    [\n        \"base64url\",\n        \"u\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n    ],\n    [\n        \"base64urlpad\",\n        \"U\",\n        rfc4648(6),\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\"\n    ]\n];\n/** @type {Record<BaseName,Base>} */ const names = constants.reduce((prev, tupple)=>{\n    prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);\n    return prev;\n}, /** @type {Record<BaseName,Base>} */ {});\n/** @type {Record<BaseCode,Base>} */ const codes = constants.reduce((prev, tupple)=>{\n    prev[tupple[1]] = names[tupple[0]];\n    return prev;\n}, /** @type {Record<BaseCode,Base>} */ {});\nmodule.exports = {\n    names,\n    codes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUN0QixNQUFNQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNyQixNQUFNLEVBQUVFLE9BQU8sRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUM1QixNQUFNLEVBQUVHLFVBQVUsRUFBRUMsVUFBVSxFQUFFLEdBQUdKLG1CQUFPQSxDQUFDO0FBRTNDLDJEQUEyRCxHQUMzRCw2Q0FBNkMsR0FDN0MsbURBQW1ELEdBQ25ELG1EQUFtRCxHQUVuRCx5QkFBeUIsR0FDekIsTUFBTUssV0FBVztJQUNmLE9BQU87UUFDTEMsUUFBUUg7UUFDUkksUUFBUUg7SUFDVjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxNQUFNSSxZQUFZO0lBQ2hCO1FBQUM7UUFBWTtRQUFRSDtRQUFVO0tBQUc7SUFDbEM7UUFBQztRQUFTO1FBQUtILFFBQVE7UUFBSTtLQUFLO0lBQ2hDO1FBQUM7UUFBUztRQUFLQSxRQUFRO1FBQUk7S0FBVztJQUN0QztRQUFDO1FBQVU7UUFBS0g7UUFBTztLQUFhO0lBQ3BDO1FBQUM7UUFBVTtRQUFLRyxRQUFRO1FBQUk7S0FBbUI7SUFDL0M7UUFBQztRQUFlO1FBQUtBLFFBQVE7UUFBSTtLQUFtQjtJQUNwRDtRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW1DO0lBQ2xFO1FBQUM7UUFBa0I7UUFBS0EsUUFBUTtRQUFJO0tBQW1DO0lBQ3ZFO1FBQUM7UUFBZ0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ3RFO1FBQUM7UUFBcUI7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQzNFO1FBQUM7UUFBVTtRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDL0Q7UUFBQztRQUFlO1FBQUtBLFFBQVE7UUFBSTtLQUFtQztJQUNwRTtRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ25FO1FBQUM7UUFBa0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9DO0lBQ3hFO1FBQUM7UUFBVztRQUFLQSxRQUFRO1FBQUk7S0FBbUM7SUFDaEU7UUFBQztRQUFVO1FBQUtIO1FBQU87S0FBdUM7SUFDOUQ7UUFBQztRQUFlO1FBQUtBO1FBQU87S0FBdUM7SUFDbkU7UUFBQztRQUFhO1FBQUtBO1FBQU87S0FBNkQ7SUFDdkY7UUFBQztRQUFnQjtRQUFLQTtRQUFPO0tBQTZEO0lBQzFGO1FBQUM7UUFBVTtRQUFLRyxRQUFRO1FBQUk7S0FBbUU7SUFDL0Y7UUFBQztRQUFhO1FBQUtBLFFBQVE7UUFBSTtLQUFvRTtJQUNuRztRQUFDO1FBQWE7UUFBS0EsUUFBUTtRQUFJO0tBQW1FO0lBQ2xHO1FBQUM7UUFBZ0I7UUFBS0EsUUFBUTtRQUFJO0tBQW9FO0NBQ3ZHO0FBRUQsa0NBQWtDLEdBQ2xDLE1BQU1PLFFBQVFELFVBQVVFLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQztJQUNwQ0QsSUFBSSxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSVgsS0FBS1csTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUUsRUFBRUEsTUFBTSxDQUFDLEVBQUU7SUFDckUsT0FBT0Q7QUFDVCxHQUFHLGtDQUFrQyxHQUFHLENBQUM7QUFFekMsa0NBQWtDLEdBQ2xDLE1BQU1FLFFBQVFMLFVBQVVFLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQztJQUNwQ0QsSUFBSSxDQUFDQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUdILEtBQUssQ0FBQ0csTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUNsQyxPQUFPRDtBQUNULEdBQUcsa0NBQWtDLEdBQUcsQ0FBQztBQUV6Q0csT0FBT0MsT0FBTyxHQUFHO0lBQ2ZOO0lBQ0FJO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9jb25zdGFudHMuanM/ZWE0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZVggPSByZXF1aXJlKCdAbXVsdGlmb3JtYXRzL2Jhc2UteCcpXG5jb25zdCBCYXNlID0gcmVxdWlyZSgnLi9iYXNlLmpzJylcbmNvbnN0IHsgcmZjNDY0OCB9ID0gcmVxdWlyZSgnLi9yZmM0NjQ4JylcbmNvbnN0IHsgZGVjb2RlVGV4dCwgZW5jb2RlVGV4dCB9ID0gcmVxdWlyZSgnLi91dGlsJylcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5Db2RlY0ZhY3Rvcnl9IENvZGVjRmFjdG9yeSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdHlwZXMnKS5Db2RlY30gQ29kZWMgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL3R5cGVzJykuQmFzZU5hbWV9IEJhc2VOYW1lICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkJhc2VDb2RlfSBCYXNlQ29kZSAqL1xuXG4vKiogQHR5cGUge0NvZGVjRmFjdG9yeX0gKi9cbmNvbnN0IGlkZW50aXR5ID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGVuY29kZTogZGVjb2RlVGV4dCxcbiAgICBkZWNvZGU6IGVuY29kZVRleHRcbiAgfVxufVxuXG4vKipcbiAqXG4gKiBuYW1lLCBjb2RlLCBpbXBsZW1lbnRhdGlvbiwgYWxwaGFiZXRcbiAqXG4gKiBAdHlwZSB7QXJyYXk8W0Jhc2VOYW1lLCBCYXNlQ29kZSwgQ29kZWNGYWN0b3J5LCBzdHJpbmddPn1cbiAqL1xuY29uc3QgY29uc3RhbnRzID0gW1xuICBbJ2lkZW50aXR5JywgJ1xceDAwJywgaWRlbnRpdHksICcnXSxcbiAgWydiYXNlMicsICcwJywgcmZjNDY0OCgxKSwgJzAxJ10sXG4gIFsnYmFzZTgnLCAnNycsIHJmYzQ2NDgoMyksICcwMTIzNDU2NyddLFxuICBbJ2Jhc2UxMCcsICc5JywgYmFzZVgsICcwMTIzNDU2Nzg5J10sXG4gIFsnYmFzZTE2JywgJ2YnLCByZmM0NjQ4KDQpLCAnMDEyMzQ1Njc4OWFiY2RlZiddLFxuICBbJ2Jhc2UxNnVwcGVyJywgJ0YnLCByZmM0NjQ4KDQpLCAnMDEyMzQ1Njc4OUFCQ0RFRiddLFxuICBbJ2Jhc2UzMmhleCcsICd2JywgcmZjNDY0OCg1KSwgJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2J10sXG4gIFsnYmFzZTMyaGV4dXBwZXInLCAnVicsIHJmYzQ2NDgoNSksICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVViddLFxuICBbJ2Jhc2UzMmhleHBhZCcsICd0JywgcmZjNDY0OCg1KSwgJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2PSddLFxuICBbJ2Jhc2UzMmhleHBhZHVwcGVyJywgJ1QnLCByZmM0NjQ4KDUpLCAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVY9J10sXG4gIFsnYmFzZTMyJywgJ2InLCByZmM0NjQ4KDUpLCAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1NjcnXSxcbiAgWydiYXNlMzJ1cHBlcicsICdCJywgcmZjNDY0OCg1KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMjM0NTY3J10sXG4gIFsnYmFzZTMycGFkJywgJ2MnLCByZmM0NjQ4KDUpLCAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoyMzQ1Njc9J10sXG4gIFsnYmFzZTMycGFkdXBwZXInLCAnQycsIHJmYzQ2NDgoNSksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nz0nXSxcbiAgWydiYXNlMzJ6JywgJ2gnLCByZmM0NjQ4KDUpLCAneWJuZHJmZzhlamttY3BxeG90MXV3aXN6YTM0NWg3NjknXSxcbiAgWydiYXNlMzYnLCAnaycsIGJhc2VYLCAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6J10sXG4gIFsnYmFzZTM2dXBwZXInLCAnSycsIGJhc2VYLCAnMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJ10sXG4gIFsnYmFzZTU4YnRjJywgJ3onLCBiYXNlWCwgJzEyMzQ1Njc4OUFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWmFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonXSxcbiAgWydiYXNlNThmbGlja3InLCAnWicsIGJhc2VYLCAnMTIzNDU2Nzg5YWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5ekFCQ0RFRkdISktMTU5QUVJTVFVWV1hZWiddLFxuICBbJ2Jhc2U2NCcsICdtJywgcmZjNDY0OCg2KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXSxcbiAgWydiYXNlNjRwYWQnLCAnTScsIHJmYzQ2NDgoNiksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSddLFxuICBbJ2Jhc2U2NHVybCcsICd1JywgcmZjNDY0OCg2KSwgJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV8nXSxcbiAgWydiYXNlNjR1cmxwYWQnLCAnVScsIHJmYzQ2NDgoNiksICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS1fPSddXG5dXG5cbi8qKiBAdHlwZSB7UmVjb3JkPEJhc2VOYW1lLEJhc2U+fSAqL1xuY29uc3QgbmFtZXMgPSBjb25zdGFudHMucmVkdWNlKChwcmV2LCB0dXBwbGUpID0+IHtcbiAgcHJldlt0dXBwbGVbMF1dID0gbmV3IEJhc2UodHVwcGxlWzBdLCB0dXBwbGVbMV0sIHR1cHBsZVsyXSwgdHVwcGxlWzNdKVxuICByZXR1cm4gcHJldlxufSwgLyoqIEB0eXBlIHtSZWNvcmQ8QmFzZU5hbWUsQmFzZT59ICovKHt9KSlcblxuLyoqIEB0eXBlIHtSZWNvcmQ8QmFzZUNvZGUsQmFzZT59ICovXG5jb25zdCBjb2RlcyA9IGNvbnN0YW50cy5yZWR1Y2UoKHByZXYsIHR1cHBsZSkgPT4ge1xuICBwcmV2W3R1cHBsZVsxXV0gPSBuYW1lc1t0dXBwbGVbMF1dXG4gIHJldHVybiBwcmV2XG59LCAvKiogQHR5cGUge1JlY29yZDxCYXNlQ29kZSxCYXNlPn0gKi8oe30pKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgbmFtZXMsXG4gIGNvZGVzXG59XG4iXSwibmFtZXMiOlsiYmFzZVgiLCJyZXF1aXJlIiwiQmFzZSIsInJmYzQ2NDgiLCJkZWNvZGVUZXh0IiwiZW5jb2RlVGV4dCIsImlkZW50aXR5IiwiZW5jb2RlIiwiZGVjb2RlIiwiY29uc3RhbnRzIiwibmFtZXMiLCJyZWR1Y2UiLCJwcmV2IiwidHVwcGxlIiwiY29kZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/multibase/src/index.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */ \nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/multibase/src/constants.js\");\nconst { encodeText, decodeText, concat } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/multibase/src/util.js\");\n/** @typedef {import('./base')} Base */ /** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */ /** @typedef {import(\"./types\").BaseCode} BaseCode */ /** @typedef {import(\"./types\").BaseName} BaseName */ /**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */ function multibase(nameOrCode, buf) {\n    if (!buf) {\n        throw new Error(\"requires an encoded Uint8Array\");\n    }\n    const { name, codeBuf } = encoding(nameOrCode);\n    validEncode(name, buf);\n    return concat([\n        codeBuf,\n        buf\n    ], codeBuf.length + buf.length);\n}\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function encode(nameOrCode, buf) {\n    const enc = encoding(nameOrCode);\n    const data = encodeText(enc.encode(buf));\n    return concat([\n        enc.codeBuf,\n        data\n    ], enc.codeBuf.length + data.length);\n}\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */ function decode(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    const prefix = data[0];\n    // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n    if ([\n        \"f\",\n        \"F\",\n        \"v\",\n        \"V\",\n        \"t\",\n        \"T\",\n        \"b\",\n        \"B\",\n        \"c\",\n        \"C\",\n        \"h\",\n        \"k\",\n        \"K\"\n    ].includes(prefix)) {\n        data = data.toLowerCase();\n    }\n    const enc = encoding(/** @type {BaseCode} */ data[0]);\n    return enc.decode(data.substring(1));\n}\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */ function isEncoded(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    // Ensure bufOrString is a string\n    if (Object.prototype.toString.call(data) !== \"[object String]\") {\n        return false;\n    }\n    try {\n        const enc = encoding(/** @type {BaseCode} */ data[0]);\n        return enc.name;\n    } catch (err) {\n        return false;\n    }\n}\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */ function validEncode(name, buf) {\n    const enc = encoding(name);\n    enc.decode(decodeText(buf));\n}\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encoding(nameOrCode) {\n    if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */ nameOrCode)) {\n        return constants.names[/** @type {BaseName} */ nameOrCode];\n    } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */ nameOrCode)) {\n        return constants.codes[/** @type {BaseCode} */ nameOrCode];\n    } else {\n        throw new Error(`Unsupported encoding: ${nameOrCode}`);\n    }\n}\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */ function encodingFromData(data) {\n    if (data instanceof Uint8Array) {\n        data = decodeText(data);\n    }\n    return encoding(/** @type {BaseCode} */ data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nconst names = Object.freeze(constants.names);\nconst codes = Object.freeze(constants.codes);\nexports.names = names;\nexports.codes = codes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/rfc4648.js":
/*!***********************************************!*\
  !*** ./node_modules/multibase/src/rfc4648.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n/** @typedef {import('./types').CodecFactory} CodecFactory */ /**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */ const decode = (string, alphabet, bitsPerChar)=>{\n    // Build the character lookup table:\n    /** @type {Record<string, number>} */ const codes = {};\n    for(let i = 0; i < alphabet.length; ++i){\n        codes[alphabet[i]] = i;\n    }\n    // Count the padding bytes:\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n    }\n    // Allocate the output:\n    const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n    // Parse the data:\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    let written = 0 // Next byte to write\n    ;\n    for(let i = 0; i < end; ++i){\n        // Read one character from the string:\n        const value = codes[string[i]];\n        if (value === undefined) {\n            throw new SyntaxError(\"Invalid character \" + string[i]);\n        }\n        // Append the bits to the buffer:\n        buffer = buffer << bitsPerChar | value;\n        bits += bitsPerChar;\n        // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & buffer >> bits;\n        }\n    }\n    // Verify that we have received just enough bits:\n    if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n};\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */ const encode = (data, alphabet, bitsPerChar)=>{\n    const pad = alphabet[alphabet.length - 1] === \"=\";\n    const mask = (1 << bitsPerChar) - 1;\n    let out = \"\";\n    let bits = 0 // Number of bits currently in the buffer\n    ;\n    let buffer = 0 // Bits waiting to be written out, MSB first\n    ;\n    for(let i = 0; i < data.length; ++i){\n        // Slurp data into the buffer:\n        buffer = buffer << 8 | data[i];\n        bits += 8;\n        // Write out as much as we can:\n        while(bits > bitsPerChar){\n            bits -= bitsPerChar;\n            out += alphabet[mask & buffer >> bits];\n        }\n    }\n    // Partial character:\n    if (bits) {\n        out += alphabet[mask & buffer << bitsPerChar - bits];\n    }\n    // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while(out.length * bitsPerChar & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n};\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */ const rfc4648 = (bitsPerChar)=>(alphabet)=>{\n        return {\n            /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */ encode (input) {\n                return encode(input, alphabet, bitsPerChar);\n            },\n            /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */ decode (input) {\n                return decode(input, alphabet, bitsPerChar);\n            }\n        };\n    };\nmodule.exports = {\n    rfc4648\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy9yZmM0NjQ4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsMkRBQTJELEdBRTNEOzs7OztDQUtDLEdBQ0QsTUFBTUEsU0FBUyxDQUFDQyxRQUFRQyxVQUFVQztJQUNoQyxvQ0FBb0M7SUFDcEMsbUNBQW1DLEdBQ25DLE1BQU1DLFFBQVEsQ0FBQztJQUNmLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxTQUFTSSxNQUFNLEVBQUUsRUFBRUQsRUFBRztRQUN4Q0QsS0FBSyxDQUFDRixRQUFRLENBQUNHLEVBQUUsQ0FBQyxHQUFHQTtJQUN2QjtJQUVBLDJCQUEyQjtJQUMzQixJQUFJRSxNQUFNTixPQUFPSyxNQUFNO0lBQ3ZCLE1BQU9MLE1BQU0sQ0FBQ00sTUFBTSxFQUFFLEtBQUssSUFBSztRQUM5QixFQUFFQTtJQUNKO0lBRUEsdUJBQXVCO0lBQ3ZCLE1BQU1DLE1BQU0sSUFBSUMsV0FBVyxNQUFPTixjQUFjLElBQUs7SUFFckQsa0JBQWtCO0lBQ2xCLElBQUlPLE9BQU8sRUFBRSx5Q0FBeUM7O0lBQ3RELElBQUlDLFNBQVMsRUFBRSw0Q0FBNEM7O0lBQzNELElBQUlDLFVBQVUsRUFBRSxxQkFBcUI7O0lBQ3JDLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJRSxLQUFLLEVBQUVGLEVBQUc7UUFDNUIsc0NBQXNDO1FBQ3RDLE1BQU1RLFFBQVFULEtBQUssQ0FBQ0gsTUFBTSxDQUFDSSxFQUFFLENBQUM7UUFDOUIsSUFBSVEsVUFBVUMsV0FBVztZQUN2QixNQUFNLElBQUlDLFlBQVksdUJBQXVCZCxNQUFNLENBQUNJLEVBQUU7UUFDeEQ7UUFFQSxpQ0FBaUM7UUFDakNNLFNBQVMsVUFBV1IsY0FBZVU7UUFDbkNILFFBQVFQO1FBRVIsd0RBQXdEO1FBQ3hELElBQUlPLFFBQVEsR0FBRztZQUNiQSxRQUFRO1lBQ1JGLEdBQUcsQ0FBQ0ksVUFBVSxHQUFHLE9BQVFELFVBQVVEO1FBQ3JDO0lBQ0Y7SUFFQSxpREFBaUQ7SUFDakQsSUFBSUEsUUFBUVAsZUFBZSxPQUFRUSxVQUFXLElBQUlELE1BQVE7UUFDeEQsTUFBTSxJQUFJSyxZQUFZO0lBQ3hCO0lBRUEsT0FBT1A7QUFDVDtBQUVBOzs7OztDQUtDLEdBQ0QsTUFBTVEsU0FBUyxDQUFDQyxNQUFNZixVQUFVQztJQUM5QixNQUFNZSxNQUFNaEIsUUFBUSxDQUFDQSxTQUFTSSxNQUFNLEdBQUcsRUFBRSxLQUFLO0lBQzlDLE1BQU1hLE9BQU8sQ0FBQyxLQUFLaEIsV0FBVSxJQUFLO0lBQ2xDLElBQUlLLE1BQU07SUFFVixJQUFJRSxPQUFPLEVBQUUseUNBQXlDOztJQUN0RCxJQUFJQyxTQUFTLEVBQUUsNENBQTRDOztJQUMzRCxJQUFLLElBQUlOLElBQUksR0FBR0EsSUFBSVksS0FBS1gsTUFBTSxFQUFFLEVBQUVELEVBQUc7UUFDcEMsOEJBQThCO1FBQzlCTSxTQUFTLFVBQVcsSUFBS00sSUFBSSxDQUFDWixFQUFFO1FBQ2hDSyxRQUFRO1FBRVIsK0JBQStCO1FBQy9CLE1BQU9BLE9BQU9QLFlBQWE7WUFDekJPLFFBQVFQO1lBQ1JLLE9BQU9OLFFBQVEsQ0FBQ2lCLE9BQVFSLFVBQVVELEtBQU07UUFDMUM7SUFDRjtJQUVBLHFCQUFxQjtJQUNyQixJQUFJQSxNQUFNO1FBQ1JGLE9BQU9OLFFBQVEsQ0FBQ2lCLE9BQVFSLFVBQVdSLGNBQWNPLEtBQU87SUFDMUQ7SUFFQSx1REFBdUQ7SUFDdkQsSUFBSVEsS0FBSztRQUNQLE1BQU8sSUFBS1osTUFBTSxHQUFHSCxjQUFlLEVBQUc7WUFDckNLLE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBT0E7QUFDVDtBQUVBOzs7OztDQUtDLEdBQ0QsTUFBTVksVUFBVSxDQUFDakIsY0FBZ0IsQ0FBQ0Q7UUFDaEMsT0FBTztZQUNMOzs7S0FHQyxHQUNEYyxRQUFRSyxLQUFLO2dCQUNYLE9BQU9MLE9BQU9LLE9BQU9uQixVQUFVQztZQUNqQztZQUNBOzs7S0FHQyxHQUNESCxRQUFRcUIsS0FBSztnQkFDWCxPQUFPckIsT0FBT3FCLE9BQU9uQixVQUFVQztZQUNqQztRQUNGO0lBQ0Y7QUFFQW1CLE9BQU9DLE9BQU8sR0FBRztJQUFFSDtBQUFRIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL211bHRpYmFzZS9zcmMvcmZjNDY0OC5qcz8xMDkyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkNvZGVjRmFjdG9yeX0gQ29kZWNGYWN0b3J5ICovXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGFscGhhYmV0XG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1BlckNoYXJcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICovXG5jb25zdCBkZWNvZGUgPSAoc3RyaW5nLCBhbHBoYWJldCwgYml0c1BlckNoYXIpID0+IHtcbiAgLy8gQnVpbGQgdGhlIGNoYXJhY3RlciBsb29rdXAgdGFibGU6XG4gIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgbnVtYmVyPn0gKi9cbiAgY29uc3QgY29kZXMgPSB7fVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFscGhhYmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29kZXNbYWxwaGFiZXRbaV1dID0gaVxuICB9XG5cbiAgLy8gQ291bnQgdGhlIHBhZGRpbmcgYnl0ZXM6XG4gIGxldCBlbmQgPSBzdHJpbmcubGVuZ3RoXG4gIHdoaWxlIChzdHJpbmdbZW5kIC0gMV0gPT09ICc9Jykge1xuICAgIC0tZW5kXG4gIH1cblxuICAvLyBBbGxvY2F0ZSB0aGUgb3V0cHV0OlxuICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheSgoZW5kICogYml0c1BlckNoYXIgLyA4KSB8IDApXG5cbiAgLy8gUGFyc2UgdGhlIGRhdGE6XG4gIGxldCBiaXRzID0gMCAvLyBOdW1iZXIgb2YgYml0cyBjdXJyZW50bHkgaW4gdGhlIGJ1ZmZlclxuICBsZXQgYnVmZmVyID0gMCAvLyBCaXRzIHdhaXRpbmcgdG8gYmUgd3JpdHRlbiBvdXQsIE1TQiBmaXJzdFxuICBsZXQgd3JpdHRlbiA9IDAgLy8gTmV4dCBieXRlIHRvIHdyaXRlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5kOyArK2kpIHtcbiAgICAvLyBSZWFkIG9uZSBjaGFyYWN0ZXIgZnJvbSB0aGUgc3RyaW5nOlxuICAgIGNvbnN0IHZhbHVlID0gY29kZXNbc3RyaW5nW2ldXVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyICcgKyBzdHJpbmdbaV0pXG4gICAgfVxuXG4gICAgLy8gQXBwZW5kIHRoZSBiaXRzIHRvIHRoZSBidWZmZXI6XG4gICAgYnVmZmVyID0gKGJ1ZmZlciA8PCBiaXRzUGVyQ2hhcikgfCB2YWx1ZVxuICAgIGJpdHMgKz0gYml0c1BlckNoYXJcblxuICAgIC8vIFdyaXRlIG91dCBzb21lIGJpdHMgaWYgdGhlIGJ1ZmZlciBoYXMgYSBieXRlJ3Mgd29ydGg6XG4gICAgaWYgKGJpdHMgPj0gOCkge1xuICAgICAgYml0cyAtPSA4XG4gICAgICBvdXRbd3JpdHRlbisrXSA9IDB4ZmYgJiAoYnVmZmVyID4+IGJpdHMpXG4gICAgfVxuICB9XG5cbiAgLy8gVmVyaWZ5IHRoYXQgd2UgaGF2ZSByZWNlaXZlZCBqdXN0IGVub3VnaCBiaXRzOlxuICBpZiAoYml0cyA+PSBiaXRzUGVyQ2hhciB8fCAweGZmICYgKGJ1ZmZlciA8PCAoOCAtIGJpdHMpKSkge1xuICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignVW5leHBlY3RlZCBlbmQgb2YgZGF0YScpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbi8qKlxuICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhXG4gKiBAcGFyYW0ge3N0cmluZ30gYWxwaGFiZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRzUGVyQ2hhclxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgZW5jb2RlID0gKGRhdGEsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcikgPT4ge1xuICBjb25zdCBwYWQgPSBhbHBoYWJldFthbHBoYWJldC5sZW5ndGggLSAxXSA9PT0gJz0nXG4gIGNvbnN0IG1hc2sgPSAoMSA8PCBiaXRzUGVyQ2hhcikgLSAxXG4gIGxldCBvdXQgPSAnJ1xuXG4gIGxldCBiaXRzID0gMCAvLyBOdW1iZXIgb2YgYml0cyBjdXJyZW50bHkgaW4gdGhlIGJ1ZmZlclxuICBsZXQgYnVmZmVyID0gMCAvLyBCaXRzIHdhaXRpbmcgdG8gYmUgd3JpdHRlbiBvdXQsIE1TQiBmaXJzdFxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBTbHVycCBkYXRhIGludG8gdGhlIGJ1ZmZlcjpcbiAgICBidWZmZXIgPSAoYnVmZmVyIDw8IDgpIHwgZGF0YVtpXVxuICAgIGJpdHMgKz0gOFxuXG4gICAgLy8gV3JpdGUgb3V0IGFzIG11Y2ggYXMgd2UgY2FuOlxuICAgIHdoaWxlIChiaXRzID4gYml0c1BlckNoYXIpIHtcbiAgICAgIGJpdHMgLT0gYml0c1BlckNoYXJcbiAgICAgIG91dCArPSBhbHBoYWJldFttYXNrICYgKGJ1ZmZlciA+PiBiaXRzKV1cbiAgICB9XG4gIH1cblxuICAvLyBQYXJ0aWFsIGNoYXJhY3RlcjpcbiAgaWYgKGJpdHMpIHtcbiAgICBvdXQgKz0gYWxwaGFiZXRbbWFzayAmIChidWZmZXIgPDwgKGJpdHNQZXJDaGFyIC0gYml0cykpXVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmcgY2hhcmFjdGVycyB1bnRpbCB3ZSBoaXQgYSBieXRlIGJvdW5kYXJ5OlxuICBpZiAocGFkKSB7XG4gICAgd2hpbGUgKChvdXQubGVuZ3RoICogYml0c1BlckNoYXIpICYgNykge1xuICAgICAgb3V0ICs9ICc9J1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuLyoqXG4gKiBSRkM0NjQ4IEZhY3RvcnlcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYml0c1BlckNoYXJcbiAqIEByZXR1cm5zIHtDb2RlY0ZhY3Rvcnl9XG4gKi9cbmNvbnN0IHJmYzQ2NDggPSAoYml0c1BlckNoYXIpID0+IChhbHBoYWJldCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGVuY29kZSAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBlbmNvZGUoaW5wdXQsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcilcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFxuICAgICAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICAgICAqL1xuICAgIGRlY29kZSAoaW5wdXQpIHtcbiAgICAgIHJldHVybiBkZWNvZGUoaW5wdXQsIGFscGhhYmV0LCBiaXRzUGVyQ2hhcilcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHJmYzQ2NDggfVxuIl0sIm5hbWVzIjpbImRlY29kZSIsInN0cmluZyIsImFscGhhYmV0IiwiYml0c1BlckNoYXIiLCJjb2RlcyIsImkiLCJsZW5ndGgiLCJlbmQiLCJvdXQiLCJVaW50OEFycmF5IiwiYml0cyIsImJ1ZmZlciIsIndyaXR0ZW4iLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIlN5bnRheEVycm9yIiwiZW5jb2RlIiwiZGF0YSIsInBhZCIsIm1hc2siLCJyZmM0NjQ4IiwiaW5wdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/rfc4648.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/multibase/src/util.js":
/*!********************************************!*\
  !*** ./node_modules/multibase/src/util.js ***!
  \********************************************/
/***/ ((module) => {

eval("\nconst textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */ const decodeText = (bytes)=>textDecoder.decode(bytes);\nconst textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */ const encodeText = (text)=>textEncoder.encode(text);\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */ function concat(arrs, length) {\n    const output = new Uint8Array(length);\n    let offset = 0;\n    for (const arr of arrs){\n        output.set(arr, offset);\n        offset += arr.length;\n    }\n    return output;\n}\nmodule.exports = {\n    decodeText,\n    encodeText,\n    concat\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXVsdGliYXNlL3NyYy91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsY0FBYyxJQUFJQztBQUN4Qjs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhLENBQUNDLFFBQVVILFlBQVlJLE1BQU0sQ0FBQ0Q7QUFFakQsTUFBTUUsY0FBYyxJQUFJQztBQUN4Qjs7O0NBR0MsR0FDRCxNQUFNQyxhQUFhLENBQUNDLE9BQVNILFlBQVlJLE1BQU0sQ0FBQ0Q7QUFFaEQ7Ozs7OztDQU1DLEdBQ0QsU0FBU0UsT0FBUUMsSUFBSSxFQUFFQyxNQUFNO0lBQzNCLE1BQU1DLFNBQVMsSUFBSUMsV0FBV0Y7SUFDOUIsSUFBSUcsU0FBUztJQUViLEtBQUssTUFBTUMsT0FBT0wsS0FBTTtRQUN0QkUsT0FBT0ksR0FBRyxDQUFDRCxLQUFLRDtRQUNoQkEsVUFBVUMsSUFBSUosTUFBTTtJQUN0QjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQUssT0FBT0MsT0FBTyxHQUFHO0lBQUVqQjtJQUFZSztJQUFZRztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL211bHRpYmFzZS9zcmMvdXRpbC5qcz82N2VjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB0ZXh0RGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpXG4vKipcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJWaWV3fEFycmF5QnVmZmVyfSBieXRlc1xuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuY29uc3QgZGVjb2RlVGV4dCA9IChieXRlcykgPT4gdGV4dERlY29kZXIuZGVjb2RlKGJ5dGVzKVxuXG5jb25zdCB0ZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAcmV0dXJucyB7VWludDhBcnJheX1cbiAqL1xuY29uc3QgZW5jb2RlVGV4dCA9ICh0ZXh0KSA9PiB0ZXh0RW5jb2Rlci5lbmNvZGUodGV4dClcblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IFVpbnQ4QXJyYXkgY3JlYXRlZCBieSBjb25jYXRlbmF0aW5nIHRoZSBwYXNzZWQgQXJyYXlzXG4gKlxuICogQHBhcmFtIHtBcnJheTxBcnJheUxpa2U8bnVtYmVyPj59IGFycnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fVxuICovXG5mdW5jdGlvbiBjb25jYXQgKGFycnMsIGxlbmd0aCkge1xuICBjb25zdCBvdXRwdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gIGxldCBvZmZzZXQgPSAwXG5cbiAgZm9yIChjb25zdCBhcnIgb2YgYXJycykge1xuICAgIG91dHB1dC5zZXQoYXJyLCBvZmZzZXQpXG4gICAgb2Zmc2V0ICs9IGFyci5sZW5ndGhcbiAgfVxuXG4gIHJldHVybiBvdXRwdXRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IGRlY29kZVRleHQsIGVuY29kZVRleHQsIGNvbmNhdCB9XG4iXSwibmFtZXMiOlsidGV4dERlY29kZXIiLCJUZXh0RGVjb2RlciIsImRlY29kZVRleHQiLCJieXRlcyIsImRlY29kZSIsInRleHRFbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGVUZXh0IiwidGV4dCIsImVuY29kZSIsImNvbmNhdCIsImFycnMiLCJsZW5ndGgiLCJvdXRwdXQiLCJVaW50OEFycmF5Iiwib2Zmc2V0IiwiYXJyIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/multibase/src/util.js\n");

/***/ })

};
;