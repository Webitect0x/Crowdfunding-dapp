"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/number-to-bn";
exports.ids = ["vendor-chunks/number-to-bn"];
exports.modules = {

/***/ "(ssr)/./node_modules/number-to-bn/node_modules/bn.js/lib/bn.js":
/*!****************************************************************!*\
  !*** ./node_modules/number-to-bn/node_modules/bn.js/lib/bn.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n(function(module1, exports) {\n    \"use strict\";\n    // Utils\n    function assert(val, msg) {\n        if (!val) throw new Error(msg || \"Assertion failed\");\n    }\n    // Could use `inherits` module, but don't want to move from single file\n    // architecture yet.\n    function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n        var TempCtor = function() {};\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n    }\n    // BN\n    function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n            return number;\n        }\n        this.negative = 0;\n        this.words = null;\n        this.length = 0;\n        // Reduction context\n        this.red = null;\n        if (number !== null) {\n            if (base === \"le\" || base === \"be\") {\n                endian = base;\n                base = 10;\n            }\n            this._init(number || 0, base || 10, endian || \"be\");\n        }\n    }\n    if (typeof module1 === \"object\") {\n        module1.exports = BN;\n    } else {\n        exports.BN = BN;\n    }\n    BN.BN = BN;\n    BN.wordSize = 26;\n    var Buffer;\n    try {\n        Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    } catch (e) {}\n    BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n            return true;\n        }\n        return num !== null && typeof num === \"object\" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n    };\n    BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n    };\n    BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n    };\n    BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === \"number\") {\n            return this._initNumber(number, base, endian);\n        }\n        if (typeof number === \"object\") {\n            return this._initArray(number, base, endian);\n        }\n        if (base === \"hex\") {\n            base = 16;\n        }\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, \"\");\n        var start = 0;\n        if (number[0] === \"-\") {\n            start++;\n        }\n        if (base === 16) {\n            this._parseHex(number, start);\n        } else {\n            this._parseBase(number, base, start);\n        }\n        if (number[0] === \"-\") {\n            this.negative = 1;\n        }\n        this.strip();\n        if (endian !== \"le\") return;\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n            this.negative = 1;\n            number = -number;\n        }\n        if (number < 0x4000000) {\n            this.words = [\n                number & 0x3ffffff\n            ];\n            this.length = 1;\n        } else if (number < 0x10000000000000) {\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff\n            ];\n            this.length = 2;\n        } else {\n            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n            this.words = [\n                number & 0x3ffffff,\n                number / 0x4000000 & 0x3ffffff,\n                1\n            ];\n            this.length = 3;\n        }\n        if (endian !== \"le\") return;\n        // Reverse the bytes\n        this._initArray(this.toArray(), base, endian);\n    };\n    BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === \"number\");\n        if (number.length <= 0) {\n            this.words = [\n                0\n            ];\n            this.length = 1;\n            return this;\n        }\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        var off = 0;\n        if (endian === \"be\") {\n            for(i = number.length - 1, j = 0; i >= 0; i -= 3){\n                w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        } else if (endian === \"le\") {\n            for(i = 0, j = 0; i < number.length; i += 3){\n                w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n                this.words[j] |= w << off & 0x3ffffff;\n                this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n                off += 24;\n                if (off >= 26) {\n                    off -= 26;\n                    j++;\n                }\n            }\n        }\n        return this.strip();\n    };\n    function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r <<= 4;\n            // 'a' - 'f'\n            if (c >= 49 && c <= 54) {\n                r |= c - 49 + 0xa;\n            // 'A' - 'F'\n            } else if (c >= 17 && c <= 22) {\n                r |= c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r |= c & 0xf;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            this.words[i] = 0;\n        }\n        var j, w;\n        // Scan 24-bit chunks and add them to the number\n        var off = 0;\n        for(i = number.length - 6, j = 0; i >= start; i -= 6){\n            w = parseHex(number, i, i + 6);\n            this.words[j] |= w << off & 0x3ffffff;\n            // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n            off += 24;\n            if (off >= 26) {\n                off -= 26;\n                j++;\n            }\n        }\n        if (i + 6 !== start) {\n            w = parseHex(number, start, i + 6);\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n        this.strip();\n    };\n    function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n        for(var i = start; i < len; i++){\n            var c = str.charCodeAt(i) - 48;\n            r *= mul;\n            // 'a'\n            if (c >= 49) {\n                r += c - 49 + 0xa;\n            // 'A'\n            } else if (c >= 17) {\n                r += c - 17 + 0xa;\n            // '0' - '9'\n            } else {\n                r += c;\n            }\n        }\n        return r;\n    }\n    BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [\n            0\n        ];\n        this.length = 1;\n        // Find length of limb in base\n        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base){\n            limbLen++;\n        }\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n        for(var i = start; i < end; i += limbLen){\n            word = parseBase(number, i, i + limbLen, base);\n            this.imuln(limbPow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n        if (mod !== 0) {\n            var pow = 1;\n            word = parseBase(number, i, number.length, base);\n            for(i = 0; i < mod; i++){\n                pow *= base;\n            }\n            this.imuln(pow);\n            if (this.words[0] + word < 0x4000000) {\n                this.words[0] += word;\n            } else {\n                this._iaddn(word);\n            }\n        }\n    };\n    BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n        for(var i = 0; i < this.length; i++){\n            dest.words[i] = this.words[i];\n        }\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n    };\n    BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n    };\n    BN.prototype._expand = function _expand(size) {\n        while(this.length < size){\n            this.words[this.length++] = 0;\n        }\n        return this;\n    };\n    // Remove leading `0` from `this`\n    BN.prototype.strip = function strip() {\n        while(this.length > 1 && this.words[this.length - 1] === 0){\n            this.length--;\n        }\n        return this._normSign();\n    };\n    BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n            this.negative = 0;\n        }\n        return this;\n    };\n    BN.prototype.inspect = function inspect() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n    };\n    /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */ var zeros = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n    ];\n    var groupSizes = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n    ];\n    var groupBases = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        10000000,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64000000,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        24300000,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n    ];\n    BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n        if (base === 16 || base === \"hex\") {\n            out = \"\";\n            var off = 0;\n            var carry = 0;\n            for(var i = 0; i < this.length; i++){\n                var w = this.words[i];\n                var word = ((w << off | carry) & 0xffffff).toString(16);\n                carry = w >>> 24 - off & 0xffffff;\n                if (carry !== 0 || i !== this.length - 1) {\n                    out = zeros[6 - word.length] + word + out;\n                } else {\n                    out = word + out;\n                }\n                off += 2;\n                if (off >= 26) {\n                    off -= 26;\n                    i--;\n                }\n            }\n            if (carry !== 0) {\n                out = carry.toString(16) + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n            var groupSize = groupSizes[base];\n            // var groupBase = Math.pow(base, groupSize);\n            var groupBase = groupBases[base];\n            out = \"\";\n            var c = this.clone();\n            c.negative = 0;\n            while(!c.isZero()){\n                var r = c.modn(groupBase).toString(base);\n                c = c.idivn(groupBase);\n                if (!c.isZero()) {\n                    out = zeros[groupSize - r.length] + r + out;\n                } else {\n                    out = r + out;\n                }\n            }\n            if (this.isZero()) {\n                out = \"0\" + out;\n            }\n            while(out.length % padding !== 0){\n                out = \"0\" + out;\n            }\n            if (this.negative !== 0) {\n                out = \"-\" + out;\n            }\n            return out;\n        }\n        assert(false, \"Base should be between 2 and 36\");\n    };\n    BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n        if (this.length === 2) {\n            ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n            // NOTE: at this stage it is known that the top bit is set\n            ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n            assert(false, \"Number can only safely store up to 53 bits\");\n        }\n        return this.negative !== 0 ? -ret : ret;\n    };\n    BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n    };\n    BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== \"undefined\");\n        return this.toArrayLike(Buffer, endian, length);\n    };\n    BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n    };\n    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, \"byte array longer than desired length\");\n        assert(reqLength > 0, \"Requested array length <= 0\");\n        this.strip();\n        var littleEndian = endian === \"le\";\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n        if (!littleEndian) {\n            // Assume big-endian\n            for(i = 0; i < reqLength - byteLength; i++){\n                res[i] = 0;\n            }\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[reqLength - i - 1] = b;\n            }\n        } else {\n            for(i = 0; !q.isZero(); i++){\n                b = q.andln(0xff);\n                q.iushrn(8);\n                res[i] = b;\n            }\n            for(; i < reqLength; i++){\n                res[i] = 0;\n            }\n        }\n        return res;\n    };\n    if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n            return 32 - Math.clz32(w);\n        };\n    } else {\n        BN.prototype._countBits = function _countBits(w) {\n            var t = w;\n            var r = 0;\n            if (t >= 0x1000) {\n                r += 13;\n                t >>>= 13;\n            }\n            if (t >= 0x40) {\n                r += 7;\n                t >>>= 7;\n            }\n            if (t >= 0x8) {\n                r += 4;\n                t >>>= 4;\n            }\n            if (t >= 0x02) {\n                r += 2;\n                t >>>= 2;\n            }\n            return r + t;\n        };\n    }\n    BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n        if ((t & 0x1fff) === 0) {\n            r += 13;\n            t >>>= 13;\n        }\n        if ((t & 0x7f) === 0) {\n            r += 7;\n            t >>>= 7;\n        }\n        if ((t & 0xf) === 0) {\n            r += 4;\n            t >>>= 4;\n        }\n        if ((t & 0x3) === 0) {\n            r += 2;\n            t >>>= 2;\n        }\n        if ((t & 0x1) === 0) {\n            r++;\n        }\n        return r;\n    };\n    // Return number of used bits in a BN\n    BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n        var hi = this._countBits(w);\n        return (this.length - 1) * 26 + hi;\n    };\n    function toBitArray(num) {\n        var w = new Array(num.bitLength());\n        for(var bit = 0; bit < w.length; bit++){\n            var off = bit / 26 | 0;\n            var wbit = bit % 26;\n            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n        return w;\n    }\n    // Number of trailing zero bits\n    BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n        for(var i = 0; i < this.length; i++){\n            var b = this._zeroBits(this.words[i]);\n            r += b;\n            if (b !== 26) break;\n        }\n        return r;\n    };\n    BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n    };\n    BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n            return this.abs().inotn(width).iaddn(1);\n        }\n        return this.clone();\n    };\n    BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n            return this.notn(width).iaddn(1).ineg();\n        }\n        return this.clone();\n    };\n    BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n    };\n    // Return negative clone of `this`\n    BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n    };\n    BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n            this.negative ^= 1;\n        }\n        return this;\n    };\n    // Or `num` with `this` in-place\n    BN.prototype.iuor = function iuor(num) {\n        while(this.length < num.length){\n            this.words[this.length++] = 0;\n        }\n        for(var i = 0; i < num.length; i++){\n            this.words[i] = this.words[i] | num.words[i];\n        }\n        return this.strip();\n    };\n    BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n    };\n    // Or `num` with `this`\n    BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n    };\n    BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n    };\n    // And `num` with `this` in-place\n    BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n        if (this.length > num.length) {\n            b = num;\n        } else {\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = this.words[i] & num.words[i];\n        }\n        this.length = b.length;\n        return this.strip();\n    };\n    BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n    };\n    // And `num` with `this`\n    BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n    };\n    BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n    };\n    // Xor `num` with `this` in-place\n    BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        for(var i = 0; i < b.length; i++){\n            this.words[i] = a.words[i] ^ b.words[i];\n        }\n        if (this !== a) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = a.length;\n        return this.strip();\n    };\n    BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n    };\n    // Xor `num` with `this`\n    BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n    };\n    BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n    };\n    // Not ``this`` with ``width`` bitwidth\n    BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === \"number\" && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26;\n        // Extend the buffer with leading zeroes\n        this._expand(bytesNeeded);\n        if (bitsLeft > 0) {\n            bytesNeeded--;\n        }\n        // Handle complete words\n        for(var i = 0; i < bytesNeeded; i++){\n            this.words[i] = ~this.words[i] & 0x3ffffff;\n        }\n        // Handle the residue\n        if (bitsLeft > 0) {\n            this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        }\n        // And remove leading zeroes\n        return this.strip();\n    };\n    BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n    };\n    // Set `bit` of `this`\n    BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n        this._expand(off + 1);\n        if (val) {\n            this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n            this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n        return this.strip();\n    };\n    // Add `num` to `this` in-place\n    BN.prototype.iadd = function iadd(num) {\n        var r;\n        // negative + positive\n        if (this.negative !== 0 && num.negative === 0) {\n            this.negative = 0;\n            r = this.isub(num);\n            this.negative ^= 1;\n            return this._normSign();\n        // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n            num.negative = 0;\n            r = this.isub(num);\n            num.negative = 1;\n            return r._normSign();\n        }\n        // a.length > b.length\n        var a, b;\n        if (this.length > num.length) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            this.words[i] = r & 0x3ffffff;\n            carry = r >>> 26;\n        }\n        this.length = a.length;\n        if (carry !== 0) {\n            this.words[this.length] = carry;\n            this.length++;\n        // Copy the rest of the words\n        } else if (a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        return this;\n    };\n    // Add `num` to `this`\n    BN.prototype.add = function add(num) {\n        var res;\n        if (num.negative !== 0 && this.negative === 0) {\n            num.negative = 0;\n            res = this.sub(num);\n            num.negative ^= 1;\n            return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n            this.negative = 0;\n            res = num.sub(this);\n            this.negative = 1;\n            return res;\n        }\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n    };\n    // Subtract `num` from `this` in-place\n    BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n            num.negative = 0;\n            var r = this.iadd(num);\n            num.negative = 1;\n            return r._normSign();\n        // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n            this.negative = 0;\n            this.iadd(num);\n            this.negative = 1;\n            return this._normSign();\n        }\n        // At this point both numbers are positive\n        var cmp = this.cmp(num);\n        // Optimization - zeroify\n        if (cmp === 0) {\n            this.negative = 0;\n            this.length = 1;\n            this.words[0] = 0;\n            return this;\n        }\n        // a > b\n        var a, b;\n        if (cmp > 0) {\n            a = this;\n            b = num;\n        } else {\n            a = num;\n            b = this;\n        }\n        var carry = 0;\n        for(var i = 0; i < b.length; i++){\n            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        for(; carry !== 0 && i < a.length; i++){\n            r = (a.words[i] | 0) + carry;\n            carry = r >> 26;\n            this.words[i] = r & 0x3ffffff;\n        }\n        // Copy rest of the words\n        if (carry === 0 && i < a.length && a !== this) {\n            for(; i < a.length; i++){\n                this.words[i] = a.words[i];\n            }\n        }\n        this.length = Math.max(this.length, i);\n        if (a !== this) {\n            this.negative = 1;\n        }\n        return this.strip();\n    };\n    // Subtract `num` from `this`\n    BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n    };\n    function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0;\n        // Peel one iteration (compiler can't do it, because of code complexity)\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n        for(var k = 1; k < len; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = carry >>> 26;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j | 0;\n                a = self.words[i] | 0;\n                b = num.words[j] | 0;\n                r = a * b + rword;\n                ncarry += r / 0x4000000 | 0;\n                rword = r & 0x3ffffff;\n            }\n            out.words[k] = rword | 0;\n            carry = ncarry | 0;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry | 0;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    // TODO(indutny): it may be reasonable to omit it for users who don't need\n    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n    // multiplication (like elliptic secp256k1).\n    var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */ lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */ lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */ lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */ lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */ lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */ lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */ lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */ lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */ lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */ lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */ lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */ lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */ lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */ lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */ lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */ lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */ lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */ lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */ lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n        if (c !== 0) {\n            o[19] = c;\n            out.length++;\n        }\n        return out;\n    };\n    // Polyfill comb\n    if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n    }\n    function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n        for(var k = 0; k < out.length - 1; k++){\n            // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n            // note that ncarry could be >= 0x3ffffff\n            var ncarry = hncarry;\n            hncarry = 0;\n            var rword = carry & 0x3ffffff;\n            var maxJ = Math.min(k, num.length - 1);\n            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){\n                var i = k - j;\n                var a = self.words[i] | 0;\n                var b = num.words[j] | 0;\n                var r = a * b;\n                var lo = r & 0x3ffffff;\n                ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n                lo = lo + rword | 0;\n                rword = lo & 0x3ffffff;\n                ncarry = ncarry + (lo >>> 26) | 0;\n                hncarry += ncarry >>> 26;\n                ncarry &= 0x3ffffff;\n            }\n            out.words[k] = rword;\n            carry = ncarry;\n            ncarry = hncarry;\n        }\n        if (carry !== 0) {\n            out.words[k] = carry;\n        } else {\n            out.length--;\n        }\n        return out.strip();\n    }\n    function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n    }\n    BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n        if (this.length === 10 && num.length === 10) {\n            res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n            res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n            res = bigMulTo(this, num, out);\n        } else {\n            res = jumboMulTo(this, num, out);\n        }\n        return res;\n    };\n    // Cooley-Tukey algorithm for FFT\n    // slightly revisited to rely on looping instead of recursion\n    function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n        for(var i = 0; i < N; i++){\n            t[i] = this.revBin(i, l, N);\n        }\n        return t;\n    };\n    // Returns binary-reversed representation of `x`\n    FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n        for(var i = 0; i < l; i++){\n            rb |= (x & 1) << l - i - 1;\n            x >>= 1;\n        }\n        return rb;\n    };\n    // Performs \"tweedling\" phase, therefore 'emulating'\n    // behaviour of the recursive algorithm\n    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for(var i = 0; i < N; i++){\n            rtws[i] = rws[rbt[i]];\n            itws[i] = iws[rbt[i]];\n        }\n    };\n    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n        for(var s = 1; s < N; s <<= 1){\n            var l = s << 1;\n            var rtwdf = Math.cos(2 * Math.PI / l);\n            var itwdf = Math.sin(2 * Math.PI / l);\n            for(var p = 0; p < N; p += l){\n                var rtwdf_ = rtwdf;\n                var itwdf_ = itwdf;\n                for(var j = 0; j < s; j++){\n                    var re = rtws[p + j];\n                    var ie = itws[p + j];\n                    var ro = rtws[p + j + s];\n                    var io = itws[p + j + s];\n                    var rx = rtwdf_ * ro - itwdf_ * io;\n                    io = rtwdf_ * io + itwdf_ * ro;\n                    ro = rx;\n                    rtws[p + j] = re + ro;\n                    itws[p + j] = ie + io;\n                    rtws[p + j + s] = re - ro;\n                    itws[p + j + s] = ie - io;\n                    /* jshint maxdepth : false */ if (j !== l) {\n                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                        rtwdf_ = rx;\n                    }\n                }\n            }\n        }\n    };\n    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n        for(N = N / 2 | 0; N; N = N >>> 1){\n            i++;\n        }\n        return 1 << i + 1 + odd;\n    };\n    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n        for(var i = 0; i < N / 2; i++){\n            var t = rws[i];\n            rws[i] = rws[N - i - 1];\n            rws[N - i - 1] = t;\n            t = iws[i];\n            iws[i] = -iws[N - i - 1];\n            iws[N - i - 1] = -t;\n        }\n    };\n    FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n        for(var i = 0; i < N / 2; i++){\n            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n            ws[i] = w & 0x3ffffff;\n            if (w < 0x4000000) {\n                carry = 0;\n            } else {\n                carry = w / 0x4000000 | 0;\n            }\n        }\n        return ws;\n    };\n    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n        for(var i = 0; i < len; i++){\n            carry = carry + (ws[i] | 0);\n            rws[2 * i] = carry & 0x1fff;\n            carry = carry >>> 13;\n            rws[2 * i + 1] = carry & 0x1fff;\n            carry = carry >>> 13;\n        }\n        // Pad with zeroes\n        for(i = 2 * len; i < N; ++i){\n            rws[i] = 0;\n        }\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n    };\n    FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n        for(var i = 0; i < N; i++){\n            ph[i] = 0;\n        }\n        return ph;\n    };\n    FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n        var _ = this.stub(N);\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n        for(var i = 0; i < N; i++){\n            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n            rwst[i] = rx;\n        }\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n    };\n    // Multiply `this` by `num`\n    BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n    };\n    // Multiply employing FFT\n    BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n    };\n    // In-place Multiplication\n    BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n    };\n    BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        // Carry\n        var carry = 0;\n        for(var i = 0; i < this.length; i++){\n            var w = (this.words[i] | 0) * num;\n            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n            carry >>= 26;\n            carry += w / 0x4000000 | 0;\n            // NOTE: lo is 27bit maximum\n            carry += lo >>> 26;\n            this.words[i] = lo & 0x3ffffff;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n    };\n    // `this` * `this`\n    BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n    };\n    // `this` * `this` in-place\n    BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n    };\n    // Math.pow(`this`, `num`)\n    BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1);\n        // Skip leading zeroes\n        var res = this;\n        for(var i = 0; i < w.length; i++, res = res.sqr()){\n            if (w[i] !== 0) break;\n        }\n        if (++i < w.length) {\n            for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){\n                if (w[i] === 0) continue;\n                res = res.mul(q);\n            }\n        }\n        return res;\n    };\n    // Shift-left in-place\n    BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n        if (r !== 0) {\n            var carry = 0;\n            for(i = 0; i < this.length; i++){\n                var newCarry = this.words[i] & carryMask;\n                var c = (this.words[i] | 0) - newCarry << r;\n                this.words[i] = c | carry;\n                carry = newCarry >>> 26 - r;\n            }\n            if (carry) {\n                this.words[i] = carry;\n                this.length++;\n            }\n        }\n        if (s !== 0) {\n            for(i = this.length - 1; i >= 0; i--){\n                this.words[i + s] = this.words[i];\n            }\n            for(i = 0; i < s; i++){\n                this.words[i] = 0;\n            }\n            this.length += s;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n    };\n    // Shift-right in-place\n    // NOTE: `hint` is a lowest bit before trailing zeroes\n    // NOTE: if `extended` is present - it will be filled with destroyed bits\n    BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var h;\n        if (hint) {\n            h = (hint - hint % 26) / 26;\n        } else {\n            h = 0;\n        }\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h);\n        // Extended mode, copy masked part\n        if (maskedWords) {\n            for(var i = 0; i < s; i++){\n                maskedWords.words[i] = this.words[i];\n            }\n            maskedWords.length = s;\n        }\n        if (s === 0) {\n        // No-op, we should not move anything at all\n        } else if (this.length > s) {\n            this.length -= s;\n            for(i = 0; i < this.length; i++){\n                this.words[i] = this.words[i + s];\n            }\n        } else {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        var carry = 0;\n        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){\n            var word = this.words[i] | 0;\n            this.words[i] = carry << 26 - r | word >>> r;\n            carry = word & mask;\n        }\n        // Push carried bits as a mask\n        if (maskedWords && carry !== 0) {\n            maskedWords.words[maskedWords.length++] = carry;\n        }\n        if (this.length === 0) {\n            this.words[0] = 0;\n            this.length = 1;\n        }\n        return this.strip();\n    };\n    BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n    };\n    // Shift-left\n    BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n    };\n    BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n    };\n    // Shift-right\n    BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n    };\n    BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n    };\n    // Test if n bit is set\n    BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === \"number\" && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) return false;\n        // Check bit and return\n        var w = this.words[s];\n        return !!(w & q);\n    };\n    // Return only lowers bits of number (in-place)\n    BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === \"number\" && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, \"imaskn works only with positive numbers\");\n        if (this.length <= s) {\n            return this;\n        }\n        if (r !== 0) {\n            s++;\n        }\n        this.length = Math.min(s, this.length);\n        if (r !== 0) {\n            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n            this.words[this.length - 1] &= mask;\n        }\n        return this.strip();\n    };\n    // Return only lowers bits of number\n    BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n    };\n    // Add plain number `num` to `this`\n    BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num);\n        // Possible sign change\n        if (this.negative !== 0) {\n            if (this.length === 1 && (this.words[0] | 0) < num) {\n                this.words[0] = num - (this.words[0] | 0);\n                this.negative = 0;\n                return this;\n            }\n            this.negative = 0;\n            this.isubn(num);\n            this.negative = 1;\n            return this;\n        }\n        // Add without checks\n        return this._iaddn(num);\n    };\n    BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num;\n        // Carry\n        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){\n            this.words[i] -= 0x4000000;\n            if (i === this.length - 1) {\n                this.words[i + 1] = 1;\n            } else {\n                this.words[i + 1]++;\n            }\n        }\n        this.length = Math.max(this.length, i + 1);\n        return this;\n    };\n    // Subtract plain number `num` from `this`\n    BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === \"number\");\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n        if (this.negative !== 0) {\n            this.negative = 0;\n            this.iaddn(num);\n            this.negative = 1;\n            return this;\n        }\n        this.words[0] -= num;\n        if (this.length === 1 && this.words[0] < 0) {\n            this.words[0] = -this.words[0];\n            this.negative = 1;\n        } else {\n            // Carry\n            for(var i = 0; i < this.length && this.words[i] < 0; i++){\n                this.words[i] += 0x4000000;\n                this.words[i + 1] -= 1;\n            }\n        }\n        return this.strip();\n    };\n    BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n    };\n    BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n    };\n    BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n    };\n    BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n    };\n    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n        this._expand(len);\n        var w;\n        var carry = 0;\n        for(i = 0; i < num.length; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            var right = (num.words[i] | 0) * mul;\n            w -= right & 0x3ffffff;\n            carry = (w >> 26) - (right / 0x4000000 | 0);\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        for(; i < this.length - shift; i++){\n            w = (this.words[i + shift] | 0) + carry;\n            carry = w >> 26;\n            this.words[i + shift] = w & 0x3ffffff;\n        }\n        if (carry === 0) return this.strip();\n        // Subtraction overflow\n        assert(carry === -1);\n        carry = 0;\n        for(i = 0; i < this.length; i++){\n            w = -(this.words[i] | 0) + carry;\n            carry = w >> 26;\n            this.words[i] = w & 0x3ffffff;\n        }\n        this.negative = 1;\n        return this.strip();\n    };\n    BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num;\n        // Normalize\n        var bhi = b.words[b.length - 1] | 0;\n        var bhiBits = this._countBits(bhi);\n        shift = 26 - bhiBits;\n        if (shift !== 0) {\n            b = b.ushln(shift);\n            a.iushln(shift);\n            bhi = b.words[b.length - 1] | 0;\n        }\n        // Initialize quotient\n        var m = a.length - b.length;\n        var q;\n        if (mode !== \"mod\") {\n            q = new BN(null);\n            q.length = m + 1;\n            q.words = new Array(q.length);\n            for(var i = 0; i < q.length; i++){\n                q.words[i] = 0;\n            }\n        }\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n        if (diff.negative === 0) {\n            a = diff;\n            if (q) {\n                q.words[m] = 1;\n            }\n        }\n        for(var j = m - 1; j >= 0; j--){\n            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);\n            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n            // (0x7ffffff)\n            qj = Math.min(qj / bhi | 0, 0x3ffffff);\n            a._ishlnsubmul(b, qj, j);\n            while(a.negative !== 0){\n                qj--;\n                a.negative = 0;\n                a._ishlnsubmul(b, 1, j);\n                if (!a.isZero()) {\n                    a.negative ^= 1;\n                }\n            }\n            if (q) {\n                q.words[j] = qj;\n            }\n        }\n        if (q) {\n            q.strip();\n        }\n        a.strip();\n        // Denormalize\n        if (mode !== \"div\" && shift !== 0) {\n            a.iushrn(shift);\n        }\n        return {\n            div: q || null,\n            mod: a\n        };\n    };\n    // NOTE: 1) `mode` can be set to `mod` to request mod only,\n    //       to `div` to request div only, or be absent to\n    //       request both div & mod\n    //       2) `positive` is true if unsigned mod is requested\n    BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n        if (this.isZero()) {\n            return {\n                div: new BN(0),\n                mod: new BN(0)\n            };\n        }\n        var div, mod, res;\n        if (this.negative !== 0 && num.negative === 0) {\n            res = this.neg().divmod(num, mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.iadd(num);\n                }\n            }\n            return {\n                div: div,\n                mod: mod\n            };\n        }\n        if (this.negative === 0 && num.negative !== 0) {\n            res = this.divmod(num.neg(), mode);\n            if (mode !== \"mod\") {\n                div = res.div.neg();\n            }\n            return {\n                div: div,\n                mod: res.mod\n            };\n        }\n        if ((this.negative & num.negative) !== 0) {\n            res = this.neg().divmod(num.neg(), mode);\n            if (mode !== \"div\") {\n                mod = res.mod.neg();\n                if (positive && mod.negative !== 0) {\n                    mod.isub(num);\n                }\n            }\n            return {\n                div: res.div,\n                mod: mod\n            };\n        }\n        // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n        if (num.length > this.length || this.cmp(num) < 0) {\n            return {\n                div: new BN(0),\n                mod: this\n            };\n        }\n        // Very short reduction\n        if (num.length === 1) {\n            if (mode === \"div\") {\n                return {\n                    div: this.divn(num.words[0]),\n                    mod: null\n                };\n            }\n            if (mode === \"mod\") {\n                return {\n                    div: null,\n                    mod: new BN(this.modn(num.words[0]))\n                };\n            }\n            return {\n                div: this.divn(num.words[0]),\n                mod: new BN(this.modn(num.words[0]))\n            };\n        }\n        return this._wordDiv(num, mode);\n    };\n    // Find `this` / `num`\n    BN.prototype.div = function div(num) {\n        return this.divmod(num, \"div\", false).div;\n    };\n    // Find `this` % `num`\n    BN.prototype.mod = function mod(num) {\n        return this.divmod(num, \"mod\", false).mod;\n    };\n    BN.prototype.umod = function umod(num) {\n        return this.divmod(num, \"mod\", true).mod;\n    };\n    // Find Round(`this` / `num`)\n    BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num);\n        // Fast case - exact division\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half);\n        // Round down\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n        // Round up\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n    };\n    BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n        return acc;\n    };\n    // In-place division by number\n    BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var w = (this.words[i] | 0) + carry * 0x4000000;\n            this.words[i] = w / num | 0;\n            carry = w % num;\n        }\n        return this.strip();\n    };\n    BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n    };\n    BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n        if (x.negative !== 0) {\n            x = x.umod(p);\n        } else {\n            x = x.clone();\n        }\n        // A * x + B * y = x\n        var A = new BN(1);\n        var B = new BN(0);\n        // C * x + D * y = y\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n        while(x.isEven() && y.isEven()){\n            x.iushrn(1);\n            y.iushrn(1);\n            ++g;\n        }\n        var yp = y.clone();\n        var xp = x.clone();\n        while(!x.isZero()){\n            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                x.iushrn(i);\n                while(i-- > 0){\n                    if (A.isOdd() || B.isOdd()) {\n                        A.iadd(yp);\n                        B.isub(xp);\n                    }\n                    A.iushrn(1);\n                    B.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                y.iushrn(j);\n                while(j-- > 0){\n                    if (C.isOdd() || D.isOdd()) {\n                        C.iadd(yp);\n                        D.isub(xp);\n                    }\n                    C.iushrn(1);\n                    D.iushrn(1);\n                }\n            }\n            if (x.cmp(y) >= 0) {\n                x.isub(y);\n                A.isub(C);\n                B.isub(D);\n            } else {\n                y.isub(x);\n                C.isub(A);\n                D.isub(B);\n            }\n        }\n        return {\n            a: C,\n            b: D,\n            gcd: y.iushln(g)\n        };\n    };\n    // This is reduced incarnation of the binary EEA\n    // above, designated to invert members of the\n    // _prime_ fields F(p) at a maximal speed\n    BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n        if (a.negative !== 0) {\n            a = a.umod(p);\n        } else {\n            a = a.clone();\n        }\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){\n            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n            if (i > 0) {\n                a.iushrn(i);\n                while(i-- > 0){\n                    if (x1.isOdd()) {\n                        x1.iadd(delta);\n                    }\n                    x1.iushrn(1);\n                }\n            }\n            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n            if (j > 0) {\n                b.iushrn(j);\n                while(j-- > 0){\n                    if (x2.isOdd()) {\n                        x2.iadd(delta);\n                    }\n                    x2.iushrn(1);\n                }\n            }\n            if (a.cmp(b) >= 0) {\n                a.isub(b);\n                x1.isub(x2);\n            } else {\n                b.isub(a);\n                x2.isub(x1);\n            }\n        }\n        var res;\n        if (a.cmpn(1) === 0) {\n            res = x1;\n        } else {\n            res = x2;\n        }\n        if (res.cmpn(0) < 0) {\n            res.iadd(p);\n        }\n        return res;\n    };\n    BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0;\n        // Remove common factor of two\n        for(var shift = 0; a.isEven() && b.isEven(); shift++){\n            a.iushrn(1);\n            b.iushrn(1);\n        }\n        do {\n            while(a.isEven()){\n                a.iushrn(1);\n            }\n            while(b.isEven()){\n                b.iushrn(1);\n            }\n            var r = a.cmp(b);\n            if (r < 0) {\n                // Swap `a` and `b` to make `a` always bigger than `b`\n                var t = a;\n                a = b;\n                b = t;\n            } else if (r === 0 || b.cmpn(1) === 0) {\n                break;\n            }\n            a.isub(b);\n        }while (true);\n        return b.iushln(shift);\n    };\n    // Invert number in the field F(num)\n    BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n    };\n    BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n    };\n    BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n    };\n    // And first word and num\n    BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n    };\n    // Increment at the bit position in-line\n    BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === \"number\");\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r;\n        // Fast case: bit is much higher than all existing words\n        if (this.length <= s) {\n            this._expand(s + 1);\n            this.words[s] |= q;\n            return this;\n        }\n        // Add bit and propagate, if needed\n        var carry = q;\n        for(var i = s; carry !== 0 && i < this.length; i++){\n            var w = this.words[i] | 0;\n            w += carry;\n            carry = w >>> 26;\n            w &= 0x3ffffff;\n            this.words[i] = w;\n        }\n        if (carry !== 0) {\n            this.words[i] = carry;\n            this.length++;\n        }\n        return this;\n    };\n    BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n    };\n    BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n        if (this.length > 1) {\n            res = 1;\n        } else {\n            if (negative) {\n                num = -num;\n            }\n            assert(num <= 0x3ffffff, \"Number is too big\");\n            var w = this.words[0] | 0;\n            res = w === num ? 0 : w < num ? -1 : 1;\n        }\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Compare two numbers and return:\n    // 1 - if `this` > `num`\n    // 0 - if `this` == `num`\n    // -1 - if `this` < `num`\n    BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n    };\n    // Unsigned comparison\n    BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n        for(var i = this.length - 1; i >= 0; i--){\n            var a = this.words[i] | 0;\n            var b = num.words[i] | 0;\n            if (a === b) continue;\n            if (a < b) {\n                res = -1;\n            } else if (a > b) {\n                res = 1;\n            }\n            break;\n        }\n        return res;\n    };\n    BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n    };\n    BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n    };\n    BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n    };\n    BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n    };\n    BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n    };\n    BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n    };\n    BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n    };\n    BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n    };\n    BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n    };\n    BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n    };\n    //\n    // A reduce context, could be using montgomery or something better, depending\n    // on the `m` itself.\n    //\n    BN.red = function red(num) {\n        return new Red(num);\n    };\n    BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        assert(this.negative === 0, \"red works only with positives\");\n        return ctx.convertTo(this)._forceRed(ctx);\n    };\n    BN.prototype.fromRed = function fromRed() {\n        assert(this.red, \"fromRed works only with numbers in reduction context\");\n        return this.red.convertFrom(this);\n    };\n    BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n    };\n    BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, \"Already a number in reduction context\");\n        return this._forceRed(ctx);\n    };\n    BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, \"redAdd works only with red numbers\");\n        return this.red.add(this, num);\n    };\n    BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, \"redIAdd works only with red numbers\");\n        return this.red.iadd(this, num);\n    };\n    BN.prototype.redSub = function redSub(num) {\n        assert(this.red, \"redSub works only with red numbers\");\n        return this.red.sub(this, num);\n    };\n    BN.prototype.redISub = function redISub(num) {\n        assert(this.red, \"redISub works only with red numbers\");\n        return this.red.isub(this, num);\n    };\n    BN.prototype.redShl = function redShl(num) {\n        assert(this.red, \"redShl works only with red numbers\");\n        return this.red.shl(this, num);\n    };\n    BN.prototype.redMul = function redMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.mul(this, num);\n    };\n    BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, \"redMul works only with red numbers\");\n        this.red._verify2(this, num);\n        return this.red.imul(this, num);\n    };\n    BN.prototype.redSqr = function redSqr() {\n        assert(this.red, \"redSqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqr(this);\n    };\n    BN.prototype.redISqr = function redISqr() {\n        assert(this.red, \"redISqr works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.isqr(this);\n    };\n    // Square root over p\n    BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, \"redSqrt works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.sqrt(this);\n    };\n    BN.prototype.redInvm = function redInvm() {\n        assert(this.red, \"redInvm works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.invm(this);\n    };\n    // Return negative clone of `this` % `red modulo`\n    BN.prototype.redNeg = function redNeg() {\n        assert(this.red, \"redNeg works only with red numbers\");\n        this.red._verify1(this);\n        return this.red.neg(this);\n    };\n    BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, \"redPow(normalNum)\");\n        this.red._verify1(this);\n        return this.red.pow(this, num);\n    };\n    // Prime numbers with efficient reduction\n    var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n    };\n    // Pseudo-Mersenne prime\n    function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n    }\n    MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n    };\n    MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n        do {\n            this.split(r, this.tmp);\n            r = this.imulK(r);\n            r = r.iadd(this.tmp);\n            rlen = r.bitLength();\n        }while (rlen > this.n);\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n        if (cmp === 0) {\n            r.words[0] = 0;\n            r.length = 1;\n        } else if (cmp > 0) {\n            r.isub(this.p);\n        } else {\n            r.strip();\n        }\n        return r;\n    };\n    MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n    };\n    MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n    };\n    function K256() {\n        MPrime.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");\n    }\n    inherits(K256, MPrime);\n    K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n        for(var i = 0; i < outLen; i++){\n            output.words[i] = input.words[i];\n        }\n        output.length = outLen;\n        if (input.length <= 9) {\n            input.words[0] = 0;\n            input.length = 1;\n            return;\n        }\n        // Shift by 9 limbs\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n        for(i = 10; i < input.length; i++){\n            var next = input.words[i] | 0;\n            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n            prev = next;\n        }\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n        if (prev === 0 && input.length > 10) {\n            input.length -= 10;\n        } else {\n            input.length -= 9;\n        }\n    };\n    K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2;\n        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n        var lo = 0;\n        for(var i = 0; i < num.length; i++){\n            var w = num.words[i] | 0;\n            lo += w * 0x3d1;\n            num.words[i] = lo & 0x3ffffff;\n            lo = w * 0x40 + (lo / 0x4000000 | 0);\n        }\n        // Fast length reduction\n        if (num.words[num.length - 1] === 0) {\n            num.length--;\n            if (num.words[num.length - 1] === 0) {\n                num.length--;\n            }\n        }\n        return num;\n    };\n    function P224() {\n        MPrime.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");\n    }\n    inherits(P224, MPrime);\n    function P192() {\n        MPrime.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");\n    }\n    inherits(P192, MPrime);\n    function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");\n    }\n    inherits(P25519, MPrime);\n    P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n        for(var i = 0; i < num.length; i++){\n            var hi = (num.words[i] | 0) * 0x13 + carry;\n            var lo = hi & 0x3ffffff;\n            hi >>>= 26;\n            num.words[i] = lo;\n            carry = hi;\n        }\n        if (carry !== 0) {\n            num.words[num.length++] = carry;\n        }\n        return num;\n    };\n    // Exported mostly for testing purposes, use plain name instead\n    BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n        if (name === \"k256\") {\n            prime = new K256();\n        } else if (name === \"p224\") {\n            prime = new P224();\n        } else if (name === \"p192\") {\n            prime = new P192();\n        } else if (name === \"p25519\") {\n            prime = new P25519();\n        } else {\n            throw new Error(\"Unknown prime \" + name);\n        }\n        primes[name] = prime;\n        return prime;\n    };\n    //\n    // Base reduction engine\n    //\n    function Red(m) {\n        if (typeof m === \"string\") {\n            var prime = BN._prime(m);\n            this.m = prime.p;\n            this.prime = prime;\n        } else {\n            assert(m.gtn(1), \"modulus must be greater than 1\");\n            this.m = m;\n            this.prime = null;\n        }\n    }\n    Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, \"red works only with positives\");\n        assert(a.red, \"red works only with red numbers\");\n    };\n    Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, \"red works only with positives\");\n        assert(a.red && a.red === b.red, \"red works only with red numbers\");\n    };\n    Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n    };\n    Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n            return a.clone();\n        }\n        return this.m.sub(a)._forceRed(this);\n    };\n    Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n        var res = a.add(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n        var res = a.iadd(b);\n        if (res.cmp(this.m) >= 0) {\n            res.isub(this.m);\n        }\n        return res;\n    };\n    Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n        var res = a.sub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n        var res = a.isub(b);\n        if (res.cmpn(0) < 0) {\n            res.iadd(this.m);\n        }\n        return res;\n    };\n    Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n        return this.imod(a.ushln(num));\n    };\n    Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.imul(b));\n    };\n    Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n        return this.imod(a.mul(b));\n    };\n    Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n    };\n    Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n    };\n    Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1);\n        // Fast case\n        if (mod3 === 3) {\n            var pow = this.m.add(new BN(1)).iushrn(2);\n            return this.pow(a, pow);\n        }\n        // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n        var q = this.m.subn(1);\n        var s = 0;\n        while(!q.isZero() && q.andln(1) === 0){\n            s++;\n            q.iushrn(1);\n        }\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg();\n        // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n        while(this.pow(z, lpow).cmp(nOne) !== 0){\n            z.redIAdd(nOne);\n        }\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n        while(t.cmp(one) !== 0){\n            var tmp = t;\n            for(var i = 0; tmp.cmp(one) !== 0; i++){\n                tmp = tmp.redSqr();\n            }\n            assert(i < m);\n            var b = this.pow(c, new BN(1).iushln(m - i - 1));\n            r = r.redMul(b);\n            c = b.redSqr();\n            t = t.redMul(c);\n            m = i;\n        }\n        return r;\n    };\n    Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n        if (inv.negative !== 0) {\n            inv.negative = 0;\n            return this.imod(inv).redNeg();\n        } else {\n            return this.imod(inv);\n        }\n    };\n    Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n        for(var i = 2; i < wnd.length; i++){\n            wnd[i] = this.mul(wnd[i - 1], a);\n        }\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n        if (start === 0) {\n            start = 26;\n        }\n        for(i = num.length - 1; i >= 0; i--){\n            var word = num.words[i];\n            for(var j = start - 1; j >= 0; j--){\n                var bit = word >> j & 1;\n                if (res !== wnd[0]) {\n                    res = this.sqr(res);\n                }\n                if (bit === 0 && current === 0) {\n                    currentLen = 0;\n                    continue;\n                }\n                current <<= 1;\n                current |= bit;\n                currentLen++;\n                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n                res = this.mul(res, wnd[current]);\n                currentLen = 0;\n                current = 0;\n            }\n            start = 26;\n        }\n        return res;\n    };\n    Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n    };\n    Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n    };\n    //\n    // Montgomery method engine\n    //\n    BN.mont = function mont(num) {\n        return new Mont(num);\n    };\n    function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n        if (this.shift % 26 !== 0) {\n            this.shift += 26 - this.shift % 26;\n        }\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n    }\n    inherits(Mont, Red);\n    Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n    };\n    Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n    };\n    Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n            a.words[0] = 0;\n            a.length = 1;\n            return a;\n        }\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n        if (u.cmp(this.m) >= 0) {\n            res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n            res = u.iadd(this.m);\n        }\n        return res._forceRed(this);\n    };\n    Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n    };\n})( false || module, void 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/number-to-bn/node_modules/bn.js/lib/bn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/number-to-bn/src/index.js":
/*!************************************************!*\
  !*** ./node_modules/number-to-bn/src/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/number-to-bn/node_modules/bn.js/lib/bn.js\");\nvar stripHexPrefix = __webpack_require__(/*! strip-hex-prefix */ \"(ssr)/./node_modules/strip-hex-prefix/src/index.js\");\n/**\n * Returns a BN object, converts a number value to a BN\n * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object\n * @return {Object} `output` BN object of the number\n * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number\n */ module.exports = function numberToBN(arg) {\n    if (typeof arg === \"string\" || typeof arg === \"number\") {\n        var multiplier = new BN(1); // eslint-disable-line\n        var formattedString = String(arg).toLowerCase().trim();\n        var isHexPrefixed = formattedString.substr(0, 2) === \"0x\" || formattedString.substr(0, 3) === \"-0x\";\n        var stringArg = stripHexPrefix(formattedString); // eslint-disable-line\n        if (stringArg.substr(0, 1) === \"-\") {\n            stringArg = stripHexPrefix(stringArg.slice(1));\n            multiplier = new BN(-1, 10);\n        }\n        stringArg = stringArg === \"\" ? \"0\" : stringArg;\n        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {\n            return new BN(stringArg, 16).mul(multiplier);\n        }\n        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === \"\") && isHexPrefixed === false) {\n            return new BN(stringArg, 10).mul(multiplier);\n        }\n    } else if (typeof arg === \"object\" && arg.toString && !arg.pop && !arg.push) {\n        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {\n            return new BN(arg.toString(10), 10);\n        }\n    }\n    throw new Error(\"[number-to-bn] while converting number \" + JSON.stringify(arg) + \" to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbnVtYmVyLXRvLWJuL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUU3Qjs7Ozs7Q0FLQyxHQUNERSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsV0FBV0MsR0FBRztJQUN0QyxJQUFJLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFVBQVU7UUFDdEQsSUFBSUMsYUFBYSxJQUFJUCxHQUFHLElBQUksc0JBQXNCO1FBQ2xELElBQUlRLGtCQUFrQkMsT0FBT0gsS0FBS0ksV0FBVyxHQUFHQyxJQUFJO1FBQ3BELElBQUlDLGdCQUFnQkosZ0JBQWdCSyxNQUFNLENBQUMsR0FBRyxPQUFPLFFBQVFMLGdCQUFnQkssTUFBTSxDQUFDLEdBQUcsT0FBTztRQUM5RixJQUFJQyxZQUFZWixlQUFlTSxrQkFBa0Isc0JBQXNCO1FBQ3ZFLElBQUlNLFVBQVVELE1BQU0sQ0FBQyxHQUFHLE9BQU8sS0FBSztZQUNsQ0MsWUFBWVosZUFBZVksVUFBVUMsS0FBSyxDQUFDO1lBQzNDUixhQUFhLElBQUlQLEdBQUcsQ0FBQyxHQUFHO1FBQzFCO1FBQ0FjLFlBQVlBLGNBQWMsS0FBSyxNQUFNQTtRQUVyQyxJQUFJLENBQUVBLFVBQVVFLEtBQUssQ0FBQyxpQkFBaUJGLFVBQVVFLEtBQUssQ0FBQyxxQkFDbERGLFVBQVVFLEtBQUssQ0FBQyxrQkFDZkosa0JBQWtCLFFBQVFFLFVBQVVFLEtBQUssQ0FBQyxtQkFBb0I7WUFDbEUsT0FBTyxJQUFJaEIsR0FBR2MsV0FBVyxJQUFJRyxHQUFHLENBQUNWO1FBQ25DO1FBRUEsSUFBSSxDQUFDTyxVQUFVRSxLQUFLLENBQUMsaUJBQWlCRixjQUFjLEVBQUMsS0FBTUYsa0JBQWtCLE9BQU87WUFDbEYsT0FBTyxJQUFJWixHQUFHYyxXQUFXLElBQUlHLEdBQUcsQ0FBQ1Y7UUFDbkM7SUFDRixPQUFPLElBQUksT0FBT0QsUUFBUSxZQUFZQSxJQUFJWSxRQUFRLElBQUssQ0FBQ1osSUFBSWEsR0FBRyxJQUFJLENBQUNiLElBQUljLElBQUksRUFBRztRQUM3RSxJQUFJZCxJQUFJWSxRQUFRLENBQUMsSUFBSUYsS0FBSyxDQUFDLGlCQUFrQlYsQ0FBQUEsSUFBSVcsR0FBRyxJQUFJWCxJQUFJZSxrQkFBa0IsR0FBRztZQUMvRSxPQUFPLElBQUlyQixHQUFHTSxJQUFJWSxRQUFRLENBQUMsS0FBSztRQUNsQztJQUNGO0lBRUEsTUFBTSxJQUFJSSxNQUFNLDRDQUE0Q0MsS0FBS0MsU0FBUyxDQUFDbEIsT0FBTztBQUNwRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9udW1iZXItdG8tYm4vc3JjL2luZGV4LmpzP2IwNzUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBzdHJpcEhleFByZWZpeCA9IHJlcXVpcmUoJ3N0cmlwLWhleC1wcmVmaXgnKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgQk4gb2JqZWN0LCBjb252ZXJ0cyBhIG51bWJlciB2YWx1ZSB0byBhIEJOXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8T2JqZWN0fSBgYXJnYCBpbnB1dCBhIHN0cmluZyBudW1iZXIsIGhleCBzdHJpbmcgbnVtYmVyLCBudW1iZXIsIEJpZ051bWJlciBvciBCTiBvYmplY3RcbiAqIEByZXR1cm4ge09iamVjdH0gYG91dHB1dGAgQk4gb2JqZWN0IG9mIHRoZSBudW1iZXJcbiAqIEB0aHJvd3MgaWYgdGhlIGFyZ3VtZW50IGlzIG5vdCBhbiBhcnJheSwgb2JqZWN0IHRoYXQgaXNuJ3QgYSBiaWdudW1iZXIsIG5vdCBhIHN0cmluZyBudW1iZXIgb3IgbnVtYmVyXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbnVtYmVyVG9CTihhcmcpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBuZXcgQk4oMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB2YXIgZm9ybWF0dGVkU3RyaW5nID0gU3RyaW5nKGFyZykudG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgdmFyIGlzSGV4UHJlZml4ZWQgPSBmb3JtYXR0ZWRTdHJpbmcuc3Vic3RyKDAsIDIpID09PSAnMHgnIHx8IGZvcm1hdHRlZFN0cmluZy5zdWJzdHIoMCwgMykgPT09ICctMHgnO1xuICAgIHZhciBzdHJpbmdBcmcgPSBzdHJpcEhleFByZWZpeChmb3JtYXR0ZWRTdHJpbmcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHN0cmluZ0FyZy5zdWJzdHIoMCwgMSkgPT09ICctJykge1xuICAgICAgc3RyaW5nQXJnID0gc3RyaXBIZXhQcmVmaXgoc3RyaW5nQXJnLnNsaWNlKDEpKTtcbiAgICAgIG11bHRpcGxpZXIgPSBuZXcgQk4oLTEsIDEwKTtcbiAgICB9XG4gICAgc3RyaW5nQXJnID0gc3RyaW5nQXJnID09PSAnJyA/ICcwJyA6IHN0cmluZ0FyZztcblxuICAgIGlmICgoIXN0cmluZ0FyZy5tYXRjaCgvXi0/WzAtOV0rJC8pICYmIHN0cmluZ0FyZy5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSlcbiAgICAgIHx8IHN0cmluZ0FyZy5tYXRjaCgvXlthLWZBLUZdKyQvKVxuICAgICAgfHwgKGlzSGV4UHJlZml4ZWQgPT09IHRydWUgJiYgc3RyaW5nQXJnLm1hdGNoKC9eWzAtOUEtRmEtZl0rJC8pKSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihzdHJpbmdBcmcsIDE2KS5tdWwobXVsdGlwbGllcik7XG4gICAgfVxuXG4gICAgaWYgKChzdHJpbmdBcmcubWF0Y2goL14tP1swLTldKyQvKSB8fCBzdHJpbmdBcmcgPT09ICcnKSAmJiBpc0hleFByZWZpeGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIG5ldyBCTihzdHJpbmdBcmcsIDEwKS5tdWwobXVsdGlwbGllcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZy50b1N0cmluZyAmJiAoIWFyZy5wb3AgJiYgIWFyZy5wdXNoKSkge1xuICAgIGlmIChhcmcudG9TdHJpbmcoMTApLm1hdGNoKC9eLT9bMC05XSskLykgJiYgKGFyZy5tdWwgfHwgYXJnLmRpdmlkZWRUb0ludGVnZXJCeSkpIHtcbiAgICAgIHJldHVybiBuZXcgQk4oYXJnLnRvU3RyaW5nKDEwKSwgMTApO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignW251bWJlci10by1ibl0gd2hpbGUgY29udmVydGluZyBudW1iZXIgJyArIEpTT04uc3RyaW5naWZ5KGFyZykgKyAnIHRvIEJOLmpzIGluc3RhbmNlLCBlcnJvcjogaW52YWxpZCBudW1iZXIgdmFsdWUuIFZhbHVlIG11c3QgYmUgYW4gaW50ZWdlciwgaGV4IHN0cmluZywgQk4gb3IgQmlnTnVtYmVyIGluc3RhbmNlLiBOb3RlLCBkZWNpbWFscyBhcmUgbm90IHN1cHBvcnRlZC4nKTtcbn1cbiJdLCJuYW1lcyI6WyJCTiIsInJlcXVpcmUiLCJzdHJpcEhleFByZWZpeCIsIm1vZHVsZSIsImV4cG9ydHMiLCJudW1iZXJUb0JOIiwiYXJnIiwibXVsdGlwbGllciIsImZvcm1hdHRlZFN0cmluZyIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwidHJpbSIsImlzSGV4UHJlZml4ZWQiLCJzdWJzdHIiLCJzdHJpbmdBcmciLCJzbGljZSIsIm1hdGNoIiwibXVsIiwidG9TdHJpbmciLCJwb3AiLCJwdXNoIiwiZGl2aWRlZFRvSW50ZWdlckJ5IiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/number-to-bn/src/index.js\n");

/***/ })

};
;