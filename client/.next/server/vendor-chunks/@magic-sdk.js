"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@magic-sdk";
exports.ids = ["vendor-chunks/@magic-sdk"];
exports.modules = {

/***/ "(ssr)/./node_modules/@magic-sdk/commons/dist/es/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@magic-sdk/commons/dist/es/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthChainType: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.EthChainType),\n/* harmony export */   Extension: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.Extension),\n/* harmony export */   ExtensionError: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicExtensionError),\n/* harmony export */   ExtensionWarning: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicExtensionWarning),\n/* harmony export */   MagicIncomingWindowMessage: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.MagicIncomingWindowMessage),\n/* harmony export */   MagicOutgoingWindowMessage: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.MagicOutgoingWindowMessage),\n/* harmony export */   MagicPayloadMethod: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.MagicPayloadMethod),\n/* harmony export */   RPCError: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicRPCError),\n/* harmony export */   RPCErrorCode: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.RPCErrorCode),\n/* harmony export */   SDKError: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicSDKError),\n/* harmony export */   SDKErrorCode: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SDKErrorCode),\n/* harmony export */   SDKWarning: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicSDKWarning),\n/* harmony export */   SDKWarningCode: () => (/* reexport safe */ _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__.SDKWarningCode),\n/* harmony export */   isPromiEvent: () => (/* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isPromiEvent)\n/* harmony export */ });\n/* harmony import */ var _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/provider */ \"(ssr)/./node_modules/@magic-sdk/provider/dist/es/index.mjs\");\n/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @magic-sdk/types */ \"(ssr)/./node_modules/@magic-sdk/types/dist/es/index.mjs\");\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hZ2ljLXNkay9jb21tb25zL2Rpc3QvZXMvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUw7QUFBOEI7QUFBK0gsQ0FDOVUsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BtYWdpYy1zZGsvY29tbW9ucy9kaXN0L2VzL2luZGV4Lm1qcz81ZWY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtFeHRlbnNpb24gYXMgbixNYWdpY1NES0Vycm9yIGFzIG8sTWFnaWNFeHRlbnNpb25FcnJvciBhcyBhLE1hZ2ljRXh0ZW5zaW9uV2FybmluZyBhcyB0LE1hZ2ljUlBDRXJyb3IgYXMgcyxNYWdpY1NES1dhcm5pbmcgYXMgRSxpc1Byb21pRXZlbnQgYXMgZX1mcm9tXCJAbWFnaWMtc2RrL3Byb3ZpZGVyXCI7ZXhwb3J0KmZyb21cIkBtYWdpYy1zZGsvdHlwZXNcIjtleHBvcnR7biBhcyBFeHRlbnNpb24sYSBhcyBFeHRlbnNpb25FcnJvcix0IGFzIEV4dGVuc2lvbldhcm5pbmcscyBhcyBSUENFcnJvcixvIGFzIFNES0Vycm9yLEUgYXMgU0RLV2FybmluZyxlIGFzIGlzUHJvbWlFdmVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwibiIsIk1hZ2ljU0RLRXJyb3IiLCJvIiwiTWFnaWNFeHRlbnNpb25FcnJvciIsImEiLCJNYWdpY0V4dGVuc2lvbldhcm5pbmciLCJ0IiwiTWFnaWNSUENFcnJvciIsInMiLCJNYWdpY1NES1dhcm5pbmciLCJFIiwiaXNQcm9taUV2ZW50IiwiZSIsIkV4dGVuc2lvbkVycm9yIiwiRXh0ZW5zaW9uV2FybmluZyIsIlJQQ0Vycm9yIiwiU0RLRXJyb3IiLCJTREtXYXJuaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@magic-sdk/commons/dist/es/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@magic-sdk/provider/dist/es/index.mjs":
/*!************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/es/index.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Extension: () => (/* binding */ w),\n/* harmony export */   MagicExtensionError: () => (/* binding */ J),\n/* harmony export */   MagicExtensionWarning: () => (/* binding */ X),\n/* harmony export */   MagicRPCError: () => (/* binding */ M),\n/* harmony export */   MagicSDKError: () => (/* binding */ b),\n/* harmony export */   MagicSDKWarning: () => (/* binding */ q),\n/* harmony export */   SDKBase: () => (/* binding */ Te),\n/* harmony export */   STORE_KEY_PRIVATE_KEY: () => (/* binding */ Me),\n/* harmony export */   STORE_KEY_PUBLIC_JWK: () => (/* binding */ de),\n/* harmony export */   TypedEmitter: () => (/* binding */ $e),\n/* harmony export */   ViewController: () => (/* binding */ Se),\n/* harmony export */   clearKeys: () => (/* binding */ me),\n/* harmony export */   createDeprecationWarning: () => (/* binding */ hr),\n/* harmony export */   createDuplicateIframeWarning: () => (/* binding */ mr),\n/* harmony export */   createExtensionNotInitializedError: () => (/* binding */ tt),\n/* harmony export */   createIncompatibleExtensionsError: () => (/* binding */ nt),\n/* harmony export */   createInvalidArgumentError: () => (/* binding */ rt),\n/* harmony export */   createJwt: () => (/* binding */ ft),\n/* harmony export */   createMalformedResponseError: () => (/* binding */ et),\n/* harmony export */   createMissingApiKeyError: () => (/* binding */ Qe),\n/* harmony export */   createModalNotReadyError: () => (/* binding */ dr),\n/* harmony export */   createPromiEvent: () => (/* binding */ ce),\n/* harmony export */   createPromise: () => (/* binding */ Ne),\n/* harmony export */   createReactNativeEndpointConfigurationWarning: () => (/* binding */ ot),\n/* harmony export */   createSDK: () => (/* binding */ In),\n/* harmony export */   createSynchronousWeb3MethodWarning: () => (/* binding */ st),\n/* harmony export */   createTypedEmitter: () => (/* binding */ ae),\n/* harmony export */   createURL: () => (/* binding */ Ae),\n/* harmony export */   decodeJSON: () => (/* binding */ Ve),\n/* harmony export */   encodeJSON: () => (/* binding */ ne),\n/* harmony export */   getPayloadId: () => (/* binding */ xe),\n/* harmony export */   isEmpty: () => (/* binding */ se),\n/* harmony export */   isJsonRpcErrorCode: () => (/* binding */ Ye),\n/* harmony export */   isJsonRpcRequestPayload: () => (/* binding */ sr),\n/* harmony export */   isJsonRpcResponsePayload: () => (/* binding */ ze),\n/* harmony export */   isMagicPayloadMethod: () => (/* binding */ or),\n/* harmony export */   isPromiEvent: () => (/* binding */ dt),\n/* harmony export */   storage: () => (/* binding */ H),\n/* harmony export */   uuid: () => (/* binding */ mt)\n/* harmony export */ });\n/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ \"(ssr)/./node_modules/@magic-sdk/types/dist/es/index.mjs\");\nvar vt = Object.create;\nvar Y = Object.defineProperty, It = Object.defineProperties, Pt = Object.getOwnPropertyDescriptor, xt = Object.getOwnPropertyDescriptors, bt = Object.getOwnPropertyNames, Oe = Object.getOwnPropertySymbols, $t = Object.getPrototypeOf, _e = Object.prototype.hasOwnProperty, Nt = Object.prototype.propertyIsEnumerable;\nvar Ce = (n, e, t)=>e in n ? Y(n, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : n[e] = t, Z = (n, e)=>{\n    for(var t in e || (e = {}))_e.call(e, t) && Ce(n, t, e[t]);\n    if (Oe) for (var t of Oe(e))Nt.call(e, t) && Ce(n, t, e[t]);\n    return n;\n}, De = (n, e)=>It(n, xt(e));\nvar Mt = (n, e)=>()=>(e || n((e = {\n            exports: {}\n        }).exports, e), e.exports), wt = (n, e)=>{\n    for(var t in e)Y(n, t, {\n        get: e[t],\n        enumerable: !0\n    });\n}, At = (n, e, t, r)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let o of bt(e))!_e.call(n, o) && o !== t && Y(n, o, {\n        get: ()=>e[o],\n        enumerable: !(r = Pt(e, o)) || r.enumerable\n    });\n    return n;\n};\nvar Lt = (n, e, t)=>(t = n != null ? vt($t(n)) : {}, At(e || !n || !n.__esModule ? Y(t, \"default\", {\n        value: n,\n        enumerable: !0\n    }) : t, n));\nvar x = (n, e, t)=>new Promise((r, o)=>{\n        var s = (c)=>{\n            try {\n                i(t.next(c));\n            } catch (p) {\n                o(p);\n            }\n        }, a = (c)=>{\n            try {\n                i(t.throw(c));\n            } catch (p) {\n                o(p);\n            }\n        }, i = (c)=>c.done ? r(c.value) : Promise.resolve(c.value).then(s, a);\n        i((t = t.apply(n, e)).next());\n    });\nvar lt = Mt((Tr, be)=>{\n    \"use strict\";\n    var Nn = Object.prototype.hasOwnProperty, v = \"~\";\n    function B() {}\n    Object.create && (B.prototype = Object.create(null), new B().__proto__ || (v = !1));\n    function Mn(n, e, t) {\n        this.fn = n, this.context = e, this.once = t || !1;\n    }\n    function ct(n, e, t, r, o) {\n        if (typeof t != \"function\") throw new TypeError(\"The listener must be a function\");\n        var s = new Mn(t, r || n, o), a = v ? v + e : e;\n        return n._events[a] ? n._events[a].fn ? n._events[a] = [\n            n._events[a],\n            s\n        ] : n._events[a].push(s) : (n._events[a] = s, n._eventsCount++), n;\n    }\n    function ie(n, e) {\n        --n._eventsCount === 0 ? n._events = new B : delete n._events[e];\n    }\n    function R() {\n        this._events = new B, this._eventsCount = 0;\n    }\n    R.prototype.eventNames = function() {\n        var e = [], t, r;\n        if (this._eventsCount === 0) return e;\n        for(r in t = this._events)Nn.call(t, r) && e.push(v ? r.slice(1) : r);\n        return Object.getOwnPropertySymbols ? e.concat(Object.getOwnPropertySymbols(t)) : e;\n    };\n    R.prototype.listeners = function(e) {\n        var t = v ? v + e : e, r = this._events[t];\n        if (!r) return [];\n        if (r.fn) return [\n            r.fn\n        ];\n        for(var o = 0, s = r.length, a = new Array(s); o < s; o++)a[o] = r[o].fn;\n        return a;\n    };\n    R.prototype.listenerCount = function(e) {\n        var t = v ? v + e : e, r = this._events[t];\n        return r ? r.fn ? 1 : r.length : 0;\n    };\n    R.prototype.emit = function(e, t, r, o, s, a) {\n        var i = v ? v + e : e;\n        if (!this._events[i]) return !1;\n        var c = this._events[i], p = arguments.length, l, u;\n        if (c.fn) {\n            switch(c.once && this.removeListener(e, c.fn, void 0, !0), p){\n                case 1:\n                    return c.fn.call(c.context), !0;\n                case 2:\n                    return c.fn.call(c.context, t), !0;\n                case 3:\n                    return c.fn.call(c.context, t, r), !0;\n                case 4:\n                    return c.fn.call(c.context, t, r, o), !0;\n                case 5:\n                    return c.fn.call(c.context, t, r, o, s), !0;\n                case 6:\n                    return c.fn.call(c.context, t, r, o, s, a), !0;\n            }\n            for(u = 1, l = new Array(p - 1); u < p; u++)l[u - 1] = arguments[u];\n            c.fn.apply(c.context, l);\n        } else {\n            var P = c.length, A;\n            for(u = 0; u < P; u++)switch(c[u].once && this.removeListener(e, c[u].fn, void 0, !0), p){\n                case 1:\n                    c[u].fn.call(c[u].context);\n                    break;\n                case 2:\n                    c[u].fn.call(c[u].context, t);\n                    break;\n                case 3:\n                    c[u].fn.call(c[u].context, t, r);\n                    break;\n                case 4:\n                    c[u].fn.call(c[u].context, t, r, o);\n                    break;\n                default:\n                    if (!l) for(A = 1, l = new Array(p - 1); A < p; A++)l[A - 1] = arguments[A];\n                    c[u].fn.apply(c[u].context, l);\n            }\n        }\n        return !0;\n    };\n    R.prototype.on = function(e, t, r) {\n        return ct(this, e, t, r, !1);\n    };\n    R.prototype.once = function(e, t, r) {\n        return ct(this, e, t, r, !0);\n    };\n    R.prototype.removeListener = function(e, t, r, o) {\n        var s = v ? v + e : e;\n        if (!this._events[s]) return this;\n        if (!t) return ie(this, s), this;\n        var a = this._events[s];\n        if (a.fn) a.fn === t && (!o || a.once) && (!r || a.context === r) && ie(this, s);\n        else {\n            for(var i = 0, c = [], p = a.length; i < p; i++)(a[i].fn !== t || o && !a[i].once || r && a[i].context !== r) && c.push(a[i]);\n            c.length ? this._events[s] = c.length === 1 ? c[0] : c : ie(this, s);\n        }\n        return this;\n    };\n    R.prototype.removeAllListeners = function(e) {\n        var t;\n        return e ? (t = v ? v + e : e, this._events[t] && ie(this, t)) : (this._events = new B, this._eventsCount = 0), this;\n    };\n    R.prototype.off = R.prototype.removeListener;\n    R.prototype.addListener = R.prototype.on;\n    R.prefixed = v;\n    R.EventEmitter = R;\n    typeof be < \"u\" && (be.exports = R);\n});\nfunction St(n) {\n    let e = {\n        exports: {}\n    };\n    return n(e, e.exports), e.exports;\n}\nvar Ot = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar Pe = {\n    SEMVER_SPEC_VERSION: \"2.0.0\",\n    MAX_LENGTH: 256,\n    MAX_SAFE_INTEGER: Ot,\n    MAX_SAFE_COMPONENT_LENGTH: 16\n}, Ct = typeof process == \"object\" && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG) ? (...n)=>console.error(\"SEMVER\", ...n) : ()=>{}, m = Ct, W = St(function(n, e) {\n    let { MAX_SAFE_COMPONENT_LENGTH: t } = Pe, r = (e = n.exports = {}).re = [], o = e.src = [], s = e.t = {}, a = 0, i = (c, p, l)=>{\n        let u = a++;\n        m(u, p), s[c] = u, o[u] = p, r[u] = new RegExp(p, l ? \"g\" : void 0);\n    };\n    i(\"NUMERICIDENTIFIER\", \"0|[1-9]\\\\d*\"), i(\"NUMERICIDENTIFIERLOOSE\", \"[0-9]+\"), i(\"NONNUMERICIDENTIFIER\", \"\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\"), i(\"MAINVERSION\", `(${o[s.NUMERICIDENTIFIER]})\\\\.(${o[s.NUMERICIDENTIFIER]})\\\\.(${o[s.NUMERICIDENTIFIER]})`), i(\"MAINVERSIONLOOSE\", `(${o[s.NUMERICIDENTIFIERLOOSE]})\\\\.(${o[s.NUMERICIDENTIFIERLOOSE]})\\\\.(${o[s.NUMERICIDENTIFIERLOOSE]})`), i(\"PRERELEASEIDENTIFIER\", `(?:${o[s.NUMERICIDENTIFIER]}|${o[s.NONNUMERICIDENTIFIER]})`), i(\"PRERELEASEIDENTIFIERLOOSE\", `(?:${o[s.NUMERICIDENTIFIERLOOSE]}|${o[s.NONNUMERICIDENTIFIER]})`), i(\"PRERELEASE\", `(?:-(${o[s.PRERELEASEIDENTIFIER]}(?:\\\\.${o[s.PRERELEASEIDENTIFIER]})*))`), i(\"PRERELEASELOOSE\", `(?:-?(${o[s.PRERELEASEIDENTIFIERLOOSE]}(?:\\\\.${o[s.PRERELEASEIDENTIFIERLOOSE]})*))`), i(\"BUILDIDENTIFIER\", \"[0-9A-Za-z-]+\"), i(\"BUILD\", `(?:\\\\+(${o[s.BUILDIDENTIFIER]}(?:\\\\.${o[s.BUILDIDENTIFIER]})*))`), i(\"FULLPLAIN\", `v?${o[s.MAINVERSION]}${o[s.PRERELEASE]}?${o[s.BUILD]}?`), i(\"FULL\", `^${o[s.FULLPLAIN]}$`), i(\"LOOSEPLAIN\", `[v=\\\\s]*${o[s.MAINVERSIONLOOSE]}${o[s.PRERELEASELOOSE]}?${o[s.BUILD]}?`), i(\"LOOSE\", `^${o[s.LOOSEPLAIN]}$`), i(\"GTLT\", \"((?:<|>)?=?)\"), i(\"XRANGEIDENTIFIERLOOSE\", `${o[s.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`), i(\"XRANGEIDENTIFIER\", `${o[s.NUMERICIDENTIFIER]}|x|X|\\\\*`), i(\"XRANGEPLAIN\", `[v=\\\\s]*(${o[s.XRANGEIDENTIFIER]})(?:\\\\.(${o[s.XRANGEIDENTIFIER]})(?:\\\\.(${o[s.XRANGEIDENTIFIER]})(?:${o[s.PRERELEASE]})?${o[s.BUILD]}?)?)?`), i(\"XRANGEPLAINLOOSE\", `[v=\\\\s]*(${o[s.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${o[s.XRANGEIDENTIFIERLOOSE]})(?:\\\\.(${o[s.XRANGEIDENTIFIERLOOSE]})(?:${o[s.PRERELEASELOOSE]})?${o[s.BUILD]}?)?)?`), i(\"XRANGE\", `^${o[s.GTLT]}\\\\s*${o[s.XRANGEPLAIN]}$`), i(\"XRANGELOOSE\", `^${o[s.GTLT]}\\\\s*${o[s.XRANGEPLAINLOOSE]}$`), i(\"COERCE\", `(^|[^\\\\d])(\\\\d{1,${t}})(?:\\\\.(\\\\d{1,${t}}))?(?:\\\\.(\\\\d{1,${t}}))?(?:$|[^\\\\d])`), i(\"COERCERTL\", o[s.COERCE], !0), i(\"LONETILDE\", \"(?:~>?)\"), i(\"TILDETRIM\", `(\\\\s*)${o[s.LONETILDE]}\\\\s+`, !0), e.tildeTrimReplace = \"$1~\", i(\"TILDE\", `^${o[s.LONETILDE]}${o[s.XRANGEPLAIN]}$`), i(\"TILDELOOSE\", `^${o[s.LONETILDE]}${o[s.XRANGEPLAINLOOSE]}$`), i(\"LONECARET\", \"(?:\\\\^)\"), i(\"CARETTRIM\", `(\\\\s*)${o[s.LONECARET]}\\\\s+`, !0), e.caretTrimReplace = \"$1^\", i(\"CARET\", `^${o[s.LONECARET]}${o[s.XRANGEPLAIN]}$`), i(\"CARETLOOSE\", `^${o[s.LONECARET]}${o[s.XRANGEPLAINLOOSE]}$`), i(\"COMPARATORLOOSE\", `^${o[s.GTLT]}\\\\s*(${o[s.LOOSEPLAIN]})$|^$`), i(\"COMPARATOR\", `^${o[s.GTLT]}\\\\s*(${o[s.FULLPLAIN]})$|^$`), i(\"COMPARATORTRIM\", `(\\\\s*)${o[s.GTLT]}\\\\s*(${o[s.LOOSEPLAIN]}|${o[s.XRANGEPLAIN]})`, !0), e.comparatorTrimReplace = \"$1$2$3\", i(\"HYPHENRANGE\", `^\\\\s*(${o[s.XRANGEPLAIN]})\\\\s+-\\\\s+(${o[s.XRANGEPLAIN]})\\\\s*$`), i(\"HYPHENRANGELOOSE\", `^\\\\s*(${o[s.XRANGEPLAINLOOSE]})\\\\s+-\\\\s+(${o[s.XRANGEPLAINLOOSE]})\\\\s*$`), i(\"STAR\", \"(<|>)?=?\\\\s*\\\\*\"), i(\"GTE0\", \"^\\\\s*>=\\\\s*0.0.0\\\\s*$\"), i(\"GTE0PRE\", \"^\\\\s*>=\\\\s*0.0.0-0\\\\s*$\");\n}), ke = /^[0-9]+$/, Xe = (n, e)=>{\n    let t = ke.test(n), r = ke.test(e);\n    return t && r && (n = +n, e = +e), n === e ? 0 : t && !r ? -1 : r && !t ? 1 : n < e ? -1 : 1;\n}, _t = (n, e)=>Xe(e, n), Dt = {\n    compareIdentifiers: Xe,\n    rcompareIdentifiers: _t\n}, { MAX_LENGTH: qe, MAX_SAFE_INTEGER: Q } = Pe, { re: Je, t: Ue } = W, { compareIdentifiers: K } = Dt, E = class {\n    constructor(e, t){\n        if (t && typeof t == \"object\" || (t = {\n            loose: !!t,\n            includePrerelease: !1\n        }), e instanceof E) {\n            if (e.loose === !!t.loose && e.includePrerelease === !!t.includePrerelease) return e;\n            e = e.version;\n        } else if (typeof e != \"string\") throw new TypeError(`Invalid Version: ${e}`);\n        if (e.length > qe) throw new TypeError(`version is longer than ${qe} characters`);\n        m(\"SemVer\", e, t), this.options = t, this.loose = !!t.loose, this.includePrerelease = !!t.includePrerelease;\n        let r = e.trim().match(t.loose ? Je[Ue.LOOSE] : Je[Ue.FULL]);\n        if (!r) throw new TypeError(`Invalid Version: ${e}`);\n        if (this.raw = e, this.major = +r[1], this.minor = +r[2], this.patch = +r[3], this.major > Q || this.major < 0) throw new TypeError(\"Invalid major version\");\n        if (this.minor > Q || this.minor < 0) throw new TypeError(\"Invalid minor version\");\n        if (this.patch > Q || this.patch < 0) throw new TypeError(\"Invalid patch version\");\n        r[4] ? this.prerelease = r[4].split(\".\").map((o)=>{\n            if (/^[0-9]+$/.test(o)) {\n                let s = +o;\n                if (s >= 0 && s < Q) return s;\n            }\n            return o;\n        }) : this.prerelease = [], this.build = r[5] ? r[5].split(\".\") : [], this.format();\n    }\n    format() {\n        return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(\".\")}`), this.version;\n    }\n    toString() {\n        return this.version;\n    }\n    compare(e) {\n        if (m(\"SemVer.compare\", this.version, this.options, e), !(e instanceof E)) {\n            if (typeof e == \"string\" && e === this.version) return 0;\n            e = new E(e, this.options);\n        }\n        return e.version === this.version ? 0 : this.compareMain(e) || this.comparePre(e);\n    }\n    compareMain(e) {\n        return e instanceof E || (e = new E(e, this.options)), K(this.major, e.major) || K(this.minor, e.minor) || K(this.patch, e.patch);\n    }\n    comparePre(e) {\n        if (e instanceof E || (e = new E(e, this.options)), this.prerelease.length && !e.prerelease.length) return -1;\n        if (!this.prerelease.length && e.prerelease.length) return 1;\n        if (!this.prerelease.length && !e.prerelease.length) return 0;\n        let t = 0;\n        do {\n            let r = this.prerelease[t], o = e.prerelease[t];\n            if (m(\"prerelease compare\", t, r, o), r === void 0 && o === void 0) return 0;\n            if (o === void 0) return 1;\n            if (r === void 0) return -1;\n            if (r !== o) return K(r, o);\n        }while (++t);\n    }\n    compareBuild(e) {\n        e instanceof E || (e = new E(e, this.options));\n        let t = 0;\n        do {\n            let r = this.build[t], o = e.build[t];\n            if (m(\"prerelease compare\", t, r, o), r === void 0 && o === void 0) return 0;\n            if (o === void 0) return 1;\n            if (r === void 0) return -1;\n            if (r !== o) return K(r, o);\n        }while (++t);\n    }\n    inc(e, t) {\n        switch(e){\n            case \"premajor\":\n                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc(\"pre\", t);\n                break;\n            case \"preminor\":\n                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc(\"pre\", t);\n                break;\n            case \"prepatch\":\n                this.prerelease.length = 0, this.inc(\"patch\", t), this.inc(\"pre\", t);\n                break;\n            case \"prerelease\":\n                this.prerelease.length === 0 && this.inc(\"patch\", t), this.inc(\"pre\", t);\n                break;\n            case \"major\":\n                this.minor === 0 && this.patch === 0 && this.prerelease.length !== 0 || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];\n                break;\n            case \"minor\":\n                this.patch === 0 && this.prerelease.length !== 0 || this.minor++, this.patch = 0, this.prerelease = [];\n                break;\n            case \"patch\":\n                this.prerelease.length === 0 && this.patch++, this.prerelease = [];\n                break;\n            case \"pre\":\n                if (this.prerelease.length === 0) this.prerelease = [\n                    0\n                ];\n                else {\n                    let r = this.prerelease.length;\n                    for(; --r >= 0;)typeof this.prerelease[r] == \"number\" && (this.prerelease[r]++, r = -2);\n                    r === -1 && this.prerelease.push(0);\n                }\n                t && (this.prerelease[0] === t ? isNaN(this.prerelease[1]) && (this.prerelease = [\n                    t,\n                    0\n                ]) : this.prerelease = [\n                    t,\n                    0\n                ]);\n                break;\n            default:\n                throw new Error(`invalid increment argument: ${e}`);\n        }\n        return this.format(), this.raw = this.version, this;\n    }\n}, kt = (n, e, t)=>new E(n, t).compare(new E(e, t)), k = kt, qt = (n, e, t)=>k(n, e, t) === 0, Jt = qt, Ut = (n, e, t)=>k(n, e, t) !== 0, Gt = Ut, Ft = (n, e, t)=>k(n, e, t) > 0, Kt = Ft, jt = (n, e, t)=>k(n, e, t) >= 0, Wt = jt, Xt = (n, e, t)=>k(n, e, t) < 0, Bt = Xt, Ht = (n, e, t)=>k(n, e, t) <= 0, Vt = Ht, zt = (n, e, t, r)=>{\n    switch(e){\n        case \"===\":\n            return typeof n == \"object\" && (n = n.version), typeof t == \"object\" && (t = t.version), n === t;\n        case \"!==\":\n            return typeof n == \"object\" && (n = n.version), typeof t == \"object\" && (t = t.version), n !== t;\n        case \"\":\n        case \"=\":\n        case \"==\":\n            return Jt(n, t, r);\n        case \"!=\":\n            return Gt(n, t, r);\n        case \">\":\n            return Kt(n, t, r);\n        case \">=\":\n            return Wt(n, t, r);\n        case \"<\":\n            return Bt(n, t, r);\n        case \"<=\":\n            return Vt(n, t, r);\n        default:\n            throw new TypeError(`Invalid operator: ${e}`);\n    }\n}, Ie = zt, j = Symbol(\"SemVer ANY\"), L = class {\n    static get ANY() {\n        return j;\n    }\n    constructor(e, t){\n        if (t && typeof t == \"object\" || (t = {\n            loose: !!t,\n            includePrerelease: !1\n        }), e instanceof L) {\n            if (e.loose === !!t.loose) return e;\n            e = e.value;\n        }\n        m(\"comparator\", e, t), this.options = t, this.loose = !!t.loose, this.parse(e), this.semver === j ? this.value = \"\" : this.value = this.operator + this.semver.version, m(\"comp\", this);\n    }\n    parse(e) {\n        let t = this.options.loose ? Ge[Fe.COMPARATORLOOSE] : Ge[Fe.COMPARATOR], r = e.match(t);\n        if (!r) throw new TypeError(`Invalid comparator: ${e}`);\n        this.operator = r[1] !== void 0 ? r[1] : \"\", this.operator === \"=\" && (this.operator = \"\"), r[2] ? this.semver = new E(r[2], this.options.loose) : this.semver = j;\n    }\n    toString() {\n        return this.value;\n    }\n    test(e) {\n        if (m(\"Comparator.test\", e, this.options.loose), this.semver === j || e === j) return !0;\n        if (typeof e == \"string\") try {\n            e = new E(e, this.options);\n        } catch (t) {\n            return !1;\n        }\n        return Ie(e, this.operator, this.semver, this.options);\n    }\n    intersects(e, t) {\n        if (!(e instanceof L)) throw new TypeError(\"a Comparator is required\");\n        if (t && typeof t == \"object\" || (t = {\n            loose: !!t,\n            includePrerelease: !1\n        }), this.operator === \"\") return this.value === \"\" || new $(e.value, t).test(this.value);\n        if (e.operator === \"\") return e.value === \"\" || new $(this.value, t).test(e.semver);\n        let r = !(this.operator !== \">=\" && this.operator !== \">\" || e.operator !== \">=\" && e.operator !== \">\"), o = !(this.operator !== \"<=\" && this.operator !== \"<\" || e.operator !== \"<=\" && e.operator !== \"<\"), s = this.semver.version === e.semver.version, a = !(this.operator !== \">=\" && this.operator !== \"<=\" || e.operator !== \">=\" && e.operator !== \"<=\"), i = Ie(this.semver, \"<\", e.semver, t) && (this.operator === \">=\" || this.operator === \">\") && (e.operator === \"<=\" || e.operator === \"<\"), c = Ie(this.semver, \">\", e.semver, t) && (this.operator === \"<=\" || this.operator === \"<\") && (e.operator === \">=\" || e.operator === \">\");\n        return r || o || s && a || i || c;\n    }\n}, { re: Ge, t: Fe } = W, $ = class {\n    constructor(e, t){\n        if (t && typeof t == \"object\" || (t = {\n            loose: !!t,\n            includePrerelease: !1\n        }), e instanceof $) return e.loose === !!t.loose && e.includePrerelease === !!t.includePrerelease ? e : new $(e.raw, t);\n        if (e instanceof L) return this.raw = e.value, this.set = [\n            [\n                e\n            ]\n        ], this.format(), this;\n        if (this.options = t, this.loose = !!t.loose, this.includePrerelease = !!t.includePrerelease, this.raw = e, this.set = e.split(/\\s*\\|\\|\\s*/).map((r)=>this.parseRange(r.trim())).filter((r)=>r.length), !this.set.length) throw new TypeError(`Invalid SemVer Range: ${e}`);\n        this.format();\n    }\n    format() {\n        return this.range = this.set.map((e)=>e.join(\" \").trim()).join(\"||\").trim(), this.range;\n    }\n    toString() {\n        return this.range;\n    }\n    parseRange(e) {\n        let { loose: t } = this.options;\n        e = e.trim();\n        let r = t ? g[y.HYPHENRANGELOOSE] : g[y.HYPHENRANGE];\n        e = e.replace(r, pn(this.options.includePrerelease)), m(\"hyphen replace\", e), e = e.replace(g[y.COMPARATORTRIM], Yt), m(\"comparator trim\", e, g[y.COMPARATORTRIM]), e = (e = (e = e.replace(g[y.TILDETRIM], Zt)).replace(g[y.CARETTRIM], Qt)).split(/\\s+/).join(\" \");\n        let o = t ? g[y.COMPARATORLOOSE] : g[y.COMPARATOR];\n        return e.split(\" \").map((s)=>en(s, this.options)).join(\" \").split(/\\s+/).map((s)=>ln(s, this.options)).filter(this.options.loose ? (s)=>!!s.match(o) : ()=>!0).map((s)=>new L(s, this.options));\n    }\n    intersects(e, t) {\n        if (!(e instanceof $)) throw new TypeError(\"a Range is required\");\n        return this.set.some((r)=>Ke(r, t) && e.set.some((o)=>Ke(o, t) && r.every((s)=>o.every((a)=>s.intersects(a, t)))));\n    }\n    test(e) {\n        if (!e) return !1;\n        if (typeof e == \"string\") try {\n            e = new E(e, this.options);\n        } catch (t) {\n            return !1;\n        }\n        for(let t = 0; t < this.set.length; t++)if (un(this.set[t], e, this.options)) return !0;\n        return !1;\n    }\n}, { re: g, t: y, comparatorTrimReplace: Yt, tildeTrimReplace: Zt, caretTrimReplace: Qt } = W, Ke = (n, e)=>{\n    let t = !0, r = n.slice(), o = r.pop();\n    for(; t && r.length;)t = r.every((s)=>o.intersects(s, e)), o = r.pop();\n    return t;\n}, en = (n, e)=>(m(\"comp\", n, e), n = rn(n, e), m(\"caret\", n), n = tn(n, e), m(\"tildes\", n), n = on(n, e), m(\"xrange\", n), n = cn(n, e), m(\"stars\", n), n), T = (n)=>!n || n.toLowerCase() === \"x\" || n === \"*\", tn = (n, e)=>n.trim().split(/\\s+/).map((t)=>nn(t, e)).join(\" \"), nn = (n, e)=>{\n    let t = e.loose ? g[y.TILDELOOSE] : g[y.TILDE];\n    return n.replace(t, (r, o, s, a, i)=>{\n        let c;\n        return m(\"tilde\", n, r, o, s, a, i), T(o) ? c = \"\" : T(s) ? c = `>=${o}.0.0 <${+o + 1}.0.0-0` : T(a) ? c = `>=${o}.${s}.0 <${o}.${+s + 1}.0-0` : i ? (m(\"replaceTilde pr\", i), c = `>=${o}.${s}.${a}-${i} <${o}.${+s + 1}.0-0`) : c = `>=${o}.${s}.${a} <${o}.${+s + 1}.0-0`, m(\"tilde return\", c), c;\n    });\n}, rn = (n, e)=>n.trim().split(/\\s+/).map((t)=>sn(t, e)).join(\" \"), sn = (n, e)=>{\n    m(\"caret\", n, e);\n    let t = e.loose ? g[y.CARETLOOSE] : g[y.CARET], r = e.includePrerelease ? \"-0\" : \"\";\n    return n.replace(t, (o, s, a, i, c)=>{\n        let p;\n        return m(\"caret\", n, o, s, a, i, c), T(s) ? p = \"\" : T(a) ? p = `>=${s}.0.0${r} <${+s + 1}.0.0-0` : T(i) ? p = s === \"0\" ? `>=${s}.${a}.0${r} <${s}.${+a + 1}.0-0` : `>=${s}.${a}.0${r} <${+s + 1}.0.0-0` : c ? (m(\"replaceCaret pr\", c), p = s === \"0\" ? a === \"0\" ? `>=${s}.${a}.${i}-${c} <${s}.${a}.${+i + 1}-0` : `>=${s}.${a}.${i}-${c} <${s}.${+a + 1}.0-0` : `>=${s}.${a}.${i}-${c} <${+s + 1}.0.0-0`) : (m(\"no pr\"), p = s === \"0\" ? a === \"0\" ? `>=${s}.${a}.${i}${r} <${s}.${a}.${+i + 1}-0` : `>=${s}.${a}.${i}${r} <${s}.${+a + 1}.0-0` : `>=${s}.${a}.${i} <${+s + 1}.0.0-0`), m(\"caret return\", p), p;\n    });\n}, on = (n, e)=>(m(\"replaceXRanges\", n, e), n.split(/\\s+/).map((t)=>an(t, e)).join(\" \")), an = (n, e)=>{\n    n = n.trim();\n    let t = e.loose ? g[y.XRANGELOOSE] : g[y.XRANGE];\n    return n.replace(t, (r, o, s, a, i, c)=>{\n        m(\"xRange\", n, r, o, s, a, i, c);\n        let p = T(s), l = p || T(a), u = l || T(i), P = u;\n        return o === \"=\" && P && (o = \"\"), c = e.includePrerelease ? \"-0\" : \"\", p ? r = o === \">\" || o === \"<\" ? \"<0.0.0-0\" : \"*\" : o && P ? (l && (a = 0), i = 0, o === \">\" ? (o = \">=\", l ? (s = +s + 1, a = 0, i = 0) : (a = +a + 1, i = 0)) : o === \"<=\" && (o = \"<\", l ? s = +s + 1 : a = +a + 1), o === \"<\" && (c = \"-0\"), r = `${o + s}.${a}.${i}${c}`) : l ? r = `>=${s}.0.0${c} <${+s + 1}.0.0-0` : u && (r = `>=${s}.${a}.0${c} <${s}.${+a + 1}.0-0`), m(\"xRange return\", r), r;\n    });\n}, cn = (n, e)=>(m(\"replaceStars\", n, e), n.trim().replace(g[y.STAR], \"\")), ln = (n, e)=>(m(\"replaceGTE0\", n, e), n.trim().replace(g[e.includePrerelease ? y.GTE0PRE : y.GTE0], \"\")), pn = (n)=>(e, t, r, o, s, a, i, c, p, l, u, P, A)=>`${t = T(r) ? \"\" : T(o) ? `>=${r}.0.0${n ? \"-0\" : \"\"}` : T(s) ? `>=${r}.${o}.0${n ? \"-0\" : \"\"}` : a ? `>=${t}` : `>=${t}${n ? \"-0\" : \"\"}`} ${c = T(p) ? \"\" : T(l) ? `<${+p + 1}.0.0-0` : T(u) ? `<${p}.${+l + 1}.0-0` : P ? `<=${p}.${l}.${u}-${P}` : n ? `<${p}.${l}.${+u + 1}-0` : `<=${c}`}`.trim(), un = (n, e, t)=>{\n    for(let r = 0; r < n.length; r++)if (!n[r].test(e)) return !1;\n    if (e.prerelease.length && !t.includePrerelease) {\n        for(let r = 0; r < n.length; r++)if (m(n[r].semver), n[r].semver !== L.ANY && n[r].semver.prerelease.length > 0) {\n            let o = n[r].semver;\n            if (o.major === e.major && o.minor === e.minor && o.patch === e.patch) return !0;\n        }\n        return !1;\n    }\n    return !0;\n}, Be = (n, e, t)=>{\n    try {\n        e = new $(e, t);\n    } catch (r) {\n        return !1;\n    }\n    return e.test(n);\n};\nvar { MAX_LENGTH: dn } = Pe, { re: je, t: We } = W, mn = (n, e)=>{\n    if (e && typeof e == \"object\" || (e = {\n        loose: !!e,\n        includePrerelease: !1\n    }), n instanceof E) return n;\n    if (typeof n != \"string\" || n.length > dn || !(e.loose ? je[We.LOOSE] : je[We.FULL]).test(n)) return null;\n    try {\n        return new E(n, e);\n    } catch (t) {\n        return null;\n    }\n}, hn = mn, { re: ee, t: te } = W, He = (n, e)=>{\n    if (n instanceof E) return n;\n    if (typeof n == \"number\" && (n = String(n)), typeof n != \"string\") return null;\n    let t = null;\n    if ((e = e || {}).rtl) {\n        let r;\n        for(; (r = ee[te.COERCERTL].exec(n)) && (!t || t.index + t[0].length !== n.length);)t && r.index + r[0].length === t.index + t[0].length || (t = r), ee[te.COERCERTL].lastIndex = r.index + r[1].length + r[2].length;\n        ee[te.COERCERTL].lastIndex = -1;\n    } else t = n.match(ee[te.COERCE]);\n    return t === null ? null : hn(`${t[2]}.${t[3] || \"0\"}.${t[4] || \"0\"}`, e);\n};\nfunction En(n) {\n    return String.fromCharCode(parseInt(n.slice(1), 16));\n}\nfunction fn(n) {\n    return `%${`00${n.charCodeAt(0).toString(16)}`.slice(-2)}`;\n}\nfunction yn(n) {\n    return btoa(encodeURIComponent(n).replace(/%[0-9A-F]{2}/g, En));\n}\nfunction gn(n) {\n    return decodeURIComponent(Array.from(atob(n), fn).join(\"\"));\n}\nfunction ne(n) {\n    return yn(JSON.stringify(n));\n}\nfunction Ve(n) {\n    return JSON.parse(gn(n));\n}\n\n\nfunction N(n) {\n    return typeof n == \"undefined\";\n}\nfunction vn(n) {\n    return n === null;\n}\nfunction re(n) {\n    return vn(n) || N(n);\n}\nfunction sr(n) {\n    return re(n) ? !1 : !N(n.jsonrpc) && !N(n.id) && !N(n.method) && !N(n.params);\n}\nfunction ze(n) {\n    return re(n) ? !1 : !N(n.jsonrpc) && !N(n.id) && (!N(n.result) || !N(n.error));\n}\nfunction or(n) {\n    return re(n) ? !1 : typeof n == \"string\" && Object.values(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod).includes(n);\n}\nfunction Ye(n) {\n    return re(n) ? !1 : typeof n == \"number\" && Object.values(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.RPCErrorCode).includes(n);\n}\nfunction se(n) {\n    if (!n) return !0;\n    for(let e in n)if (Object.hasOwnProperty.call(n, e)) return !1;\n    return !0;\n}\nvar h = {};\nfunction In(n, e) {\n    return Object.assign(h, e), n;\n}\nvar Ze = {\n    \"magic-sdk\": \"magic-sdk\",\n    \"@magic-sdk/react-native\": \"magic-sdk-rn\",\n    \"@magic-sdk/react-native-bare\": \"magic-sdk-rn-bare\",\n    \"@magic-sdk/react-native-expo\": \"magic-sdk-rn-expo\"\n};\nvar b = class extends Error {\n    constructor(t, r){\n        super(`Magic SDK Error: [${t}] ${r}`);\n        this.code = t;\n        this.rawMessage = r;\n        this.__proto__ = Error;\n        Object.setPrototypeOf(this, b.prototype);\n    }\n}, M = class extends Error {\n    constructor(t){\n        super();\n        this.__proto__ = Error;\n        let r = Number(t == null ? void 0 : t.code);\n        this.rawMessage = (t == null ? void 0 : t.message) || \"Internal error\", this.code = Ye(r) ? r : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.RPCErrorCode.InternalError, this.message = `Magic RPC Error: [${this.code}] ${this.rawMessage}`, this.data = (t == null ? void 0 : t.data) || void 0, Object.setPrototypeOf(this, M.prototype);\n    }\n}, q = class {\n    constructor(e, t){\n        this.code = e;\n        this.rawMessage = t;\n        this.message = `Magic SDK Warning: [${e}] ${t}`;\n    }\n    log() {\n        console.warn(this.message);\n    }\n}, J = class extends Error {\n    constructor(t, r, o, s){\n        super(`Magic Extension Error (${t.name}): [${r}] ${o}`);\n        this.code = r;\n        this.rawMessage = o;\n        this.data = s;\n        this.__proto__ = Error;\n        Object.setPrototypeOf(this, J.prototype);\n    }\n}, X = class {\n    constructor(e, t, r){\n        this.code = t;\n        this.rawMessage = r;\n        this.message = `Magic Extension Warning (${e.name}): [${t}] ${r}`;\n    }\n    log() {\n        console.warn(this.message);\n    }\n};\nfunction Qe() {\n    return new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.MissingApiKey, \"Please provide an API key that you acquired from the Magic developer dashboard.\");\n}\nfunction dr() {\n    return new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.ModalNotReady, \"Modal is not ready.\");\n}\nfunction et() {\n    return new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.MalformedResponse, \"Response from the Magic iframe is malformed.\");\n}\nfunction tt(n) {\n    return new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.ExtensionNotInitialized, `Extensions must be initialized with a Magic SDK instance before \\`Extension.${n}\\` can be accessed. Do not invoke \\`Extension.${n}\\` inside an extension constructor.`);\n}\nfunction nt(n) {\n    let e = `Some extensions are incompatible with \\`${h.sdkName}@${h.version}\\`:`;\n    return n.filter((t)=>typeof t.compat != \"undefined\" && t.compat !== null).forEach((t)=>{\n        let r = t.compat[h.sdkName];\n        typeof r == \"string\" ? e += `\n  - Extension \\`${t.name}\\` supports version(s) \\`${r}\\`` : r || (e += `\n  - Extension \\`${t.name}\\` does not support ${h.platform} environments.`);\n    }), new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.IncompatibleExtensions, e);\n}\nfunction rt(n) {\n    let e = (t)=>{\n        let r = t + 1, o = r % 10, s = r % 100;\n        return o === 1 && s !== 11 ? `${r}st` : o === 2 && s !== 12 ? `${r}nd` : o === 3 && s !== 13 ? `${r}rd` : `${r}th`;\n    };\n    return new b(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.InvalidArgument, `Invalid ${e(n.argument)} argument given to \\`${n.procedure}\\`.\n  Expected: \\`${n.expected}\\`\n  Received: \\`${n.received}\\``);\n}\nfunction mr() {\n    return new q(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.DuplicateIframe, \"Duplicate iframes found.\");\n}\nfunction st() {\n    return new q(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.SyncWeb3Method, \"Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.\");\n}\nfunction ot() {\n    return new q(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.ReactNativeEndpointConfiguration, `CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The \\`endpoint\\` parameter SHOULD NOT be provided. The Magic \\`<iframe>\\` is automatically wrapped by a WebView pointed at \\`${h.defaultEndpoint}\\`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.`);\n}\nfunction hr(n) {\n    let { method: e, removalVersions: t, useInstead: r } = n, o = t[h.sdkName], s = r ? ` Use \\`${r}\\` instead.` : \"\", a = `\\`${e}\\` will be removed from \\`${h.sdkName}\\` in version \\`${o}\\`.${s}`;\n    return new q(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.DeprecationNotice, a);\n}\n\n\nfunction* xn() {\n    let n = 0;\n    for(;;)n < Number.MAX_SAFE_INTEGER ? yield ++n : n = 0;\n}\nvar bn = xn();\nfunction xe() {\n    return bn.next().value;\n}\nvar it = Symbol(\"Payload pre-processed by Magic SDK\");\nfunction at(n) {\n    return Object.defineProperty(n, it, {\n        value: !0,\n        enumerable: !1\n    }), n;\n}\nfunction $n(n) {\n    return !!n[it];\n}\nfunction _(n) {\n    var e, t, r;\n    return $n(n) || (n.jsonrpc = (e = n.jsonrpc) != null ? e : \"2.0\", n.id = xe(), n.method = (t = n.method) != null ? t : \"noop\", n.params = (r = n.params) != null ? r : [], at(n)), n;\n}\nfunction d(n, e = []) {\n    return at({\n        params: e,\n        method: n,\n        jsonrpc: \"2.0\",\n        id: xe()\n    });\n}\nvar S = class {\n    constructor(e){\n        e instanceof S ? (this._jsonrpc = e.payload.jsonrpc, this._id = e.payload.id, this._result = e.payload.result, this._error = e.payload.error) : ze(e) ? (this._jsonrpc = e.jsonrpc, this._id = e.id, this._result = e.result, this._error = e.error) : (this._jsonrpc = e.jsonrpc, this._id = e.id, this._result = void 0, this._error = void 0);\n    }\n    applyError(e) {\n        return this._error = e, this;\n    }\n    applyResult(e) {\n        return this._result = e, this;\n    }\n    get hasError() {\n        return typeof this._error != \"undefined\" && this._error !== null;\n    }\n    get hasResult() {\n        return typeof this._result != \"undefined\";\n    }\n    get payload() {\n        return {\n            jsonrpc: this._jsonrpc,\n            id: this._id,\n            result: this._result,\n            error: this._error\n        };\n    }\n};\nvar pt = Lt(lt()), $e = class extends pt.default {\n};\nfunction ae() {\n    let n = new $e;\n    return {\n        emitter: n,\n        createChainingEmitterMethod: (r, o)=>(...s)=>(n[r].apply(n, s), o),\n        createBoundEmitterMethod: (r)=>(...o)=>n[r].apply(n, o)\n    };\n}\nvar ut = Symbol(\"isPromiEvent\");\nfunction dt(n) {\n    return !!n[ut];\n}\nfunction ce(n) {\n    let e = Ne(n), { createBoundEmitterMethod: t, createChainingEmitterMethod: r } = ae(), o = Symbol(\"Promise.then\"), s = Symbol(\"Promise.catch\"), a = Symbol(\"Promise.finally\"), i = (l, u)=>(...P)=>{\n            let A = u[l].apply(u, P);\n            return c(A);\n        }, c = (l)=>Object.assign(l, {\n            [ut]: !0,\n            [o]: l[o] || l.then,\n            [s]: l[s] || l.catch,\n            [a]: l[a] || l.finally,\n            then: i(o, l),\n            catch: i(s, l),\n            finally: i(a, l),\n            on: r(\"on\", l),\n            once: r(\"once\", l),\n            addListener: r(\"addListener\", l),\n            off: r(\"off\", l),\n            removeListener: r(\"removeListener\", l),\n            removeAllListeners: r(\"removeAllListeners\", l),\n            emit: t(\"emit\"),\n            eventNames: t(\"eventNames\"),\n            listeners: t(\"listeners\"),\n            listenerCount: t(\"listenerCount\")\n        }), p = c(e.then((l)=>(p.emit(\"done\", l), p.emit(\"settled\"), l), (l)=>{\n        throw p.emit(\"error\", l), p.emit(\"settled\"), l;\n    }));\n    return p;\n}\nfunction Ne(n) {\n    return new Promise((e, t)=>{\n        let r = n(e, t);\n        Promise.resolve(r).catch(t);\n    });\n}\nvar I = class {\n    constructor(e){\n        this.sdk = e;\n    }\n    get overlay() {\n        return this.sdk.overlay;\n    }\n    request(e) {\n        let t = this.overlay.post(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, _(e)), r = ce((s, a)=>{\n            t.then((i)=>{\n                if (o(), i.hasError) a(new M(i.payload.error));\n                else if (i.hasResult) s(i.payload.result);\n                else throw et();\n            }).catch((i)=>{\n                o(), a(i);\n            });\n        }), o = this.overlay.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HANDLE_EVENT, (s)=>{\n            var i;\n            let { response: a } = s.data;\n            if (a.id === e.id && ((i = a.result) == null ? void 0 : i.event)) {\n                let { event: c, params: p = [] } = a.result;\n                r.emit(c, ...p);\n            }\n        });\n        return r;\n    }\n    createIntermediaryEvent(e, t) {\n        return (o)=>{\n            let s = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.IntermediaryEvent, [\n                {\n                    payloadId: t,\n                    eventType: e,\n                    args: o\n                }\n            ]);\n            this.request(s);\n        };\n    }\n};\nvar le = class extends I {\n    loginWithMagicLink(e) {\n        let { email: t, showUI: r = !0, redirectURI: o } = e, s = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithMagicLinkTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithMagicLink, [\n            {\n                email: t,\n                showUI: r,\n                redirectURI: o\n            }\n        ]);\n        return this.request(s);\n    }\n    loginWithSMS(e) {\n        let { phoneNumber: t } = e, r = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithSmsTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithSms, [\n            {\n                phoneNumber: t,\n                showUI: !0\n            }\n        ]);\n        return this.request(r);\n    }\n    loginWithEmailOTP(e) {\n        let { email: t, showUI: r } = e, o = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithEmailOTPTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithEmailOTP, [\n            {\n                email: t,\n                showUI: r\n            }\n        ]);\n        if (!r) {\n            let s = this.request(o);\n            return s && s.on(\"otp-input-sent\", (a)=>{\n                this.createIntermediaryEvent(\"verify-email-otp\", o.id)(a);\n            }), s;\n        }\n        return this.request(o);\n    }\n    loginWithCredential(e) {\n        let t = e != null ? e : \"\";\n        if (!e && h.platform === \"web\") {\n            t = window.location.search;\n            let o = window.location.origin + window.location.pathname;\n            window.history.replaceState(null, \"\", o);\n        }\n        let r = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithCredentialTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithCredential, [\n            t\n        ]);\n        return this.request(r);\n    }\n};\n\nvar H = {};\nwt(H, {\n    clear: ()=>Sn,\n    getItem: ()=>D,\n    iterate: ()=>Dn,\n    key: ()=>Cn,\n    keys: ()=>_n,\n    length: ()=>On,\n    removeItem: ()=>ue,\n    setItem: ()=>G\n});\nvar pe;\nfunction C(n) {\n    return (...e)=>x(this, null, function*() {\n            return pe || (pe = yield h.configureStorage()), yield pe.ready(), pe[n](...e);\n        });\n}\nvar D = C(\"getItem\"), G = C(\"setItem\"), ue = C(\"removeItem\"), Sn = C(\"clear\"), On = C(\"length\"), Cn = C(\"key\"), _n = C(\"keys\"), Dn = C(\"iterate\");\nfunction mt() {\n    let n = window.crypto.getRandomValues(new Uint8Array(16));\n    n[6] = n[6] & 15 | 64, n[8] = n[8] & 191 | 128;\n    let e = \"\";\n    return e += n[0].toString(16), e += n[1].toString(16), e += n[2].toString(16), e += n[3].toString(16), e += \"-\", e += n[4].toString(16), e += n[5].toString(16), e += \"-\", e += n[6].toString(16), e += n[7].toString(16), e += \"-\", e += n[8].toString(16), e += n[9].toString(16), e += \"-\", e += n[10].toString(16), e += n[11].toString(16), e += n[12].toString(16), e += n[13].toString(16), e += n[14].toString(16), e += n[15].toString(16), e;\n}\nvar Me = \"STORE_KEY_PRIVATE_KEY\", de = \"STORE_KEY_PUBLIC_JWK\", we = \"ECDSA\", Et = \"P-256\", kn = {\n    name: we,\n    namedCurve: Et\n}, qn = {\n    name: we,\n    namedCurve: Et\n};\nfunction me() {\n    ue(de), ue(Me);\n}\nfunction ft() {\n    return x(this, null, function*() {\n        let n = yield Jn();\n        if (!n) {\n            console.info(\"unable to create public key or webcrypto is unsupported\");\n            return;\n        }\n        let { subtle: e } = window.crypto, t = yield D(Me);\n        if (!t || !e) {\n            console.info(\"unable to find private key or webcrypto unsupported\");\n            return;\n        }\n        let r = {\n            iat: Math.floor(new Date().getTime() / 1e3),\n            jti: mt()\n        }, o = {\n            typ: \"dpop+jwt\",\n            alg: \"ES256\",\n            jwk: n\n        }, s = {\n            protected: ht(JSON.stringify(o)),\n            claims: ht(JSON.stringify(r))\n        }, a = Fn(`${s.protected}.${s.claims}`), i = {\n            name: we,\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, c = jn(new Uint8Array((yield e.sign(i, t, a))));\n        return `${s.protected}.${s.claims}.${c}`;\n    });\n}\nfunction Jn() {\n    return x(this, null, function*() {\n        if (!Gn()) {\n            console.info(\"webcrypto is not supported\");\n            return;\n        }\n        return (yield D(de)) || (yield Un()), D(de);\n    });\n}\nfunction Un() {\n    return x(this, null, function*() {\n        let n = null, { subtle: e } = window.crypto, t = yield e.generateKey(kn, !0, [\n            \"sign\"\n        ]), r = yield e.exportKey(\"jwk\", t.privateKey);\n        n = yield e.exportKey(\"jwk\", t.publicKey);\n        let o = yield e.importKey(\"jwk\", r, qn, !1, [\n            \"sign\"\n        ]);\n        yield G(Me, o), yield G(de, n);\n    });\n}\nfunction Gn() {\n    let n =  false && 0, e = n && !!window.crypto.subtle;\n    return n && e;\n}\nfunction ht(n) {\n    return yt(Kn(n));\n}\nfunction Fn(n) {\n    return new TextEncoder().encode(n);\n}\nfunction yt(n) {\n    return btoa(n).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+/g, \"\");\n}\nfunction Kn(n) {\n    return encodeURIComponent(n).replace(/%([0-9A-F]{2})/g, (t, r)=>String.fromCharCode(parseInt(r, 16)));\n}\nfunction jn(n) {\n    let e = \"\";\n    return n.forEach((t)=>{\n        e += String.fromCharCode(t);\n    }), yt(e);\n}\nvar he = class extends I {\n    getIdToken(e) {\n        let t = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetIdTokenTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetIdToken, [\n            e\n        ]);\n        return this.request(t);\n    }\n    generateIdToken(e) {\n        let t = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GenerateIdTokenTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GenerateIdToken, [\n            e\n        ]);\n        return this.request(t);\n    }\n    getMetadata() {\n        let e = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetMetadataTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetMetadata);\n        return this.request(e);\n    }\n    updateEmail(e) {\n        let { email: t, showUI: r = !0 } = e, o = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdateEmailTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdateEmail, [\n            {\n                email: t,\n                showUI: r\n            }\n        ]);\n        return this.request(o);\n    }\n    isLoggedIn() {\n        let e = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.IsLoggedInTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.IsLoggedIn);\n        return this.request(e);\n    }\n    logout() {\n        me();\n        let e = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LogoutTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.Logout);\n        return this.request(e);\n    }\n    showSettings() {\n        let e = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UserSettingsTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UserSettings);\n        return this.request(e);\n    }\n    updatePhoneNumber() {\n        let e = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdatePhoneNumberTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdatePhoneNumber);\n        return this.request(e);\n    }\n    recoverAccount(e) {\n        let t = d(this.sdk.testMode ? _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RecoverAccountTestMode : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RecoverAccount, [\n            e\n        ]);\n        return this.request(t);\n    }\n};\n\nvar Ee = class extends I {\n    connectWithUI() {\n        let e = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RequestAccounts);\n        return this.request(e);\n    }\n    showUI() {\n        let e = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.ShowUI);\n        return this.request(e);\n    }\n    getInfo() {\n        let e = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetInfo);\n        return this.request(e);\n    }\n    requestUserInfoWithUI(e) {\n        let t = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RequestUserInfoWithUI, e ? [\n            e\n        ] : []);\n        return this.request(t);\n    }\n    disconnect() {\n        me();\n        let e = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.Disconnect);\n        return this.request(e);\n    }\n};\n\nvar { createBoundEmitterMethod: fe, createChainingEmitterMethod: F } = ae(), ye = class extends I {\n    constructor(){\n        super(...arguments);\n        this.isMagic = !0;\n        this.on = F(\"on\", this);\n        this.once = F(\"once\", this);\n        this.addListener = F(\"addListener\", this);\n        this.off = F(\"off\", this);\n        this.removeListener = F(\"removeListener\", this);\n        this.removeAllListeners = F(\"removeAllListeners\", this);\n        this.emit = fe(\"emit\");\n        this.eventNames = fe(\"eventNames\");\n        this.listeners = fe(\"listeners\");\n        this.listenerCount = fe(\"listenerCount\");\n    }\n    sendAsync(t, r) {\n        if (!r) throw rt({\n            procedure: \"Magic.rpcProvider.sendAsync\",\n            argument: 1,\n            expected: \"function\",\n            received: r === null ? \"null\" : typeof r\n        });\n        if (Array.isArray(t)) this.overlay.post(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, t.map((o)=>{\n            let s = _(o);\n            return this.prefixPayloadMethodForTestMode(s), s;\n        })).then((o)=>{\n            r(null, o.map((s)=>De(Z({}, s.payload), {\n                    error: s.hasError ? new M(s.payload.error) : null\n                })));\n        });\n        else {\n            let o = _(t);\n            this.prefixPayloadMethodForTestMode(o), this.overlay.post(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, o).then((s)=>{\n                r(s.hasError ? new M(s.payload.error) : null, s.payload);\n            });\n        }\n    }\n    send(t, r) {\n        if (typeof t == \"string\") {\n            let s = d(t, Array.isArray(r) ? r : []);\n            return this.request(s);\n        }\n        if (Array.isArray(t) || !!r) {\n            this.sendAsync(t, r);\n            return;\n        }\n        let o = st();\n        return o.log(), new S(t).applyError({\n            code: -32603,\n            message: o.rawMessage\n        }).payload;\n    }\n    enable() {\n        let t = d(\"eth_accounts\");\n        return this.request(t);\n    }\n    request(t) {\n        return this.prefixPayloadMethodForTestMode(t), super.request(t);\n    }\n    prefixPayloadMethodForTestMode(t) {\n        let r = \"testMode/eth/\";\n        this.sdk.testMode && (t.method = `${r}${t.method}`);\n    }\n};\nfunction Ae(n, e) {\n    return e ? new URL(n, e) : new URL(n);\n}\nvar Rt = [\n    \"request\",\n    \"overlay\",\n    \"sdk\"\n];\nfunction Wn(n) {\n    let e = Object.getPrototypeOf(n), t = [\n        e\n    ];\n    for(; e !== I.prototype;)e = Object.getPrototypeOf(e), t.push(e);\n    return t;\n}\nvar ge = class extends I {\n    constructor(){\n        super(void 0);\n        this.__sdk_access_field_descriptors__ = new Map;\n        this.__is_initialized__ = !1;\n        this.utils = {\n            createPromiEvent: ce,\n            isPromiEvent: dt,\n            encodeJSON: ne,\n            decodeJSON: Ve,\n            createJsonRpcRequestPayload: d,\n            standardizeJsonRpcRequestPayload: _,\n            storage: H\n        };\n        let t = [\n            this,\n            ...Wn(this)\n        ];\n        Rt.forEach((r)=>{\n            let o = t.map((c)=>Object.getOwnPropertyDescriptor(c, r)), s = o.findIndex((c)=>!!c), a = s > 0, i = o[s];\n            i && (this.__sdk_access_field_descriptors__.set(r, {\n                descriptor: i,\n                isPrototypeField: a\n            }), Object.defineProperty(this, r, {\n                configurable: !0,\n                get: ()=>{\n                    throw tt(r);\n                }\n            }));\n        });\n    }\n    init(t) {\n        this.__is_initialized__ || (Rt.forEach((r)=>{\n            if (this.__sdk_access_field_descriptors__.has(r)) {\n                let { descriptor: o, isPrototypeField: s } = this.__sdk_access_field_descriptors__.get(r);\n                s ? delete this[r] : Object.defineProperty(this, r, o);\n            }\n        }), this.sdk = t, this.__is_initialized__ = !0);\n    }\n    createDeprecationWarning(t) {\n        let { method: r, removalVersion: o, useInstead: s } = t, a = s ? ` Use \\`${s}\\` instead.` : \"\", i = `\\`${r}\\` will be removed from this Extension in version \\`${o}\\`.${a}`;\n        return new X(this, \"DEPRECATION_NOTICE\", i);\n    }\n    createWarning(t, r) {\n        return new X(this, t, r);\n    }\n    createError(t, r, o) {\n        return new J(this, t, r, o);\n    }\n}, Le = class extends ge {\n}, w = class extends ge {\n};\nw.Internal = Le, w.Anonymous = \"anonymous extension\";\n\nvar Re = class extends I {\n    purchase(e) {\n        let t = d(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.NFTPurchase, [\n            e\n        ]);\n        return this.request(t);\n    }\n};\nfunction Tt(n) {\n    return n.compat && n.compat[h.sdkName] != null ? typeof n.compat[h.sdkName] == \"string\" ? Be(He(h.version), n.compat[h.sdkName]) : !!n.compat[h.sdkName] : !0;\n}\nfunction Bn(n) {\n    var o;\n    let e = (o = n == null ? void 0 : n.extensions) != null ? o : [], t = {}, r = [];\n    if (Array.isArray(e) ? e.forEach((s)=>{\n        Tt(s) ? (s.init(this), (s.name || s.name !== w.Anonymous) && (this[s.name] = s), s instanceof w.Internal && (se(s.config) || (t[s.name] = s.config))) : r.push(s);\n    }) : Object.keys(e).forEach((s)=>{\n        if (Tt(e[s])) {\n            e[s].init(this);\n            let a = e[s];\n            this[s] = a, a instanceof w.Internal && (se(a.config) || (t[e[s].name] = a.config));\n        } else r.push(e[s]);\n    }), r.length) throw nt(r);\n    return t;\n}\nvar z = class {\n    constructor(e, t){\n        this.apiKey = e;\n        var a;\n        if (!e) throw Qe();\n        h.platform === \"react-native\" && (t == null ? void 0 : t.endpoint) && ot().log();\n        let { defaultEndpoint: r, version: o } = h;\n        this.testMode = !!(t != null && t.testMode), this.endpoint = Ae((a = t == null ? void 0 : t.endpoint) != null ? a : r).origin, this.auth = new le(this), this.user = new he(this), this.wallet = new Ee(this), this.nft = new Re(this), this.rpcProvider = new ye(this);\n        let s = Bn.call(this, t);\n        this.parameters = ne(Z({\n            API_KEY: this.apiKey,\n            DOMAIN_ORIGIN: window.location ? window.location.origin : \"\",\n            ETH_NETWORK: t == null ? void 0 : t.network,\n            host: Ae(this.endpoint).host,\n            sdk: Ze[h.sdkName],\n            version: o,\n            ext: se(s) ? void 0 : s,\n            locale: (t == null ? void 0 : t.locale) || \"en_US\"\n        }, h.bundleId ? {\n            bundleId: h.bundleId\n        } : {}));\n    }\n    get overlay() {\n        if (!z.__overlays__.has(this.parameters)) {\n            let e = new h.ViewController(this.endpoint, this.parameters);\n            e.init(), z.__overlays__.set(this.parameters, e);\n        }\n        return z.__overlays__.get(this.parameters);\n    }\n    preload() {\n        return x(this, null, function*() {\n            yield this.overlay.ready;\n        });\n    }\n}, Te = z;\nTe.__overlays__ = new Map;\n\nfunction Hn(n, e) {\n    return e && Array.isArray(n) ? n.find((t)=>t.id === e) : n;\n}\nfunction Vn(n, e) {\n    var o;\n    let t = (o = e.data.response) == null ? void 0 : o.id, r = Hn(n, t);\n    if (t && r) {\n        let s = new S(r).applyResult(e.data.response.result).applyError(e.data.response.error);\n        return {\n            id: t,\n            response: s\n        };\n    }\n    return {};\n}\nfunction zn(n, e) {\n    return x(this, null, function*() {\n        let t = yield D(\"rt\"), r;\n        if (h.platform === \"web\") try {\n            r = yield ft();\n        } catch (o) {\n            console.error(\"webcrypto error\", o);\n        }\n        return r ? t ? {\n            msgType: n,\n            payload: e,\n            jwt: r,\n            rt: t\n        } : {\n            msgType: n,\n            payload: e,\n            jwt: r\n        } : {\n            msgType: n,\n            payload: e\n        };\n    });\n}\nfunction Yn(n) {\n    return x(this, null, function*() {\n        !n.data.rt || (yield G(\"rt\", n.data.rt));\n    });\n}\nvar Se = class {\n    constructor(e, t){\n        this.endpoint = e;\n        this.parameters = t;\n        this.messageHandlers = new Set;\n        this.ready = this.waitForReady(), this.listen();\n    }\n    post(e, t) {\n        return x(this, null, function*() {\n            return Ne((r)=>x(this, null, function*() {\n                    yield this.ready;\n                    let o = [], s = Array.isArray(t) ? t.map((p)=>p.id) : [], a = yield zn(`${e}-${this.parameters}`, t);\n                    yield this._post(a);\n                    let i = (p)=>(l)=>{\n                            let { id: u, response: P } = Vn(t, l);\n                            Yn(l), u && P && Array.isArray(t) && s.includes(u) ? (o.push(P), o.length === t.length && (p(), r(o))) : u && P && !Array.isArray(t) && u === t.id && (p(), r(P));\n                        }, c = this.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, i(()=>c()));\n                }));\n        });\n    }\n    on(e, t) {\n        let r = t.bind(window), o = (s)=>{\n            s.data.msgType === `${e}-${this.parameters}` && r(s);\n        };\n        return this.messageHandlers.add(o), ()=>this.messageHandlers.delete(o);\n    }\n    waitForReady() {\n        return new Promise((e)=>{\n            this.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_OVERLAY_READY, ()=>e());\n        });\n    }\n    listen() {\n        this.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HIDE_OVERLAY, ()=>{\n            this.hideOverlay();\n        }), this.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_SHOW_OVERLAY, ()=>{\n            this.showOverlay();\n        });\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@magic-sdk/provider/dist/es/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@magic-sdk/types/dist/es/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/es/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthChainType: () => (/* binding */ c),\n/* harmony export */   MagicIncomingWindowMessage: () => (/* binding */ u),\n/* harmony export */   MagicOutgoingWindowMessage: () => (/* binding */ o),\n/* harmony export */   MagicPayloadMethod: () => (/* binding */ p),\n/* harmony export */   RPCErrorCode: () => (/* binding */ m),\n/* harmony export */   SDKErrorCode: () => (/* binding */ r),\n/* harmony export */   SDKWarningCode: () => (/* binding */ a)\n/* harmony export */ });\nvar r = ((n)=>(n.MissingApiKey = \"MISSING_API_KEY\", n.ModalNotReady = \"MODAL_NOT_READY\", n.MalformedResponse = \"MALFORMED_RESPONSE\", n.InvalidArgument = \"INVALID_ARGUMENT\", n.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", n.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", n))(r || {}), a = ((s)=>(s.SyncWeb3Method = \"SYNC_WEB3_METHOD\", s.DuplicateIframe = \"DUPLICATE_IFRAME\", s.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", s.DeprecationNotice = \"DEPRECATION_NOTICE\", s))(a || {}), m = ((t)=>(t[t.ParseError = -32700] = \"ParseError\", t[t.InvalidRequest = -32600] = \"InvalidRequest\", t[t.MethodNotFound = -32601] = \"MethodNotFound\", t[t.InvalidParams = -32602] = \"InvalidParams\", t[t.InternalError = -32603] = \"InternalError\", t[t.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", t[t.MagicLinkExpired = -10001] = \"MagicLinkExpired\", t[t.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", t[t.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", t[t.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", t[t.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", t[t.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", t[t.InactiveRecipient = -10010] = \"InactiveRecipient\", t[t.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", t))(m || {});\nvar p = ((e)=>(e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_auth_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"mc_get_wallet_info\", e.ShowUI = \"mc_wallet\", e.NFTPurchase = \"magic_nft_purchase\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.UpdatePhoneNumber = \"magic_auth_update_phone_number\", e.UpdatePhoneNumberTestMode = \"magic_auth_update_phone_number_testing_mode\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e))(p || {});\nvar u = ((i)=>(i.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", i.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", i.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", i.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", i.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", i))(u || {}), o = ((_)=>(_.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", _))(o || {});\nvar c = ((_)=>(_.Harmony = \"HARMONY\", _))(c || {});\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1hZ2ljLXNkay90eXBlcy9kaXN0L2VzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsSUFBRSxDQUFDQyxDQUFBQSxJQUFJQSxDQUFBQSxFQUFFQyxhQUFhLEdBQUMsbUJBQWtCRCxFQUFFRSxhQUFhLEdBQUMsbUJBQWtCRixFQUFFRyxpQkFBaUIsR0FBQyxzQkFBcUJILEVBQUVJLGVBQWUsR0FBQyxvQkFBbUJKLEVBQUVLLHVCQUF1QixHQUFDLDZCQUE0QkwsRUFBRU0sc0JBQXNCLEdBQUMsMkJBQTBCTixDQUFBQSxDQUFDLEVBQUdELEtBQUcsQ0FBQyxJQUFHUSxJQUFFLENBQUNDLENBQUFBLElBQUlBLENBQUFBLEVBQUVDLGNBQWMsR0FBQyxvQkFBbUJELEVBQUVFLGVBQWUsR0FBQyxvQkFBbUJGLEVBQUVHLGdDQUFnQyxHQUFDLHVDQUFzQ0gsRUFBRUksaUJBQWlCLEdBQUMsc0JBQXFCSixDQUFBQSxDQUFDLEVBQUdELEtBQUcsQ0FBQyxJQUFHTSxJQUFFLENBQUNDLENBQUFBLElBQUlBLENBQUFBLENBQUMsQ0FBQ0EsRUFBRUMsVUFBVSxHQUFDLENBQUMsTUFBTSxHQUFDLGNBQWFELENBQUMsQ0FBQ0EsRUFBRUUsY0FBYyxHQUFDLENBQUMsTUFBTSxHQUFDLGtCQUFpQkYsQ0FBQyxDQUFDQSxFQUFFRyxjQUFjLEdBQUMsQ0FBQyxNQUFNLEdBQUMsa0JBQWlCSCxDQUFDLENBQUNBLEVBQUVJLGFBQWEsR0FBQyxDQUFDLE1BQU0sR0FBQyxpQkFBZ0JKLENBQUMsQ0FBQ0EsRUFBRUssYUFBYSxHQUFDLENBQUMsTUFBTSxHQUFDLGlCQUFnQkwsQ0FBQyxDQUFDQSxFQUFFTSwyQkFBMkIsR0FBQyxDQUFDLElBQUksR0FBQywrQkFBOEJOLENBQUMsQ0FBQ0EsRUFBRU8sZ0JBQWdCLEdBQUMsQ0FBQyxNQUFNLEdBQUMsb0JBQW1CUCxDQUFDLENBQUNBLEVBQUVRLG9CQUFvQixHQUFDLENBQUMsTUFBTSxHQUFDLHdCQUF1QlIsQ0FBQyxDQUFDQSxFQUFFUywyQkFBMkIsR0FBQyxDQUFDLE1BQU0sR0FBQywrQkFBOEJULENBQUMsQ0FBQ0EsRUFBRVUsbUJBQW1CLEdBQUMsQ0FBQyxNQUFNLEdBQUMsdUJBQXNCVixDQUFDLENBQUNBLEVBQUVXLGlCQUFpQixHQUFDLENBQUMsTUFBTSxHQUFDLHFCQUFvQlgsQ0FBQyxDQUFDQSxFQUFFWSxvQkFBb0IsR0FBQyxDQUFDLE1BQU0sR0FBQyx3QkFBdUJaLENBQUMsQ0FBQ0EsRUFBRWEsaUJBQWlCLEdBQUMsQ0FBQyxNQUFNLEdBQUMscUJBQW9CYixDQUFDLENBQUNBLEVBQUVjLGtCQUFrQixHQUFDLENBQUMsTUFBTSxHQUFDLHNCQUFxQmQsQ0FBQUEsQ0FBQyxFQUFHRCxLQUFHLENBQUM7QUFBRyxJQUFJZ0IsSUFBRSxDQUFDQyxDQUFBQSxJQUFJQSxDQUFBQSxFQUFFQyxZQUFZLEdBQUMsNkJBQTRCRCxFQUFFRSxpQkFBaUIsR0FBQyxtQ0FBa0NGLEVBQUVHLGtCQUFrQixHQUFDLG9DQUFtQ0gsRUFBRUksbUJBQW1CLEdBQUMsb0NBQW1DSixFQUFFSyxVQUFVLEdBQUMsMkJBQTBCTCxFQUFFTSxlQUFlLEdBQUMsZ0NBQStCTixFQUFFTyxXQUFXLEdBQUMsMkJBQTBCUCxFQUFFUSxVQUFVLEdBQUMsMkJBQTBCUixFQUFFUyxNQUFNLEdBQUMscUJBQW9CVCxFQUFFVSxXQUFXLEdBQUMsMkJBQTBCVixFQUFFVyxZQUFZLEdBQUMsdUJBQXNCWCxFQUFFWSxvQkFBb0IsR0FBQyxvQ0FBbUNaLEVBQUVhLG9CQUFvQixHQUFDLDBDQUF5Q2IsRUFBRWMseUJBQXlCLEdBQUMsZ0RBQStDZCxFQUFFZSwwQkFBMEIsR0FBQyw0Q0FBMkNmLEVBQUVnQiwyQkFBMkIsR0FBQyxpREFBZ0RoQixFQUFFaUIsa0JBQWtCLEdBQUMsd0NBQXVDakIsRUFBRWtCLHVCQUF1QixHQUFDLDZDQUE0Q2xCLEVBQUVtQixtQkFBbUIsR0FBQyx3Q0FBdUNuQixFQUFFb0Isa0JBQWtCLEdBQUMsd0NBQXVDcEIsRUFBRXFCLGNBQWMsR0FBQyxrQ0FBaUNyQixFQUFFc0IsbUJBQW1CLEdBQUMsd0NBQXVDdEIsRUFBRXVCLGlCQUFpQixHQUFDLDRCQUEyQnZCLEVBQUV3QixlQUFlLEdBQUMsdUJBQXNCeEIsRUFBRXlCLE9BQU8sR0FBQyxzQkFBcUJ6QixFQUFFMEIsTUFBTSxHQUFDLGFBQVkxQixFQUFFMkIsV0FBVyxHQUFDLHNCQUFxQjNCLEVBQUU0QixxQkFBcUIsR0FBQyx3QkFBdUI1QixFQUFFNkIsVUFBVSxHQUFDLGlCQUFnQjdCLEVBQUU4QixpQkFBaUIsR0FBQyxrQ0FBaUM5QixFQUFFK0IseUJBQXlCLEdBQUMsK0NBQThDL0IsRUFBRWdDLGNBQWMsR0FBQyw4QkFBNkJoQyxFQUFFaUMsc0JBQXNCLEdBQUMsMkNBQTBDakMsQ0FBQUEsQ0FBQyxFQUFHRCxLQUFHLENBQUM7QUFBRyxJQUFJbUMsSUFBRSxDQUFDQyxDQUFBQSxJQUFJQSxDQUFBQSxFQUFFQyxxQkFBcUIsR0FBQyx5QkFBd0JELEVBQUVFLG1CQUFtQixHQUFDLHVCQUFzQkYsRUFBRUcsa0JBQWtCLEdBQUMsc0JBQXFCSCxFQUFFSSxrQkFBa0IsR0FBQyxzQkFBcUJKLEVBQUVLLGtCQUFrQixHQUFDLHNCQUFxQkwsQ0FBQUEsQ0FBQyxFQUFHRCxLQUFHLENBQUMsSUFBR08sSUFBRSxDQUFDQyxDQUFBQSxJQUFJQSxDQUFBQSxFQUFFQyxvQkFBb0IsR0FBQyx3QkFBdUJELENBQUFBLENBQUMsRUFBR0QsS0FBRyxDQUFDO0FBQUcsSUFBSUcsSUFBRSxDQUFDRixDQUFBQSxJQUFJQSxDQUFBQSxFQUFFRyxPQUFPLEdBQUMsV0FBVUgsQ0FBQUEsQ0FBQyxFQUFHRSxLQUFHLENBQUM7QUFBNkssQ0FDcDJHLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AbWFnaWMtc2RrL3R5cGVzL2Rpc3QvZXMvaW5kZXgubWpzPzBlY2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHI9KG49PihuLk1pc3NpbmdBcGlLZXk9XCJNSVNTSU5HX0FQSV9LRVlcIixuLk1vZGFsTm90UmVhZHk9XCJNT0RBTF9OT1RfUkVBRFlcIixuLk1hbGZvcm1lZFJlc3BvbnNlPVwiTUFMRk9STUVEX1JFU1BPTlNFXCIsbi5JbnZhbGlkQXJndW1lbnQ9XCJJTlZBTElEX0FSR1VNRU5UXCIsbi5FeHRlbnNpb25Ob3RJbml0aWFsaXplZD1cIkVYVEVOU0lPTl9OT1RfSU5JVElBTElaRURcIixuLkluY29tcGF0aWJsZUV4dGVuc2lvbnM9XCJJTkNPTVBBVElCTEVfRVhURU5TSU9OU1wiLG4pKShyfHx7fSksYT0ocz0+KHMuU3luY1dlYjNNZXRob2Q9XCJTWU5DX1dFQjNfTUVUSE9EXCIscy5EdXBsaWNhdGVJZnJhbWU9XCJEVVBMSUNBVEVfSUZSQU1FXCIscy5SZWFjdE5hdGl2ZUVuZHBvaW50Q29uZmlndXJhdGlvbj1cIlJFQUNUX05BVElWRV9FTkRQT0lOVF9DT05GSUdVUkFUSU9OXCIscy5EZXByZWNhdGlvbk5vdGljZT1cIkRFUFJFQ0FUSU9OX05PVElDRVwiLHMpKShhfHx7fSksbT0odD0+KHRbdC5QYXJzZUVycm9yPS0zMjcwMF09XCJQYXJzZUVycm9yXCIsdFt0LkludmFsaWRSZXF1ZXN0PS0zMjYwMF09XCJJbnZhbGlkUmVxdWVzdFwiLHRbdC5NZXRob2ROb3RGb3VuZD0tMzI2MDFdPVwiTWV0aG9kTm90Rm91bmRcIix0W3QuSW52YWxpZFBhcmFtcz0tMzI2MDJdPVwiSW52YWxpZFBhcmFtc1wiLHRbdC5JbnRlcm5hbEVycm9yPS0zMjYwM109XCJJbnRlcm5hbEVycm9yXCIsdFt0Lk1hZ2ljTGlua0ZhaWxlZFZlcmlmaWNhdGlvbj0tMWU0XT1cIk1hZ2ljTGlua0ZhaWxlZFZlcmlmaWNhdGlvblwiLHRbdC5NYWdpY0xpbmtFeHBpcmVkPS0xMDAwMV09XCJNYWdpY0xpbmtFeHBpcmVkXCIsdFt0Lk1hZ2ljTGlua1JhdGVMaW1pdGVkPS0xMDAwMl09XCJNYWdpY0xpbmtSYXRlTGltaXRlZFwiLHRbdC5NYWdpY0xpbmtJbnZhbGlkUmVkaXJlY3RVUkw9LTEwMDA2XT1cIk1hZ2ljTGlua0ludmFsaWRSZWRpcmVjdFVSTFwiLHRbdC5Vc2VyQWxyZWFkeUxvZ2dlZEluPS0xMDAwM109XCJVc2VyQWxyZWFkeUxvZ2dlZEluXCIsdFt0LlVwZGF0ZUVtYWlsRmFpbGVkPS0xMDAwNF09XCJVcGRhdGVFbWFpbEZhaWxlZFwiLHRbdC5Vc2VyUmVxdWVzdEVkaXRFbWFpbD0tMTAwMDVdPVwiVXNlclJlcXVlc3RFZGl0RW1haWxcIix0W3QuSW5hY3RpdmVSZWNpcGllbnQ9LTEwMDEwXT1cIkluYWN0aXZlUmVjaXBpZW50XCIsdFt0LkFjY2Vzc0RlbmllZFRvVXNlcj0tMTAwMTFdPVwiQWNjZXNzRGVuaWVkVG9Vc2VyXCIsdCkpKG18fHt9KTt2YXIgcD0oZT0+KGUuTG9naW5XaXRoU21zPVwibWFnaWNfYXV0aF9sb2dpbl93aXRoX3Ntc1wiLGUuTG9naW5XaXRoRW1haWxPVFA9XCJtYWdpY19hdXRoX2xvZ2luX3dpdGhfZW1haWxfb3RwXCIsZS5Mb2dpbldpdGhNYWdpY0xpbms9XCJtYWdpY19hdXRoX2xvZ2luX3dpdGhfbWFnaWNfbGlua1wiLGUuTG9naW5XaXRoQ3JlZGVudGlhbD1cIm1hZ2ljX2F1dGhfbG9naW5fd2l0aF9jcmVkZW50aWFsXCIsZS5HZXRJZFRva2VuPVwibWFnaWNfYXV0aF9nZXRfaWRfdG9rZW5cIixlLkdlbmVyYXRlSWRUb2tlbj1cIm1hZ2ljX2F1dGhfZ2VuZXJhdGVfaWRfdG9rZW5cIixlLkdldE1ldGFkYXRhPVwibWFnaWNfYXV0aF9nZXRfbWV0YWRhdGFcIixlLklzTG9nZ2VkSW49XCJtYWdpY19hdXRoX2lzX2xvZ2dlZF9pblwiLGUuTG9nb3V0PVwibWFnaWNfYXV0aF9sb2dvdXRcIixlLlVwZGF0ZUVtYWlsPVwibWFnaWNfYXV0aF91cGRhdGVfZW1haWxcIixlLlVzZXJTZXR0aW5ncz1cIm1hZ2ljX2F1dGhfc2V0dGluZ3NcIixlLlVzZXJTZXR0aW5nc1Rlc3RNb2RlPVwibWFnaWNfYXV0aF9zZXR0aW5nc190ZXN0aW5nX21vZGVcIixlLkxvZ2luV2l0aFNtc1Rlc3RNb2RlPVwibWFnaWNfYXV0aF9sb2dpbl93aXRoX3Ntc190ZXN0aW5nX21vZGVcIixlLkxvZ2luV2l0aEVtYWlsT1RQVGVzdE1vZGU9XCJtYWdpY19hdXRoX2xvZ2luX3dpdGhfZW1haWxfb3RwX3Rlc3RpbmdfbW9kZVwiLGUuTG9naW5XaXRoTWFnaWNMaW5rVGVzdE1vZGU9XCJtYWdpY19sb2dpbl93aXRoX21hZ2ljX2xpbmtfdGVzdGluZ19tb2RlXCIsZS5Mb2dpbldpdGhDcmVkZW50aWFsVGVzdE1vZGU9XCJtYWdpY19hdXRoX2xvZ2luX3dpdGhfY3JlZGVudGlhbF90ZXN0aW5nX21vZGVcIixlLkdldElkVG9rZW5UZXN0TW9kZT1cIm1hZ2ljX2F1dGhfZ2V0X2lkX3Rva2VuX3Rlc3RpbmdfbW9kZVwiLGUuR2VuZXJhdGVJZFRva2VuVGVzdE1vZGU9XCJtYWdpY19hdXRoX2dlbmVyYXRlX2lkX3Rva2VuX3Rlc3RpbmdfbW9kZVwiLGUuR2V0TWV0YWRhdGFUZXN0TW9kZT1cIm1hZ2ljX2F1dGhfZ2V0X21ldGFkYXRhX3Rlc3RpbmdfbW9kZVwiLGUuSXNMb2dnZWRJblRlc3RNb2RlPVwibWFnaWNfYXV0aF9pc19sb2dnZWRfaW5fdGVzdGluZ19tb2RlXCIsZS5Mb2dvdXRUZXN0TW9kZT1cIm1hZ2ljX2F1dGhfbG9nb3V0X3Rlc3RpbmdfbW9kZVwiLGUuVXBkYXRlRW1haWxUZXN0TW9kZT1cIm1hZ2ljX2F1dGhfdXBkYXRlX2VtYWlsX3Rlc3RpbmdfbW9kZVwiLGUuSW50ZXJtZWRpYXJ5RXZlbnQ9XCJtYWdpY19pbnRlcm1lZGlhcnlfZXZlbnRcIixlLlJlcXVlc3RBY2NvdW50cz1cImV0aF9yZXF1ZXN0QWNjb3VudHNcIixlLkdldEluZm89XCJtY19nZXRfd2FsbGV0X2luZm9cIixlLlNob3dVST1cIm1jX3dhbGxldFwiLGUuTkZUUHVyY2hhc2U9XCJtYWdpY19uZnRfcHVyY2hhc2VcIixlLlJlcXVlc3RVc2VySW5mb1dpdGhVST1cIm1jX3JlcXVlc3RfdXNlcl9pbmZvXCIsZS5EaXNjb25uZWN0PVwibWNfZGlzY29ubmVjdFwiLGUuVXBkYXRlUGhvbmVOdW1iZXI9XCJtYWdpY19hdXRoX3VwZGF0ZV9waG9uZV9udW1iZXJcIixlLlVwZGF0ZVBob25lTnVtYmVyVGVzdE1vZGU9XCJtYWdpY19hdXRoX3VwZGF0ZV9waG9uZV9udW1iZXJfdGVzdGluZ19tb2RlXCIsZS5SZWNvdmVyQWNjb3VudD1cIm1hZ2ljX2F1dGhfcmVjb3Zlcl9hY2NvdW50XCIsZS5SZWNvdmVyQWNjb3VudFRlc3RNb2RlPVwibWFnaWNfYXV0aF9yZWNvdmVyX2FjY291bnRfdGVzdGluZ19tb2RlXCIsZSkpKHB8fHt9KTt2YXIgdT0oaT0+KGkuTUFHSUNfSEFORExFX1JFU1BPTlNFPVwiTUFHSUNfSEFORExFX1JFU1BPTlNFXCIsaS5NQUdJQ19PVkVSTEFZX1JFQURZPVwiTUFHSUNfT1ZFUkxBWV9SRUFEWVwiLGkuTUFHSUNfU0hPV19PVkVSTEFZPVwiTUFHSUNfU0hPV19PVkVSTEFZXCIsaS5NQUdJQ19ISURFX09WRVJMQVk9XCJNQUdJQ19ISURFX09WRVJMQVlcIixpLk1BR0lDX0hBTkRMRV9FVkVOVD1cIk1BR0lDX0hBTkRMRV9FVkVOVFwiLGkpKSh1fHx7fSksbz0oXz0+KF8uTUFHSUNfSEFORExFX1JFUVVFU1Q9XCJNQUdJQ19IQU5ETEVfUkVRVUVTVFwiLF8pKShvfHx7fSk7dmFyIGM9KF89PihfLkhhcm1vbnk9XCJIQVJNT05ZXCIsXykpKGN8fHt9KTtleHBvcnR7YyBhcyBFdGhDaGFpblR5cGUsdSBhcyBNYWdpY0luY29taW5nV2luZG93TWVzc2FnZSxvIGFzIE1hZ2ljT3V0Z29pbmdXaW5kb3dNZXNzYWdlLHAgYXMgTWFnaWNQYXlsb2FkTWV0aG9kLG0gYXMgUlBDRXJyb3JDb2RlLHIgYXMgU0RLRXJyb3JDb2RlLGEgYXMgU0RLV2FybmluZ0NvZGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcFxuIl0sIm5hbWVzIjpbInIiLCJuIiwiTWlzc2luZ0FwaUtleSIsIk1vZGFsTm90UmVhZHkiLCJNYWxmb3JtZWRSZXNwb25zZSIsIkludmFsaWRBcmd1bWVudCIsIkV4dGVuc2lvbk5vdEluaXRpYWxpemVkIiwiSW5jb21wYXRpYmxlRXh0ZW5zaW9ucyIsImEiLCJzIiwiU3luY1dlYjNNZXRob2QiLCJEdXBsaWNhdGVJZnJhbWUiLCJSZWFjdE5hdGl2ZUVuZHBvaW50Q29uZmlndXJhdGlvbiIsIkRlcHJlY2F0aW9uTm90aWNlIiwibSIsInQiLCJQYXJzZUVycm9yIiwiSW52YWxpZFJlcXVlc3QiLCJNZXRob2ROb3RGb3VuZCIsIkludmFsaWRQYXJhbXMiLCJJbnRlcm5hbEVycm9yIiwiTWFnaWNMaW5rRmFpbGVkVmVyaWZpY2F0aW9uIiwiTWFnaWNMaW5rRXhwaXJlZCIsIk1hZ2ljTGlua1JhdGVMaW1pdGVkIiwiTWFnaWNMaW5rSW52YWxpZFJlZGlyZWN0VVJMIiwiVXNlckFscmVhZHlMb2dnZWRJbiIsIlVwZGF0ZUVtYWlsRmFpbGVkIiwiVXNlclJlcXVlc3RFZGl0RW1haWwiLCJJbmFjdGl2ZVJlY2lwaWVudCIsIkFjY2Vzc0RlbmllZFRvVXNlciIsInAiLCJlIiwiTG9naW5XaXRoU21zIiwiTG9naW5XaXRoRW1haWxPVFAiLCJMb2dpbldpdGhNYWdpY0xpbmsiLCJMb2dpbldpdGhDcmVkZW50aWFsIiwiR2V0SWRUb2tlbiIsIkdlbmVyYXRlSWRUb2tlbiIsIkdldE1ldGFkYXRhIiwiSXNMb2dnZWRJbiIsIkxvZ291dCIsIlVwZGF0ZUVtYWlsIiwiVXNlclNldHRpbmdzIiwiVXNlclNldHRpbmdzVGVzdE1vZGUiLCJMb2dpbldpdGhTbXNUZXN0TW9kZSIsIkxvZ2luV2l0aEVtYWlsT1RQVGVzdE1vZGUiLCJMb2dpbldpdGhNYWdpY0xpbmtUZXN0TW9kZSIsIkxvZ2luV2l0aENyZWRlbnRpYWxUZXN0TW9kZSIsIkdldElkVG9rZW5UZXN0TW9kZSIsIkdlbmVyYXRlSWRUb2tlblRlc3RNb2RlIiwiR2V0TWV0YWRhdGFUZXN0TW9kZSIsIklzTG9nZ2VkSW5UZXN0TW9kZSIsIkxvZ291dFRlc3RNb2RlIiwiVXBkYXRlRW1haWxUZXN0TW9kZSIsIkludGVybWVkaWFyeUV2ZW50IiwiUmVxdWVzdEFjY291bnRzIiwiR2V0SW5mbyIsIlNob3dVSSIsIk5GVFB1cmNoYXNlIiwiUmVxdWVzdFVzZXJJbmZvV2l0aFVJIiwiRGlzY29ubmVjdCIsIlVwZGF0ZVBob25lTnVtYmVyIiwiVXBkYXRlUGhvbmVOdW1iZXJUZXN0TW9kZSIsIlJlY292ZXJBY2NvdW50IiwiUmVjb3ZlckFjY291bnRUZXN0TW9kZSIsInUiLCJpIiwiTUFHSUNfSEFORExFX1JFU1BPTlNFIiwiTUFHSUNfT1ZFUkxBWV9SRUFEWSIsIk1BR0lDX1NIT1dfT1ZFUkxBWSIsIk1BR0lDX0hJREVfT1ZFUkxBWSIsIk1BR0lDX0hBTkRMRV9FVkVOVCIsIm8iLCJfIiwiTUFHSUNfSEFORExFX1JFUVVFU1QiLCJjIiwiSGFybW9ueSIsIkV0aENoYWluVHlwZSIsIk1hZ2ljSW5jb21pbmdXaW5kb3dNZXNzYWdlIiwiTWFnaWNPdXRnb2luZ1dpbmRvd01lc3NhZ2UiLCJNYWdpY1BheWxvYWRNZXRob2QiLCJSUENFcnJvckNvZGUiLCJTREtFcnJvckNvZGUiLCJTREtXYXJuaW5nQ29kZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@magic-sdk/types/dist/es/index.mjs\n");

/***/ })

};
;