"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereum-provider";
exports.ids = ["vendor-chunks/ethereum-provider"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereum-provider/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/ethereum-provider/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst payload_1 = __webpack_require__(/*! ./payload */ \"(ssr)/./node_modules/ethereum-provider/dist/payload.js\");\nclass Provider extends events_1.default {\n    constructor(connection){\n        super();\n        this.promises = {};\n        this.attemptedSubscriptions = new Set();\n        this.subscriptions = [];\n        this.checkConnectionRunning = false;\n        this.nextId = 1;\n        this.connected = false;\n        this.accounts = [];\n        this.selectedAddress = undefined;\n        this.coinbase = undefined;\n        this.enable = this.enable.bind(this);\n        this.doSend = this.doSend.bind(this);\n        this.send = this.send.bind(this);\n        this.sendBatch = this.sendBatch.bind(this);\n        this.subscribe = this.subscribe.bind(this);\n        this.unsubscribe = this.unsubscribe.bind(this);\n        this.resumeSubscriptions = this.resumeSubscriptions.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.sendAsyncBatch = this.sendAsyncBatch.bind(this);\n        this.isConnected = this.isConnected.bind(this);\n        this.close = this.close.bind(this);\n        this.request = this.request.bind(this);\n        this.connection = connection;\n        this.on(\"connect\", this.resumeSubscriptions);\n        this.connection.on(\"connect\", ()=>this.checkConnection(1000));\n        this.connection.on(\"close\", ()=>{\n            this.connected = false;\n            this.attemptedSubscriptions.clear();\n            this.emit(\"close\");\n            this.emit(\"disconnect\");\n        });\n        this.connection.on(\"payload\", (payload)=>{\n            const { id, method, error, result } = payload;\n            if (typeof id !== \"undefined\") {\n                if (this.promises[id]) {\n                    const requestMethod = this.promises[id].method;\n                    if (requestMethod && [\n                        \"eth_accounts\",\n                        \"eth_requestAccounts\"\n                    ].includes(requestMethod)) {\n                        const accounts = result || [];\n                        this.accounts = accounts;\n                        this.selectedAddress = accounts[0];\n                        this.coinbase = accounts[0];\n                    }\n                    payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n                    delete this.promises[id];\n                }\n            } else if (method && method.indexOf(\"_subscription\") > -1) {\n                // Events: connect, disconnect, chainChanged, chainsChanged, accountsChanged, assetsChanged, message\n                this.emit(payload.params.subscription, payload.params.result);\n                this.emit(method, payload.params); // Older EIP-1193\n                this.emit(\"message\", {\n                    type: payload.method,\n                    data: {\n                        subscription: payload.params.subscription,\n                        result: payload.params.result\n                    }\n                });\n                this.emit(\"data\", payload); // Backwards Compatibility\n            }\n        });\n        this.on(\"newListener\", (event)=>{\n            if (Object.keys(this.eventHandlers).includes(event)) {\n                if (!this.attemptedSubscription(event) && this.connected) {\n                    this.startSubscription(event);\n                    if (event === \"networkChanged\") {\n                        console.warn(\"The networkChanged event is being deprecated, use chainChanged instead\");\n                    }\n                }\n            }\n        });\n        this.eventHandlers = {\n            networkChanged: (netId)=>{\n                this.networkVersion = typeof netId === \"string\" ? parseInt(netId) : netId;\n                this.emit(\"networkChanged\", this.networkVersion);\n            },\n            chainChanged: (chainId)=>{\n                this.providerChainId = chainId;\n                if (!this.manualChainId) {\n                    this.emit(\"chainChanged\", chainId);\n                }\n            },\n            chainsChanged: (chains)=>{\n                this.emit(\"chainsChanged\", chains);\n            },\n            accountsChanged: (accounts)=>{\n                this.selectedAddress = accounts[0];\n                this.emit(\"accountsChanged\", accounts);\n            },\n            assetsChanged: (assets)=>{\n                this.emit(\"assetsChanged\", assets);\n            }\n        };\n    }\n    get chainId() {\n        return this.manualChainId || this.providerChainId;\n    }\n    async checkConnection(retryTimeout = 4000) {\n        if (this.checkConnectionRunning || this.connected) return;\n        clearTimeout(this.checkConnectionTimer);\n        this.checkConnectionTimer = undefined;\n        this.checkConnectionRunning = true;\n        try {\n            this.networkVersion = await this.doSend(\"net_version\", [], undefined, false);\n            this.providerChainId = await this.doSend(\"eth_chainId\", [], undefined, false);\n            this.connected = true;\n        } catch (e) {\n            this.checkConnectionTimer = setTimeout(()=>this.checkConnection(), retryTimeout);\n            this.connected = false;\n        } finally{\n            this.checkConnectionRunning = false;\n            if (this.connected) {\n                this.emit(\"connect\", {\n                    chainId: this.providerChainId\n                });\n            }\n        }\n    }\n    attemptedSubscription(event) {\n        return this.attemptedSubscriptions.has(event);\n    }\n    setSubscriptionAttempted(event) {\n        this.attemptedSubscriptions.add(event);\n    }\n    async startSubscription(event) {\n        console.debug(`starting subscription for ${event} events`);\n        this.setSubscriptionAttempted(event);\n        try {\n            const eventId = await this.subscribe(\"eth_subscribe\", event);\n            this.on(eventId, this.eventHandlers[event]);\n        } catch (e) {\n            console.warn(`Unable to subscribe to ${event}`, e);\n        }\n    }\n    resumeSubscriptions() {\n        Object.keys(this.eventHandlers).forEach((event)=>{\n            if (this.listenerCount(event) && !this.attemptedSubscription(event)) this.startSubscription(event);\n        });\n    }\n    async enable() {\n        const accounts = await this.doSend(\"eth_accounts\");\n        if (accounts.length > 0) {\n            this.accounts = accounts;\n            this.selectedAddress = accounts[0];\n            this.coinbase = accounts[0];\n            this.emit(\"enable\");\n            return accounts;\n        } else {\n            const err = new Error(\"User Denied Full Provider\");\n            err.code = \"4001\";\n            throw err;\n        }\n    }\n    doSend(rawPayload, rawParams = [], targetChain = this.manualChainId, waitForConnection = true) {\n        const sendFn = (resolve, reject)=>{\n            const method = typeof rawPayload === \"object\" ? rawPayload.method : rawPayload;\n            const params = typeof rawPayload === \"object\" ? rawPayload.params : rawParams;\n            const chainTarget = typeof rawPayload === \"object\" && rawPayload.chainId || targetChain;\n            if (!method) {\n                return reject(new Error(\"Method is not a valid string.\"));\n            }\n            try {\n                const payload = (0, payload_1.create)(method, params, this.nextId++, chainTarget);\n                this.promises[payload.id] = {\n                    resolve: (result)=>resolve(result),\n                    reject,\n                    method: payload.method\n                };\n                this.connection.send(payload);\n            } catch (e) {\n                reject(e);\n            }\n        };\n        if (this.connected || !waitForConnection) {\n            return new Promise(sendFn);\n        }\n        return new Promise((resolve, reject)=>{\n            const resolveSend = ()=>{\n                clearTimeout(disconnectTimer);\n                return resolve(new Promise(sendFn));\n            };\n            const disconnectTimer = setTimeout(()=>{\n                this.off(\"connect\", resolveSend);\n                reject(new Error(\"Not connected\"));\n            }, 5000);\n            this.once(\"connect\", resolveSend);\n        });\n    }\n    async send(methodOrPayload, callbackOrArgs) {\n        if (typeof methodOrPayload === \"string\" && (!callbackOrArgs || Array.isArray(callbackOrArgs))) {\n            const params = callbackOrArgs;\n            return this.doSend(methodOrPayload, params);\n        }\n        if (methodOrPayload && typeof methodOrPayload === \"object\" && typeof callbackOrArgs === \"function\") {\n            // a callback was passed to send(), forward everything to sendAsync()\n            const cb = callbackOrArgs;\n            return this.sendAsync(methodOrPayload, cb);\n        }\n        return this.request(methodOrPayload);\n    }\n    sendBatch(requests) {\n        return Promise.all(requests.map((payload)=>{\n            return this.doSend(payload.method, payload.params);\n        }));\n    }\n    async subscribe(type, method, params = []) {\n        const id = await this.doSend(type, [\n            method,\n            ...params\n        ]);\n        this.subscriptions.push(id);\n        return id;\n    }\n    async unsubscribe(type, id) {\n        const success = await this.doSend(type, [\n            id\n        ]);\n        if (success) {\n            this.subscriptions = this.subscriptions.filter((_id)=>_id !== id); // Remove subscription\n            this.removeAllListeners(id); // Remove listeners\n            return success;\n        }\n    }\n    async sendAsync(rawPayload, cb) {\n        if (!cb || typeof cb !== \"function\") return new Error(\"Invalid or undefined callback provided to sendAsync\");\n        if (!rawPayload) return cb(new Error(\"Invalid Payload\"));\n        // sendAsync can be called with an array for batch requests used by web3.js 0.x\n        // this is not part of EIP-1193's backwards compatibility but we still want to support it\n        if (Array.isArray(rawPayload)) {\n            const payloads = rawPayload.map((p)=>({\n                    ...p,\n                    jsonrpc: \"2.0\"\n                }));\n            const callback = cb;\n            return this.sendAsyncBatch(payloads, callback);\n        } else {\n            const payload = {\n                ...rawPayload,\n                jsonrpc: \"2.0\"\n            };\n            const callback = cb;\n            try {\n                const result = await this.doSend(payload.method, payload.params);\n                callback(null, {\n                    id: payload.id,\n                    jsonrpc: payload.jsonrpc,\n                    result\n                });\n            } catch (e) {\n                callback(e);\n            }\n        }\n    }\n    async sendAsyncBatch(payloads, cb) {\n        try {\n            const results = await this.sendBatch(payloads);\n            const result = results.map((entry, index)=>{\n                return {\n                    id: payloads[index].id,\n                    jsonrpc: payloads[index].jsonrpc,\n                    result: entry\n                };\n            });\n            cb(null, result);\n        } catch (e) {\n            cb(e);\n        }\n    }\n    isConnected() {\n        return this.connected;\n    }\n    close() {\n        if (this.connection && this.connection.close) this.connection.close();\n        this.off(\"connect\", this.resumeSubscriptions);\n        this.connected = false;\n        const error = new Error(\"Provider closed, subscription lost, please subscribe again.\");\n        this.subscriptions.forEach((id)=>this.emit(id, error)); // Send Error objects to any open subscriptions\n        this.subscriptions = []; // Clear subscriptions\n        this.manualChainId = undefined;\n        this.providerChainId = undefined;\n        this.networkVersion = undefined;\n        this.selectedAddress = undefined;\n        this.coinbase = undefined;\n    }\n    async request(payload) {\n        return this.doSend(payload.method, payload.params, payload.chainId);\n    }\n    setChain(chainId) {\n        if (typeof chainId === \"number\") chainId = \"0x\" + chainId.toString(16);\n        const chainChanged = chainId !== this.chainId;\n        this.manualChainId = chainId;\n        if (chainChanged) {\n            this.emit(\"chainChanged\", this.chainId);\n        }\n    }\n}\nexports[\"default\"] = Provider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereum-provider/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereum-provider/dist/payload.js":
/*!********************************************************!*\
  !*** ./node_modules/ethereum-provider/dist/payload.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.create = void 0;\nfunction create(method, params = [], id, targetChain) {\n    const payload = {\n        id,\n        method,\n        params,\n        jsonrpc: \"2.0\"\n    };\n    if (targetChain) {\n        payload.chainId = targetChain;\n    }\n    if (payload.method === \"eth_sendTransaction\") {\n        const mismatchedChain = isChainMismatch(payload);\n        if (mismatchedChain) {\n            throw new Error(`Payload chainId (${mismatchedChain}) inconsistent with specified target chainId: ${targetChain}`);\n        }\n        return updatePayloadChain(payload);\n    }\n    return payload;\n}\nexports.create = create;\nfunction isChainMismatch(payload) {\n    if (payload.method !== \"eth_sendTransaction\") return false;\n    const tx = payload.params[0] || {};\n    const chainId = tx.chainId;\n    return \"chainId\" in tx && parseInt(chainId) !== parseInt(payload.chainId || chainId);\n}\nfunction updatePayloadChain(payload) {\n    const tx = payload.params[0] || {};\n    return {\n        ...payload,\n        params: [\n            {\n                ...tx,\n                chainId: tx.chainId || payload.chainId\n            },\n            ...payload.params.slice(1)\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW0tcHJvdmlkZXIvZGlzdC9wYXlsb2FkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QixTQUFTRSxPQUFPQyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxFQUFFQyxFQUFFLEVBQUVDLFdBQVc7SUFDaEQsTUFBTUMsVUFBVTtRQUNaRjtRQUFJRjtRQUFRQztRQUFRSSxTQUFTO0lBQ2pDO0lBQ0EsSUFBSUYsYUFBYTtRQUNiQyxRQUFRRSxPQUFPLEdBQUdIO0lBQ3RCO0lBQ0EsSUFBSUMsUUFBUUosTUFBTSxLQUFLLHVCQUF1QjtRQUMxQyxNQUFNTyxrQkFBa0JDLGdCQUFnQko7UUFDeEMsSUFBSUcsaUJBQWlCO1lBQ2pCLE1BQU0sSUFBSUUsTUFBTSxDQUFDLGlCQUFpQixFQUFFRixnQkFBZ0IsOENBQThDLEVBQUVKLFlBQVksQ0FBQztRQUNySDtRQUNBLE9BQU9PLG1CQUFtQk47SUFDOUI7SUFDQSxPQUFPQTtBQUNYO0FBQ0FQLGNBQWMsR0FBR0U7QUFDakIsU0FBU1MsZ0JBQWdCSixPQUFPO0lBQzVCLElBQUlBLFFBQVFKLE1BQU0sS0FBSyx1QkFDbkIsT0FBTztJQUNYLE1BQU1XLEtBQUtQLFFBQVFILE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQztJQUNqQyxNQUFNSyxVQUFVSyxHQUFHTCxPQUFPO0lBQzFCLE9BQU8sYUFBY0ssTUFBT0MsU0FBU04sYUFBYU0sU0FBU1IsUUFBUUUsT0FBTyxJQUFJQTtBQUNsRjtBQUNBLFNBQVNJLG1CQUFtQk4sT0FBTztJQUMvQixNQUFNTyxLQUFLUCxRQUFRSCxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUM7SUFDakMsT0FBTztRQUFFLEdBQUdHLE9BQU87UUFBRUgsUUFBUTtZQUFDO2dCQUFFLEdBQUdVLEVBQUU7Z0JBQUVMLFNBQVNLLEdBQUdMLE9BQU8sSUFBSUYsUUFBUUUsT0FBTztZQUFDO2VBQU1GLFFBQVFILE1BQU0sQ0FBQ1ksS0FBSyxDQUFDO1NBQUc7SUFBQztBQUNqSCIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bS1wcm92aWRlci9kaXN0L3BheWxvYWQuanM/MGNjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlID0gdm9pZCAwO1xuZnVuY3Rpb24gY3JlYXRlKG1ldGhvZCwgcGFyYW1zID0gW10sIGlkLCB0YXJnZXRDaGFpbikge1xuICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgIGlkLCBtZXRob2QsIHBhcmFtcywganNvbnJwYzogJzIuMCdcbiAgICB9O1xuICAgIGlmICh0YXJnZXRDaGFpbikge1xuICAgICAgICBwYXlsb2FkLmNoYWluSWQgPSB0YXJnZXRDaGFpbjtcbiAgICB9XG4gICAgaWYgKHBheWxvYWQubWV0aG9kID09PSAnZXRoX3NlbmRUcmFuc2FjdGlvbicpIHtcbiAgICAgICAgY29uc3QgbWlzbWF0Y2hlZENoYWluID0gaXNDaGFpbk1pc21hdGNoKHBheWxvYWQpO1xuICAgICAgICBpZiAobWlzbWF0Y2hlZENoYWluKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBheWxvYWQgY2hhaW5JZCAoJHttaXNtYXRjaGVkQ2hhaW59KSBpbmNvbnNpc3RlbnQgd2l0aCBzcGVjaWZpZWQgdGFyZ2V0IGNoYWluSWQ6ICR7dGFyZ2V0Q2hhaW59YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVwZGF0ZVBheWxvYWRDaGFpbihwYXlsb2FkKTtcbiAgICB9XG4gICAgcmV0dXJuIHBheWxvYWQ7XG59XG5leHBvcnRzLmNyZWF0ZSA9IGNyZWF0ZTtcbmZ1bmN0aW9uIGlzQ2hhaW5NaXNtYXRjaChwYXlsb2FkKSB7XG4gICAgaWYgKHBheWxvYWQubWV0aG9kICE9PSAnZXRoX3NlbmRUcmFuc2FjdGlvbicpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCB0eCA9IHBheWxvYWQucGFyYW1zWzBdIHx8IHt9O1xuICAgIGNvbnN0IGNoYWluSWQgPSB0eC5jaGFpbklkO1xuICAgIHJldHVybiAoJ2NoYWluSWQnIGluIHR4KSAmJiBwYXJzZUludChjaGFpbklkKSAhPT0gcGFyc2VJbnQocGF5bG9hZC5jaGFpbklkIHx8IGNoYWluSWQpO1xufVxuZnVuY3Rpb24gdXBkYXRlUGF5bG9hZENoYWluKHBheWxvYWQpIHtcbiAgICBjb25zdCB0eCA9IHBheWxvYWQucGFyYW1zWzBdIHx8IHt9O1xuICAgIHJldHVybiB7IC4uLnBheWxvYWQsIHBhcmFtczogW3sgLi4udHgsIGNoYWluSWQ6IHR4LmNoYWluSWQgfHwgcGF5bG9hZC5jaGFpbklkIH0sIC4uLnBheWxvYWQucGFyYW1zLnNsaWNlKDEpXSB9O1xufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlIiwibWV0aG9kIiwicGFyYW1zIiwiaWQiLCJ0YXJnZXRDaGFpbiIsInBheWxvYWQiLCJqc29ucnBjIiwiY2hhaW5JZCIsIm1pc21hdGNoZWRDaGFpbiIsImlzQ2hhaW5NaXNtYXRjaCIsIkVycm9yIiwidXBkYXRlUGF5bG9hZENoYWluIiwidHgiLCJwYXJzZUludCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereum-provider/dist/payload.js\n");

/***/ })

};
;