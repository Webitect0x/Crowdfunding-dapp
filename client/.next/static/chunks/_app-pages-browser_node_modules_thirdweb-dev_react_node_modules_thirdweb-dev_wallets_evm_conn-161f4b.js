"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb-dev_react_node_modules_thirdweb-dev_wallets_evm_conn-161f4b"],{

/***/ "(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-30be9c09.browser.esm.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-30be9c09.browser.esm.js ***!
  \**************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: function() { return /* binding */ AUTH_TOKEN_LOCAL_STORAGE_NAME; },\n/* harmony export */   D: function() { return /* binding */ DEVICE_SHARE_LOCAL_STORAGE_NAME; },\n/* harmony export */   E: function() { return /* binding */ EmbeddedWalletSdk; },\n/* harmony export */   R: function() { return /* binding */ RecoveryShareManagement; },\n/* harmony export */   U: function() { return /* binding */ UserWalletStatus; },\n/* harmony export */   W: function() { return /* binding */ WALLET_USER_DETAILS_LOCAL_STORAGE_NAME; },\n/* harmony export */   a: function() { return /* binding */ DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED; },\n/* harmony export */   b: function() { return /* binding */ WALLET_USER_ID_LOCAL_STORAGE_NAME; },\n/* harmony export */   c: function() { return /* binding */ AuthProvider; }\n/* harmony export */ });\n/* harmony import */ var _paperxyz_sdk_common_utilities__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @paperxyz/sdk-common-utilities */ \"(app-pages-browser)/./node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs\");\n/* harmony import */ var _defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defineProperty-c8ecdc07.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/defineProperty-c8ecdc07.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/abstract-signer/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/providers/lib.esm/index.js\");\n/* harmony import */ var ethers_lib_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers/lib/utils */ \"(app-pages-browser)/./node_modules/ethers/lib/utils.js\");\n/* harmony import */ var ethers_lib_utils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ethers_lib_utils__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nconst EMBEDDED_WALLET_PATH = \"/sdk/2022-08-12/embedded-wallet\";\nconst GET_IFRAME_BASE_URL = () => `${(0,_paperxyz_sdk_common_utilities__WEBPACK_IMPORTED_MODULE_0__.getPaperOriginUrl)().replace(\"withpaper.com\", \"embedded-wallet.thirdweb.com\")}`;\nconst WALLET_USER_DETAILS_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserDetails-${clientId}`;\nconst WALLET_USER_ID_LOCAL_STORAGE_NAME = clientId => `thirdwebEwsWalletUserId-${clientId}`;\nconst AUTH_TOKEN_LOCAL_STORAGE_PREFIX = \"walletToken\";\nconst AUTH_TOKEN_LOCAL_STORAGE_NAME = clientId => {\n  return `${AUTH_TOKEN_LOCAL_STORAGE_PREFIX}-${clientId}`;\n};\nconst DEVICE_SHARE_LOCAL_STORAGE_PREFIX = \"a\";\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME = (clientId, userId) => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}-${userId}`;\nconst DEVICE_SHARE_LOCAL_STORAGE_NAME_DEPRECATED = clientId => `${DEVICE_SHARE_LOCAL_STORAGE_PREFIX}-${clientId}`;\n\nlet RecoveryShareManagement = /*#__PURE__*/function (RecoveryShareManagement) {\n  RecoveryShareManagement[\"USER_MANAGED\"] = \"USER_MANAGED\";\n  RecoveryShareManagement[\"CLOUD_MANAGED\"] = \"AWS_MANAGED\";\n  return RecoveryShareManagement;\n}({});\nlet AuthProvider = /*#__PURE__*/function (AuthProvider) {\n  AuthProvider[\"COGNITO\"] = \"Cognito\";\n  AuthProvider[\"GOOGLE\"] = \"Google\";\n  AuthProvider[\"EMAIL_OTP\"] = \"EmailOtp\";\n  AuthProvider[\"CUSTOM_JWT\"] = \"CustomJWT\";\n  AuthProvider[\"FACEBOOK\"] = \"Facebook\";\n  AuthProvider[\"APPLE\"] = \"Apple\";\n  return AuthProvider;\n}({});\n\n// TODO: Clean up tech debt of random type Objects\n// E.g. StoredTokenType is really not used anywhere but it exists as this object for legacy reason\n\n// Class constructor types\n// types for class constructors still a little messy right now.\n// Open to PRs from whoever sees this and knows of a cleaner way to handle things\n// Auth Types\n// Embedded Wallet Types\nlet UserWalletStatus = /*#__PURE__*/function (UserWalletStatus) {\n  UserWalletStatus[\"LOGGED_OUT\"] = \"Logged Out\";\n  UserWalletStatus[\"LOGGED_IN_WALLET_UNINITIALIZED\"] = \"Logged In, Wallet Uninitialized\";\n  UserWalletStatus[\"LOGGED_IN_NEW_DEVICE\"] = \"Logged In, New Device\";\n  UserWalletStatus[\"LOGGED_IN_WALLET_INITIALIZED\"] = \"Logged In, Wallet Initialized\";\n  return UserWalletStatus;\n}({});\n\n// ! Types seem repetitive, but the name should identify which goes where\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method iframe call\n// this is the return type from the EmbeddedWallet Class getUserWalletStatus method\n\nconst data = new Map();\nclass LocalStorage {\n  constructor(_ref) {\n    let {\n      clientId\n    } = _ref;\n    this.isSupported = !!window.localStorage;\n    this.clientId = clientId;\n  }\n  async getItem(key) {\n    if (this.isSupported) {\n      return window.localStorage.getItem(key);\n    } else {\n      return data.get(key) ?? null;\n    }\n  }\n  async setItem(key, value) {\n    if (this.isSupported) {\n      return window.localStorage.setItem(key, value);\n    } else {\n      data.set(key, value);\n    }\n  }\n  async removeItem(key) {\n    const item = await this.getItem(key);\n    if (this.isSupported && item) {\n      window.localStorage.removeItem(key);\n      return true;\n    }\n    return false;\n  }\n  async saveAuthCookie(cookie) {\n    await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);\n  }\n  async getAuthCookie() {\n    return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async removeAuthCookie() {\n    return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveDeviceShare(share, userId) {\n    await this.saveWalletUserId(userId);\n    await this.setItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId), share);\n  }\n  async getDeviceShare() {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.getItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\n    }\n    return null;\n  }\n  async removeDeviceShare() {\n    const userId = await this.getWalletUserId();\n    if (userId) {\n      return this.removeItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));\n    }\n    return false;\n  }\n  async getWalletUserId() {\n    return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n  async saveWalletUserId(userId) {\n    await this.setItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId), userId);\n  }\n  async removeWalletUserId() {\n    return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));\n  }\n}\n\nfunction sleep(seconds) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\nconst iframeBaseStyle = {\n  height: \"100%\",\n  width: \"100%\",\n  border: \"none\",\n  backgroundColor: \"transparent\",\n  colorScheme: \"light\",\n  position: \"fixed\",\n  top: \"0px\",\n  right: \"0px\",\n  zIndex: \"2147483646\",\n  display: \"none\"\n};\n\n// Global var to help track iframe state\nconst isIframeLoaded = new Map();\nclass IframeCommunicator {\n  constructor(_ref) {\n    let {\n      link,\n      iframeId,\n      container = document.body,\n      iframeStyles,\n      onIframeInitialize\n    } = _ref;\n    (0,_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__._)(this, \"POLLING_INTERVAL_SECONDS\", 1.4);\n    this.iframeBaseUrl = GET_IFRAME_BASE_URL();\n\n    // Creating the IFrame element for communication\n    let iframe = document.getElementById(iframeId);\n    const hrefLink = new URL(link);\n    const sdkVersion = \"2.1.9\";\n    hrefLink.searchParams.set(\"sdkVersion\", sdkVersion);\n    if (!iframe || iframe.src !== hrefLink.href) {\n      // ! Do not update the hrefLink here or it'll cause multiple re-renders\n      if (!iframe) {\n        iframe = document.createElement(\"iframe\");\n        const mergedIframeStyles = {\n          ...iframeBaseStyle,\n          ...iframeStyles\n        };\n        Object.assign(iframe.style, mergedIframeStyles);\n        iframe.setAttribute(\"id\", iframeId);\n        iframe.setAttribute(\"fetchpriority\", \"high\");\n        container.appendChild(iframe);\n      }\n      iframe.src = hrefLink.href;\n      iframe.setAttribute(\"data-version\", sdkVersion);\n      const onIframeLoaded = event => {\n        if (event.data.eventType === \"ewsIframeLoaded\") {\n          window.removeEventListener(\"message\", onIframeLoaded);\n          if (!iframe) {\n            console.warn(\"thirdweb Iframe not found\");\n            return;\n          }\n          this.onIframeLoadHandler(iframe, onIframeInitialize)();\n        }\n      };\n      window.addEventListener(\"message\", onIframeLoaded);\n    }\n    this.iframe = iframe;\n  }\n  async onIframeLoadedInitVariables() {\n    return {};\n  }\n  onIframeLoadHandler(iframe, onIframeInitialize) {\n    return async () => {\n      const promise = new Promise(async (res, rej) => {\n        const channel = new MessageChannel();\n        channel.port1.onmessage = event => {\n          const {\n            data\n          } = event;\n          channel.port1.close();\n          if (!data.success) {\n            return rej(new Error(data.error));\n          }\n          isIframeLoaded.set(iframe.src, true);\n          if (onIframeInitialize) {\n            onIframeInitialize();\n          }\n          return res(true);\n        };\n        const INIT_IFRAME_EVENT = \"initIframe\";\n        iframe?.contentWindow?.postMessage(\n        // ? We initialise the iframe with a bunch\n        // of useful information so that we don't have to pass it\n        // through in each of the future call. This would be where we do it.\n        {\n          eventType: INIT_IFRAME_EVENT,\n          data: await this.onIframeLoadedInitVariables()\n        }, this.iframeBaseUrl, [channel.port2]);\n      });\n      await promise;\n    };\n  }\n  async call(_ref2) {\n    let {\n      procedureName,\n      params,\n      showIframe = false\n    } = _ref2;\n    while (!isIframeLoaded.get(this.iframe.src)) {\n      await sleep(this.POLLING_INTERVAL_SECONDS);\n    }\n    if (showIframe) {\n      this.iframe.style.display = \"block\";\n      // magic number to let the display render before performing the animation of the modal in\n      await sleep(0.005);\n    }\n    const promise = new Promise((res, rej) => {\n      const channel = new MessageChannel();\n      channel.port1.onmessage = async event => {\n        const {\n          data\n        } = event;\n        channel.port1.close();\n        if (showIframe) {\n          // magic number to let modal fade out before hiding it\n          await sleep(0.1);\n          this.iframe.style.display = \"none\";\n        }\n        if (!data.success) {\n          rej(new Error(data.error));\n        } else {\n          res(data.data);\n        }\n      };\n      this.iframe.contentWindow?.postMessage({\n        eventType: procedureName,\n        data: params\n      }, this.iframeBaseUrl, [channel.port2]);\n    });\n    return promise;\n  }\n\n  /**\n   * This has to be called by any iframe that will be removed from the DOM.\n   * Use to make sure that we reset the global loaded state of the particular iframe.src\n   */\n  destroy() {\n    isIframeLoaded.delete(this.iframe.src);\n  }\n}\n\nclass EmbeddedWalletIframeCommunicator extends IframeCommunicator {\n  constructor(_ref) {\n    let {\n      clientId,\n      customizationOptions\n    } = _ref;\n    super({\n      iframeId: EMBEDDED_WALLET_IFRAME_ID,\n      link: createEmbeddedWalletIframeLink({\n        clientId,\n        path: EMBEDDED_WALLET_PATH,\n        queryParams: customizationOptions\n      }).href,\n      container: document.body\n    });\n    this.clientId = clientId;\n  }\n  async onIframeLoadedInitVariables() {\n    const localStorage = new LocalStorage({\n      clientId: this.clientId\n    });\n    return {\n      authCookie: await localStorage.getAuthCookie(),\n      deviceShareStored: await localStorage.getDeviceShare(),\n      walletUserId: await localStorage.getWalletUserId(),\n      clientId: this.clientId\n    };\n  }\n}\n\n// This is the URL and ID tag of the iFrame that we communicate with\nfunction createEmbeddedWalletIframeLink(_ref2) {\n  let {\n    clientId,\n    path,\n    queryParams\n  } = _ref2;\n  const embeddedWalletUrl = new URL(`${path}`, GET_IFRAME_BASE_URL());\n  if (queryParams) {\n    for (const queryKey of Object.keys(queryParams)) {\n      embeddedWalletUrl.searchParams.set(queryKey, queryParams[queryKey]?.toString() || \"\");\n    }\n  }\n  embeddedWalletUrl.searchParams.set(\"clientId\", clientId);\n  return embeddedWalletUrl;\n}\nconst EMBEDDED_WALLET_IFRAME_ID = \"thirdweb-embedded-wallet-iframe\";\n\nclass AbstractLogin {\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link EmbeddedWalletSdk.auth} instead.\n   *\n   */\n  constructor(_ref) {\n    let {\n      querier,\n      preLogin,\n      postLogin,\n      clientId\n    } = _ref;\n    this.LoginQuerier = querier;\n    this.preLogin = preLogin;\n    this.postLogin = postLogin;\n    this.clientId = clientId;\n  }\n  async sendEmailLoginOtp(_ref2) {\n    let {\n      email\n    } = _ref2;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"sendThirdwebEmailLoginOtp\",\n      params: {\n        email\n      }\n    });\n    return result;\n  }\n}\n\nclass BaseLogin extends AbstractLogin {\n  constructor() {\n    super(...arguments);\n    (0,_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__._)(this, \"closeWindow\", _ref => {\n      let {\n        isWindowOpenedByFn,\n        win,\n        closeOpenedWindow\n      } = _ref;\n      if (isWindowOpenedByFn) {\n        win?.close();\n      } else {\n        if (win && closeOpenedWindow) {\n          closeOpenedWindow(win);\n        } else if (win) {\n          win.close();\n        }\n      }\n    });\n  }\n  async getOauthLoginUrl(authProvider) {\n    const result = await this.LoginQuerier.call({\n      procedureName: \"getHeadlessOauthLoginLink\",\n      params: {\n        authProvider\n      }\n    });\n    return result;\n  }\n  async loginWithModal() {\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: undefined,\n      showIframe: true\n    });\n    return this.postLogin(result);\n  }\n  async loginWithEmailOtp(_ref2) {\n    let {\n      email\n    } = _ref2;\n    await this.preLogin();\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithThirdwebModal\",\n      params: {\n        email\n      },\n      showIframe: true\n    });\n    return this.postLogin(result);\n  }\n  getOauthPopUpSizing(authProvider) {\n    switch (authProvider) {\n      case AuthProvider.FACEBOOK:\n        return \"width=715, height=555\";\n      default:\n        return \"width=350, height=500\";\n    }\n  }\n  async loginWithOauth(args) {\n    let win = args?.openedWindow;\n    let isWindowOpenedByFn = false;\n    if (!win) {\n      win = window.open(\"\", \"Login\", this.getOauthPopUpSizing(args.oauthProvider));\n      isWindowOpenedByFn = true;\n    }\n    if (!win) {\n      throw new Error(\"Something went wrong opening pop-up\");\n    }\n    // logout the user\n    // fetch the url to open the login window from iframe\n    const [{\n      loginLink\n    }] = await Promise.all([this.getOauthLoginUrl(args.oauthProvider), this.preLogin()]);\n    win.location.href = loginLink;\n    // listen to result from the login window\n    const result = await new Promise((resolve, reject) => {\n      // detect when the user closes the login window\n      const pollTimer = window.setInterval(async () => {\n        if (!win) {\n          return;\n        }\n        if (win.closed) {\n          clearInterval(pollTimer);\n          window.removeEventListener(\"message\", messageListener);\n          reject(new Error(\"User closed login window\"));\n        }\n      }, 1000);\n      const messageListener = async event => {\n        if (event.origin !== GET_IFRAME_BASE_URL()) {\n          return;\n        }\n        if (typeof event.data !== \"object\") {\n          reject(new Error(\"Invalid event data\"));\n          return;\n        }\n        switch (event.data.eventType) {\n          case \"userLoginSuccess\":\n            {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow\n              });\n              if (event.data.authResult) {\n                resolve(event.data.authResult);\n              }\n              break;\n            }\n          case \"userLoginFailed\":\n            {\n              window.removeEventListener(\"message\", messageListener);\n              clearInterval(pollTimer);\n              this.closeWindow({\n                isWindowOpenedByFn,\n                win,\n                closeOpenedWindow: args?.closeOpenedWindow\n              });\n              reject(new Error(event.data.error));\n              break;\n            }\n          case \"injectDeveloperClientId\":\n            {\n              win?.postMessage({\n                eventType: \"injectDeveloperClientIdResult\",\n                developerClientId: this.clientId,\n                authOption: args.oauthProvider\n              }, GET_IFRAME_BASE_URL());\n              break;\n            }\n        }\n      };\n      window.addEventListener(\"message\", messageListener);\n    });\n    return this.postLogin({\n      storedToken: {\n        ...result.storedToken,\n        shouldStoreCookieString: true\n      },\n      walletDetails: {\n        ...result.walletDetails,\n        isIframeStorageEnabled: false\n      }\n    });\n  }\n  async loginWithCustomJwt(_ref3) {\n    let {\n      encryptionKey,\n      jwt\n    } = _ref3;\n    const result = await this.LoginQuerier.call({\n      procedureName: \"loginWithCustomJwt\",\n      params: {\n        encryptionKey,\n        jwt\n      }\n    });\n    return this.postLogin(result);\n  }\n  async verifyEmailLoginOtp(_ref4) {\n    let {\n      email,\n      otp,\n      recoveryCode\n    } = _ref4;\n    const result = await this.LoginQuerier.call({\n      procedureName: \"verifyThirdwebEmailLoginOtp\",\n      params: {\n        email,\n        otp,\n        recoveryCode\n      }\n    });\n    return this.postLogin(result);\n  }\n}\n\nclass Auth {\n  /**\n   * Used to manage the user's auth states. This should not be instantiated directly.\n   * Call {@link EmbeddedWalletSdk.auth} instead.\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      querier,\n      onAuthSuccess\n    } = _ref;\n    this.clientId = clientId;\n    this.AuthQuerier = querier;\n    this.localStorage = new LocalStorage({\n      clientId\n    });\n    this.onAuthSuccess = onAuthSuccess;\n    this.BaseLogin = new BaseLogin({\n      postLogin: async result => {\n        return this.postLogin(result);\n      },\n      preLogin: async () => {\n        await this.preLogin();\n      },\n      querier: querier,\n      clientId\n    });\n  }\n  async preLogin() {\n    await this.logout();\n  }\n  async postLogin(_ref2) {\n    let {\n      storedToken,\n      walletDetails\n    } = _ref2;\n    if (storedToken.shouldStoreCookieString) {\n      await this.localStorage.saveAuthCookie(storedToken.cookieString);\n    }\n    const initializedUser = await this.onAuthSuccess({\n      storedToken,\n      walletDetails\n    });\n    return initializedUser;\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet on your platform via a myriad of auth providers\n   *\n   * @example\n   * ```typescript\n   * const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"YOUR_CLIENT_ID\", chain: \"Polygon\"})\n   * try {\n   *   const user = await thirdwebEmbeddedWallet.auth.loginWithModal();\n   *   // user is now logged in\n   * } catch (e) {\n   *   // User closed modal or something else went wrong during the authentication process\n   *   console.error(e)\n   * }\n   * ```\n   *\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithModal() {\n    await this.preLogin();\n    return this.BaseLogin.loginWithModal();\n  }\n\n  /**\n   * Used to log the user into their thirdweb wallet using email OTP\n   *\n   * @example\n   * ```typescript\n   *  // Basic Flow\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  try {\n   *    // prompts user to enter the code they received\n   *    const user = await thirdwebEmbeddedWallet.auth.loginWithThirdwebEmailOtp({ email : \"you@example.com\" });\n   *    // user is now logged in\n   *  } catch (e) {\n   *    // User closed the OTP modal or something else went wrong during the authentication process\n   *    console.error(e)\n   *  }\n   * ```\n   *\n   * @param args - args.email: We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{user: InitializedUser}}` An InitializedUser object. See {@link EmbeddedWalletSdk.getUser} for more\n   */\n  async loginWithEmailOtp(args) {\n    return this.BaseLogin.loginWithEmailOtp(args);\n  }\n  async loginWithCustomJwt(args) {\n    return this.BaseLogin.loginWithCustomJwt(args);\n  }\n  async loginWithOauth(args) {\n    return this.BaseLogin.loginWithOauth(args);\n  }\n\n  /**\n   * A headless way to send the users at the passed email an OTP code.\n   * You need to then call {@link Auth.verifyEmailLoginOtp} in order to complete the login process\n   *\n   * @example\n   * ```typescript\n   *  const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   *  // sends user an OTP code\n   * try {\n   *    await thirdwebEmbeddedWallet.auth.sendEmailLoginOtp({ email : \"you@example.com\" });\n   * } catch(e) {\n   *    // Error Sending user's email an OTP code\n   *    console.error(e);\n   * }\n   *\n   * // Then when your user is ready to verify their OTP\n   * try {\n   *    const user = await thirdwebEmbeddedWallet.auth.verifyEmailLoginOtp({ email: \"you@example.com\", otp: \"6-DIGIT_CODE_HERE\" });\n   * } catch(e) {\n   *    // Error verifying the OTP code\n   *    console.error(e)\n   * }\n   * ```\n   *\n   * @param param0 - param0.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * @returns `{{ isNewUser: boolean }}` IsNewUser indicates if the user is a new user to your platform\n   */\n  async sendEmailLoginOtp(_ref3) {\n    let {\n      email\n    } = _ref3;\n    return this.BaseLogin.sendEmailLoginOtp({\n      email\n    });\n  }\n\n  /**\n   * Used to verify the otp that the user receives from thirdweb\n   *\n   * See {@link Auth.sendEmailLoginOtp} for how the headless call flow looks like. Simply swap out the calls to `loginWithThirdwebEmailOtp` with `verifyThirdwebEmailLoginOtp`\n   *\n   * @param args - props.email We will send the email an OTP that needs to be entered in order for them to be logged in.\n   * props.otp The code that the user received in their email\n   * @returns `{{user: InitializedUser}}` An InitializedUser object containing the user's status, wallet, authDetails, and more\n   */\n  async verifyEmailLoginOtp(args) {\n    return this.BaseLogin.verifyEmailLoginOtp(args);\n  }\n\n  /**\n   * Logs any existing user out of their wallet.\n   * @returns `{{success: boolean}}` true if a user is successfully logged out. false if there's no user currently logged in.\n   */\n  async logout() {\n    const {\n      success\n    } = await this.AuthQuerier.call({\n      procedureName: \"logout\",\n      params: undefined\n    });\n    const isRemoveAuthCookie = await this.localStorage.removeAuthCookie();\n    const isRemoveUserId = await this.localStorage.removeWalletUserId();\n    return {\n      success: success || isRemoveAuthCookie || isRemoveUserId\n    };\n  }\n}\n\nclass EthersSigner extends ethers__WEBPACK_IMPORTED_MODULE_2__.Signer {\n  constructor(_ref) {\n    let {\n      provider,\n      clientId,\n      querier\n    } = _ref;\n    super();\n    (0,_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__._)(this, \"DEFAULT_ETHEREUM_CHAIN_ID\", 5);\n    this.clientId = clientId;\n    this.querier = querier;\n    // we try to extract a url if possible\n    this.endpoint = provider.connection?.url;\n    (0,ethers_lib_utils__WEBPACK_IMPORTED_MODULE_3__.defineReadOnly)(this, \"provider\", provider);\n  }\n  async getAddress() {\n    const {\n      address\n    } = await this.querier.call({\n      procedureName: \"getAddress\",\n      params: undefined\n    });\n    return address;\n  }\n  async signMessage(message) {\n    const {\n      signedMessage\n    } = await this.querier.call({\n      procedureName: \"signMessage\",\n      params: {\n        message,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedMessage;\n  }\n  async signTransaction(transaction) {\n    const {\n      signedTransaction\n    } = await this.querier.call({\n      procedureName: \"signTransaction\",\n      params: {\n        transaction,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedTransaction;\n  }\n  async _signTypedData(domain, types, message) {\n    const {\n      signedTypedData\n    } = await this.querier.call({\n      procedureName: \"signTypedDataV4\",\n      params: {\n        domain,\n        types,\n        message,\n        chainId: (await this.provider?.getNetwork())?.chainId ?? this.DEFAULT_ETHEREUM_CHAIN_ID,\n        rpcEndpoint: this.endpoint\n      }\n    });\n    return signedTypedData;\n  }\n  connect(provider) {\n    return new EthersSigner({\n      clientId: this.clientId,\n      provider,\n      querier: this.querier\n    });\n  }\n}\n\nclass EmbeddedWallet {\n  /**\n   * Not meant to be initialized directly. Call {@link initializeUser} to get an instance\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      chain,\n      querier\n    } = _ref;\n    this.clientId = clientId;\n    this.chain = chain;\n    this.walletManagerQuerier = querier;\n    this.localStorage = new LocalStorage({\n      clientId\n    });\n  }\n\n  /**\n   * @internal\n   * Used to set-up the user device in the case that they are using incognito\n   * @returns `{walletAddress : string }` The user's wallet details\n   */\n  async postWalletSetUp(_ref2) {\n    let {\n      deviceShareStored,\n      walletAddress,\n      isIframeStorageEnabled,\n      walletUserId\n    } = _ref2;\n    if (!isIframeStorageEnabled) {\n      await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);\n    }\n    return {\n      walletAddress\n    };\n  }\n\n  /**\n   * @internal\n   * Gets the various status states of the user\n   * @example\n   * ```typescript\n   *  const userStatus = await Paper.getUserWalletStatus();\n   *  switch (userStatus.status) {\n   *  case UserWalletStatus.LOGGED_OUT: {\n   *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {\n   *    // User is logged in, but does not have a wallet associated with it\n   *    // you also have access to the user's details\n   *    userStatus.user.authDetails;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {\n   *    // User is logged in and created a wallet already, but is missing the device shard\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    break;\n   *  }\n   *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *    // user is logged in and wallet is all set up.\n   *    // You have access to:\n   *    userStatus.user.authDetails;\n   *    userStatus.user.walletAddress;\n   *    userStatus.user.wallet;\n   *    break;\n   *  }\n   *}\n   *```\n   * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses\n   */\n  async getUserWalletStatus() {\n    const userStatus = await this.walletManagerQuerier.call({\n      procedureName: \"getUserStatus\",\n      params: undefined\n    });\n    if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n        ...userStatus.user,\n        wallet: this\n      };\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_NEW_DEVICE) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n        ...userStatus.user\n      };\n    } else if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {\n      return {\n        status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,\n        ...userStatus.user\n      };\n    } else {\n      // Logged out\n      return {\n        status: userStatus.status\n      };\n    }\n  }\n\n  /**\n   * Switches the chain that the user wallet is currently on.\n   *\n   * @example\n   * ```typescript\n   * // user wallet will be set to Polygon\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.initializeUser();\n   * // Switch the user wallet to Mumbai\n   * await user.wallet.setChain({ chain: \"Mumbai\" });\n   * ```\n   * @param param0 - The chain that we are changing the user wallet too\n   */\n  async setChain(_ref3) {\n    let {\n      chain\n    } = _ref3;\n    this.chain = chain;\n  }\n\n  /**\n   * Returns an Ethers.Js compatible signer that you can use in conjunction with the rest of dApp\n   * @example\n   * ```typescript\n   * const Paper = new ThirdwebEmbeddedWalletSdk({clientId: \"\", chain: \"Polygon\"});\n   * const user = await Paper.getUser();\n   * if (user.status === UserStatus.LOGGED_IN_WALLET_INITIALIZED) {\n   *    // returns a signer on the Polygon mainnet\n   *    const signer = await user.getEthersJsSigner();\n   *    // returns a signer on the specified RPC endpoints\n   *    const signer = await user.getEthersJsSigner({rpcEndpoint: \"https://eth-rpc.gateway.pokt.network\"});\n   * }\n   * ```\n   * @param network - object with the rpc url where calls will be routed through\n   * @throws If attempting to call the function without the user wallet initialize on their current device. This should never happen if call {@link ThirdwebEmbeddedWalletSdk.initializeUser} before accessing this function\n   * @returns A signer that is compatible with Ether.js. Defaults to the public rpc on the chain specified when initializing the {@link ThirdwebEmbeddedWalletSdk} instance\n   */\n  async getEthersJsSigner(network) {\n    const signer = new EthersSigner({\n      clientId: this.clientId,\n      provider: (0,ethers__WEBPACK_IMPORTED_MODULE_4__.getDefaultProvider)(network?.rpcEndpoint ?? _paperxyz_sdk_common_utilities__WEBPACK_IMPORTED_MODULE_0__.ChainToPublicRpc[this.chain]),\n      querier: this.walletManagerQuerier\n    });\n    return signer;\n  }\n}\n\nclass EmbeddedWalletSdk {\n  /**\n   * Used to manage the Auth state of the user.\n   */\n\n  isClientIdLegacyPaper(clientId) {\n    if (clientId.indexOf(\"-\") > 0 && clientId.length === 36) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @example\n   * `const thirdwebEmbeddedWallet = new EmbeddedWalletSdk({ clientId: \"\", chain: \"Goerli\" });`\n   * @param param0 - EmbeddedWalletConstructorType\n   */\n  constructor(_ref) {\n    let {\n      clientId,\n      chain,\n      styles,\n      onAuthSuccess\n    } = _ref;\n    if (this.isClientIdLegacyPaper(clientId)) {\n      throw new Error(\"You are using a legacy clientId. Please use the clientId found on the thirdweb dashboard settings page\");\n    }\n    this.clientId = clientId;\n    this.querier = new EmbeddedWalletIframeCommunicator({\n      clientId,\n      customizationOptions: styles\n    });\n    this.wallet = new EmbeddedWallet({\n      clientId,\n      chain,\n      querier: this.querier\n    });\n    this.auth = new Auth({\n      clientId,\n      querier: this.querier,\n      onAuthSuccess: async authResult => {\n        onAuthSuccess?.(authResult);\n        await this.wallet.postWalletSetUp({\n          ...authResult.walletDetails,\n          walletUserId: authResult.storedToken.authDetails.userWalletId\n        });\n        await this.querier.call({\n          procedureName: \"initIframe\",\n          params: {\n            deviceShareStored: authResult.walletDetails.deviceShareStored,\n            clientId: this.clientId,\n            walletUserId: authResult.storedToken.authDetails.userWalletId,\n            authCookie: authResult.storedToken.cookieString\n          }\n        });\n        return {\n          user: {\n            status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,\n            authDetails: authResult.storedToken.authDetails,\n            wallet: this.wallet,\n            walletAddress: authResult.walletDetails.walletAddress\n          }\n        };\n      }\n    });\n  }\n\n  /**\n   * Gets the usr if they are logged in\n   * @example\n   * ```js\n   *  const user = await thirdwebEmbeddedWallet.getUser();\n   *  switch (user.status) {\n   *     case UserWalletStatus.LOGGED_OUT: {\n   *       // User is logged out, call one of the auth methods on thirdwebEmbeddedWallet.auth to authenticate the user\n   *       break;\n   *     }\n   *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {\n   *       // user is logged in and wallet is all set up.\n   *       // You have access to:\n   *       user.status;\n   *       user.authDetails;\n   *       user.walletAddress;\n   *       user.wallet;\n   *       break;\n   *     }\n   * }\n   * ```\n   * @returns GetUser - an object to containing various information on the user statuses\n   */\n  async getUser() {\n    return this.wallet.getUserWalletStatus();\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-30be9c09.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js ***!
  \***************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   n: function() { return /* binding */ normalizeChainId; }\n/* harmony export */ });\nfunction normalizeChainId(chainId) {\n  if (typeof chainId === \"string\") {\n    return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n  }\n  if (typeof chainId === \"bigint\") {\n    return Number(chainId);\n  }\n  return chainId;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3JlYWN0L25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3dhbGxldHMvZGlzdC9ub3JtYWxpemVDaGFpbklkLWU0Y2MwMTc1LmJyb3dzZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3JlYWN0L25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3dhbGxldHMvZGlzdC9ub3JtYWxpemVDaGFpbklkLWU0Y2MwMTc1LmJyb3dzZXIuZXNtLmpzP2ExNzgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbm9ybWFsaXplQ2hhaW5JZChjaGFpbklkKSB7XG4gIGlmICh0eXBlb2YgY2hhaW5JZCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQoY2hhaW5JZCwgY2hhaW5JZC50cmltKCkuc3Vic3RyaW5nKDAsIDIpID09PSBcIjB4XCIgPyAxNiA6IDEwKTtcbiAgfVxuICBpZiAodHlwZW9mIGNoYWluSWQgPT09IFwiYmlnaW50XCIpIHtcbiAgICByZXR1cm4gTnVtYmVyKGNoYWluSWQpO1xuICB9XG4gIHJldHVybiBjaGFpbklkO1xufVxuXG5leHBvcnQgeyBub3JtYWxpemVDaGFpbklkIGFzIG4gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js":
/*!************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js ***!
  \************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmbeddedWalletConnector: function() { return /* binding */ EmbeddedWalletConnector; }\n/* harmony export */ });\n/* harmony import */ var _dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../dist/classPrivateFieldSet-a5db7c83.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/classPrivateFieldSet-a5db7c83.browser.esm.js\");\n/* harmony import */ var _dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../dist/defineProperty-c8ecdc07.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/defineProperty-c8ecdc07.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/@ethersproject/address/lib.esm/index.js\");\n/* harmony import */ var _dist_walletIds_08486e13_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../dist/walletIds-08486e13.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/walletIds-08486e13.browser.esm.js\");\n/* harmony import */ var _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../dist/connector-05689d68.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/connector-05689d68.browser.esm.js\");\n/* harmony import */ var _dist_normalizeChainId_e4cc0175_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../dist/normalizeChainId-e4cc0175.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/normalizeChainId-e4cc0175.browser.esm.js\");\n/* harmony import */ var _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../dist/embedded-wallet-30be9c09.browser.esm.js */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/dist/embedded-wallet-30be9c09.browser.esm.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/eventemitter3/index.mjs\");\n\n\n\n\n\n\n\n\n\n\n\nvar _embeddedWalletSdk = /*#__PURE__*/new WeakMap();\nvar _signer = /*#__PURE__*/new WeakMap();\nclass EmbeddedWalletConnector extends _dist_connector_05689d68_browser_esm_js__WEBPACK_IMPORTED_MODULE_1__.C {\n  constructor(options) {\n    super();\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"id\", _dist_walletIds_08486e13_browser_esm_js__WEBPACK_IMPORTED_MODULE_3__.w.paper);\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"name\", \"Embedded Wallet\");\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"ready\", true);\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"user\", null);\n    (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__._)(this, _embeddedWalletSdk, {\n      writable: true,\n      value: void 0\n    });\n    (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__._)(this, _signer, {\n      writable: true,\n      value: void 0\n    });\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onAccountsChanged\", async accounts => {\n      if (accounts.length === 0) {\n        await this.onDisconnect();\n      } else {\n        this.emit(\"change\", {\n          account: ethers__WEBPACK_IMPORTED_MODULE_5__.getAddress(accounts[0])\n        });\n      }\n    });\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onChainChanged\", chainId => {\n      const id = (0,_dist_normalizeChainId_e4cc0175_browser_esm_js__WEBPACK_IMPORTED_MODULE_6__.n)(chainId);\n      const unsupported = this.options.chains.findIndex(c => c.chainId === id) === -1;\n      this.emit(\"change\", {\n        chain: {\n          id,\n          unsupported\n        }\n      });\n    });\n    (0,_dist_defineProperty_c8ecdc07_browser_esm_js__WEBPACK_IMPORTED_MODULE_2__._)(this, \"onDisconnect\", async () => {\n      this.emit(\"disconnect\");\n    });\n    this.options = options;\n  }\n  getEmbeddedWalletSDK() {\n    if (!(0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.b)(this, _embeddedWalletSdk)) {\n      (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, _embeddedWalletSdk, new _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.E({\n        clientId: this.options.clientId,\n        chain: \"Ethereum\",\n        onAuthSuccess: this.options.onAuthSuccess\n      }));\n    }\n    return (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.b)(this, _embeddedWalletSdk);\n  }\n  async connect(args) {\n    // backwards compatibility - options should really be required here\n    if (!args) {\n      // default to iframe flow\n      const result = await this.authenticate({\n        strategy: \"iframe\"\n      });\n      if (!result.user) {\n        throw new Error(\"Error connecting User\");\n      }\n      this.user = result.user;\n    } else {\n      if (!args.authResult) {\n        throw new Error(\"Missing authData - call authenticate() first with your authentication strategy\");\n      }\n      if (!args.authResult.user) {\n        throw new Error(\"Missing authData.user - call authenticate() first with your authentication strategy\");\n      }\n      this.user = args.authResult.user;\n    }\n    if (args?.chainId) {\n      this.switchChain(args.chainId);\n    }\n    return this.getAddress();\n  }\n  async disconnect() {\n    const paper = (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.b)(this, _embeddedWalletSdk);\n    await paper?.auth.logout();\n    (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, _signer, undefined);\n    (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, _embeddedWalletSdk, undefined);\n    this.user = null;\n  }\n  async getAddress() {\n    if (!this.user) {\n      throw new Error(\"Embedded Wallet is not connected\");\n    }\n    return await this.getSigner().then(signer => signer.getAddress());\n  }\n  async isConnected() {\n    try {\n      const addr = await this.getAddress();\n      return !!addr;\n    } catch (e) {\n      return false;\n    }\n  }\n  async getProvider() {\n    const signer = await this.getSigner();\n    if (!signer.provider) {\n      throw new Error(\"Provider not found\");\n    }\n    return signer.provider;\n  }\n  async getSigner() {\n    if ((0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.b)(this, _signer)) {\n      return (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.b)(this, _signer);\n    }\n    const user = await this.getUser();\n    const signer = await user.wallet.getEthersJsSigner({\n      rpcEndpoint: this.options.chain.rpc[0] || \"\" // TODO: handle chain.rpc being empty array\n    });\n\n    if (!signer) {\n      throw new Error(\"Signer not found\");\n    }\n    (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, _signer, signer);\n    return signer;\n  }\n  async isAuthorized() {\n    return false;\n  }\n  async switchChain(chainId) {\n    const chain = this.options.chains.find(c => c.chainId === chainId);\n    if (!chain) {\n      throw new Error(\"Chain not configured\");\n    }\n    try {\n      // update chain in wallet\n      await this.user?.wallet.setChain({\n        chain: \"Ethereum\"\n      }); // just pass Ethereum no matter what chain we are going to connect\n      // update signer\n      (0,_dist_classPrivateFieldSet_a5db7c83_browser_esm_js__WEBPACK_IMPORTED_MODULE_4__.a)(this, _signer, await this.user?.wallet.getEthersJsSigner({\n        rpcEndpoint: chain.rpc[0] || \"\"\n      }));\n      this.emit(\"change\", {\n        chain: {\n          id: chainId,\n          unsupported: false\n        }\n      });\n    } catch (e) {\n      console.warn(\"Failed to switch chain\", e);\n    }\n  }\n  async setupListeners() {\n    return Promise.resolve();\n  }\n  updateChains(chains) {\n    this.options.chains = chains;\n  }\n  async getUser() {\n    if (!this.user || !this.user.wallet || !this.user.wallet.getEthersJsSigner // when serializing, functions are lost, need to rehydrate\n    ) {\n      const embeddedWalletSdk = this.getEmbeddedWalletSDK();\n      const user = await embeddedWalletSdk.getUser();\n      switch (user.status) {\n        case _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.U.LOGGED_IN_WALLET_INITIALIZED:\n          {\n            this.user = user;\n            break;\n          }\n        default:\n          {\n            // if logged out or unitialized, we can't get a signer, so throw an error\n            throw new Error(\"Embedded Wallet is not authenticated, please authenticate first\");\n          }\n      }\n    }\n    return this.user;\n  }\n  async getEmail() {\n    const user = await this.getUser();\n    return user.authDetails.email;\n  }\n  async getRecoveryInformation() {\n    const user = await this.getUser();\n    return user.authDetails;\n  }\n  async sendVerificationEmail(_ref) {\n    let {\n      email\n    } = _ref;\n    const ewSDK = this.getEmbeddedWalletSDK();\n    return ewSDK.auth.sendEmailLoginOtp({\n      email\n    });\n  }\n  async authenticate(params) {\n    const ewSDK = this.getEmbeddedWalletSDK();\n    const strategy = params.strategy;\n    switch (strategy) {\n      case \"email_verification\":\n        {\n          return await ewSDK.auth.verifyEmailLoginOtp({\n            email: params.email,\n            otp: params.verificationCode,\n            recoveryCode: params.recoveryCode\n          });\n        }\n      case \"apple\":\n      case \"facebook\":\n      case \"google\":\n        {\n          const oauthProvider = oauthStrategyToAuthProvider[strategy];\n          return ewSDK.auth.loginWithOauth({\n            oauthProvider,\n            closeOpenedWindow: params.closeOpenedWindow,\n            openedWindow: params.openedWindow\n          });\n        }\n      case \"jwt\":\n        {\n          return ewSDK.auth.loginWithCustomJwt({\n            jwt: params.jwt,\n            encryptionKey: params.encryptionKey\n          });\n        }\n      case \"iframe_email_verification\":\n        {\n          return ewSDK.auth.loginWithEmailOtp({\n            email: params.email\n          });\n        }\n      case \"iframe\":\n      case undefined:\n        {\n          return ewSDK.auth.loginWithModal();\n        }\n      default:\n        assertUnreachable(strategy);\n    }\n  }\n}\nfunction assertUnreachable(x) {\n  throw new Error(\"Invalid param: \" + x);\n}\nconst oauthStrategyToAuthProvider = {\n  google: _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.c.GOOGLE,\n  facebook: _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.c.FACEBOOK,\n  apple: _dist_embedded_wallet_30be9c09_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.c.APPLE\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3JlYWN0L25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3dhbGxldHMvZXZtL2Nvbm5lY3RvcnMvZW1iZWRkZWQtd2FsbGV0L2Rpc3QvdGhpcmR3ZWItZGV2LXdhbGxldHMtZXZtLWNvbm5lY3RvcnMtZW1iZWRkZWQtd2FsbGV0LmJyb3dzZXIuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF3SztBQUN6RTtBQUNoRTtBQUNxRDtBQUNBO0FBQ2M7QUFDMEM7QUFDckg7QUFDaUI7QUFDZDs7QUFFMUI7QUFDQTtBQUNBLHNDQUFzQyxzRUFBUztBQUMvQztBQUNBO0FBQ0EsSUFBSSwrRUFBZSxhQUFhLHNFQUFTO0FBQ3pDLElBQUksK0VBQWU7QUFDbkIsSUFBSSwrRUFBZTtBQUNuQixJQUFJLCtFQUFlO0FBQ25CLElBQUkscUZBQTBCO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSSxxRkFBMEI7QUFDOUI7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJLCtFQUFlO0FBQ25CO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxtQkFBbUIsOENBQWdCO0FBQ25DLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxJQUFJLCtFQUFlO0FBQ25CLGlCQUFpQixpRkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxJQUFJLCtFQUFlO0FBQ25CO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVMscUZBQXFCO0FBQzlCLE1BQU0scUZBQXFCLCtCQUErQiw0RUFBaUI7QUFDM0U7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsV0FBVyxxRkFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxRkFBcUI7QUFDdkM7QUFDQSxJQUFJLHFGQUFxQjtBQUN6QixJQUFJLHFGQUFxQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEscUZBQXFCO0FBQzdCLGFBQWEscUZBQXFCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxJQUFJLHFGQUFxQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxHQUFHO0FBQ1Y7QUFDQSxNQUFNLHFGQUFxQjtBQUMzQjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDRFQUFnQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw0RUFBWTtBQUN0QixZQUFZLDRFQUFZO0FBQ3hCLFNBQVMsNEVBQVk7QUFDckI7O0FBRW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3JlYWN0L25vZGVfbW9kdWxlcy9AdGhpcmR3ZWItZGV2L3dhbGxldHMvZXZtL2Nvbm5lY3RvcnMvZW1iZWRkZWQtd2FsbGV0L2Rpc3QvdGhpcmR3ZWItZGV2LXdhbGxldHMtZXZtLWNvbm5lY3RvcnMtZW1iZWRkZWQtd2FsbGV0LmJyb3dzZXIuZXNtLmpzPzUwMTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgXyBhcyBfY2xhc3NQcml2YXRlRmllbGRJbml0U3BlYywgYiBhcyBfY2xhc3NQcml2YXRlRmllbGRHZXQsIGEgYXMgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IH0gZnJvbSAnLi4vLi4vLi4vLi4vZGlzdC9jbGFzc1ByaXZhdGVGaWVsZFNldC1hNWRiN2M4My5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBfIGFzIF9kZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4uLy4uLy4uLy4uL2Rpc3QvZGVmaW5lUHJvcGVydHktYzhlY2RjMDcuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICdldGhlcnMnO1xuaW1wb3J0IHsgdyBhcyB3YWxsZXRJZHMgfSBmcm9tICcuLi8uLi8uLi8uLi9kaXN0L3dhbGxldElkcy0wODQ4NmUxMy5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBDIGFzIENvbm5lY3RvciB9IGZyb20gJy4uLy4uLy4uLy4uL2Rpc3QvY29ubmVjdG9yLTA1Njg5ZDY4LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCB7IG4gYXMgbm9ybWFsaXplQ2hhaW5JZCB9IGZyb20gJy4uLy4uLy4uLy4uL2Rpc3Qvbm9ybWFsaXplQ2hhaW5JZC1lNGNjMDE3NS5icm93c2VyLmVzbS5qcyc7XG5pbXBvcnQgeyBFIGFzIEVtYmVkZGVkV2FsbGV0U2RrLCBVIGFzIFVzZXJXYWxsZXRTdGF0dXMsIGMgYXMgQXV0aFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vZGlzdC9lbWJlZGRlZC13YWxsZXQtMzBiZTljMDkuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdldmVudGVtaXR0ZXIzJztcbmltcG9ydCAnQHBhcGVyeHl6L3Nkay1jb21tb24tdXRpbGl0aWVzJztcbmltcG9ydCAnZXRoZXJzL2xpYi91dGlscyc7XG5cbnZhciBfZW1iZWRkZWRXYWxsZXRTZGsgPSAvKiNfX1BVUkVfXyovbmV3IFdlYWtNYXAoKTtcbnZhciBfc2lnbmVyID0gLyojX19QVVJFX18qL25ldyBXZWFrTWFwKCk7XG5jbGFzcyBFbWJlZGRlZFdhbGxldENvbm5lY3RvciBleHRlbmRzIENvbm5lY3RvciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlkXCIsIHdhbGxldElkcy5wYXBlcik7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCBcIkVtYmVkZGVkIFdhbGxldFwiKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZWFkeVwiLCB0cnVlKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1c2VyXCIsIG51bGwpO1xuICAgIF9jbGFzc1ByaXZhdGVGaWVsZEluaXRTcGVjKHRoaXMsIF9lbWJlZGRlZFdhbGxldFNkaywge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdm9pZCAwXG4gICAgfSk7XG4gICAgX2NsYXNzUHJpdmF0ZUZpZWxkSW5pdFNwZWModGhpcywgX3NpZ25lciwge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogdm9pZCAwXG4gICAgfSk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib25BY2NvdW50c0NoYW5nZWRcIiwgYXN5bmMgYWNjb3VudHMgPT4ge1xuICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBhd2FpdCB0aGlzLm9uRGlzY29ubmVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiY2hhbmdlXCIsIHtcbiAgICAgICAgICBhY2NvdW50OiB1dGlscy5nZXRBZGRyZXNzKGFjY291bnRzWzBdKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJvbkNoYWluQ2hhbmdlZFwiLCBjaGFpbklkID0+IHtcbiAgICAgIGNvbnN0IGlkID0gbm9ybWFsaXplQ2hhaW5JZChjaGFpbklkKTtcbiAgICAgIGNvbnN0IHVuc3VwcG9ydGVkID0gdGhpcy5vcHRpb25zLmNoYWlucy5maW5kSW5kZXgoYyA9PiBjLmNoYWluSWQgPT09IGlkKSA9PT0gLTE7XG4gICAgICB0aGlzLmVtaXQoXCJjaGFuZ2VcIiwge1xuICAgICAgICBjaGFpbjoge1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHVuc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9uRGlzY29ubmVjdFwiLCBhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoXCJkaXNjb25uZWN0XCIpO1xuICAgIH0pO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2V0RW1iZWRkZWRXYWxsZXRTREsoKSB7XG4gICAgaWYgKCFfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2VtYmVkZGVkV2FsbGV0U2RrKSkge1xuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9lbWJlZGRlZFdhbGxldFNkaywgbmV3IEVtYmVkZGVkV2FsbGV0U2RrKHtcbiAgICAgICAgY2xpZW50SWQ6IHRoaXMub3B0aW9ucy5jbGllbnRJZCxcbiAgICAgICAgY2hhaW46IFwiRXRoZXJldW1cIixcbiAgICAgICAgb25BdXRoU3VjY2VzczogdGhpcy5vcHRpb25zLm9uQXV0aFN1Y2Nlc3NcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZW1iZWRkZWRXYWxsZXRTZGspO1xuICB9XG4gIGFzeW5jIGNvbm5lY3QoYXJncykge1xuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IC0gb3B0aW9ucyBzaG91bGQgcmVhbGx5IGJlIHJlcXVpcmVkIGhlcmVcbiAgICBpZiAoIWFyZ3MpIHtcbiAgICAgIC8vIGRlZmF1bHQgdG8gaWZyYW1lIGZsb3dcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuYXV0aGVudGljYXRlKHtcbiAgICAgICAgc3RyYXRlZ3k6IFwiaWZyYW1lXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKCFyZXN1bHQudXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBjb25uZWN0aW5nIFVzZXJcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnVzZXIgPSByZXN1bHQudXNlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhcmdzLmF1dGhSZXN1bHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBhdXRoRGF0YSAtIGNhbGwgYXV0aGVudGljYXRlKCkgZmlyc3Qgd2l0aCB5b3VyIGF1dGhlbnRpY2F0aW9uIHN0cmF0ZWd5XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFhcmdzLmF1dGhSZXN1bHQudXNlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGF1dGhEYXRhLnVzZXIgLSBjYWxsIGF1dGhlbnRpY2F0ZSgpIGZpcnN0IHdpdGggeW91ciBhdXRoZW50aWNhdGlvbiBzdHJhdGVneVwiKTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXNlciA9IGFyZ3MuYXV0aFJlc3VsdC51c2VyO1xuICAgIH1cbiAgICBpZiAoYXJncz8uY2hhaW5JZCkge1xuICAgICAgdGhpcy5zd2l0Y2hDaGFpbihhcmdzLmNoYWluSWQpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRBZGRyZXNzKCk7XG4gIH1cbiAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICBjb25zdCBwYXBlciA9IF9jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZW1iZWRkZWRXYWxsZXRTZGspO1xuICAgIGF3YWl0IHBhcGVyPy5hdXRoLmxvZ291dCgpO1xuICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfc2lnbmVyLCB1bmRlZmluZWQpO1xuICAgIF9jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfZW1iZWRkZWRXYWxsZXRTZGssIHVuZGVmaW5lZCk7XG4gICAgdGhpcy51c2VyID0gbnVsbDtcbiAgfVxuICBhc3luYyBnZXRBZGRyZXNzKCkge1xuICAgIGlmICghdGhpcy51c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbWJlZGRlZCBXYWxsZXQgaXMgbm90IGNvbm5lY3RlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U2lnbmVyKCkudGhlbihzaWduZXIgPT4gc2lnbmVyLmdldEFkZHJlc3MoKSk7XG4gIH1cbiAgYXN5bmMgaXNDb25uZWN0ZWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFkZHIgPSBhd2FpdCB0aGlzLmdldEFkZHJlc3MoKTtcbiAgICAgIHJldHVybiAhIWFkZHI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXRQcm92aWRlcigpIHtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCB0aGlzLmdldFNpZ25lcigpO1xuICAgIGlmICghc2lnbmVyLnByb3ZpZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlciBub3QgZm91bmRcIik7XG4gICAgfVxuICAgIHJldHVybiBzaWduZXIucHJvdmlkZXI7XG4gIH1cbiAgYXN5bmMgZ2V0U2lnbmVyKCkge1xuICAgIGlmIChfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3NpZ25lcikpIHtcbiAgICAgIHJldHVybiBfY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX3NpZ25lcik7XG4gICAgfVxuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB0aGlzLmdldFVzZXIoKTtcbiAgICBjb25zdCBzaWduZXIgPSBhd2FpdCB1c2VyLndhbGxldC5nZXRFdGhlcnNKc1NpZ25lcih7XG4gICAgICBycGNFbmRwb2ludDogdGhpcy5vcHRpb25zLmNoYWluLnJwY1swXSB8fCBcIlwiIC8vIFRPRE86IGhhbmRsZSBjaGFpbi5ycGMgYmVpbmcgZW1wdHkgYXJyYXlcbiAgICB9KTtcblxuICAgIGlmICghc2lnbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaWduZXIgbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICBfY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX3NpZ25lciwgc2lnbmVyKTtcbiAgICByZXR1cm4gc2lnbmVyO1xuICB9XG4gIGFzeW5jIGlzQXV0aG9yaXplZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYXN5bmMgc3dpdGNoQ2hhaW4oY2hhaW5JZCkge1xuICAgIGNvbnN0IGNoYWluID0gdGhpcy5vcHRpb25zLmNoYWlucy5maW5kKGMgPT4gYy5jaGFpbklkID09PSBjaGFpbklkKTtcbiAgICBpZiAoIWNoYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGFpbiBub3QgY29uZmlndXJlZFwiKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIHVwZGF0ZSBjaGFpbiBpbiB3YWxsZXRcbiAgICAgIGF3YWl0IHRoaXMudXNlcj8ud2FsbGV0LnNldENoYWluKHtcbiAgICAgICAgY2hhaW46IFwiRXRoZXJldW1cIlxuICAgICAgfSk7IC8vIGp1c3QgcGFzcyBFdGhlcmV1bSBubyBtYXR0ZXIgd2hhdCBjaGFpbiB3ZSBhcmUgZ29pbmcgdG8gY29ubmVjdFxuICAgICAgLy8gdXBkYXRlIHNpZ25lclxuICAgICAgX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9zaWduZXIsIGF3YWl0IHRoaXMudXNlcj8ud2FsbGV0LmdldEV0aGVyc0pzU2lnbmVyKHtcbiAgICAgICAgcnBjRW5kcG9pbnQ6IGNoYWluLnJwY1swXSB8fCBcIlwiXG4gICAgICB9KSk7XG4gICAgICB0aGlzLmVtaXQoXCJjaGFuZ2VcIiwge1xuICAgICAgICBjaGFpbjoge1xuICAgICAgICAgIGlkOiBjaGFpbklkLFxuICAgICAgICAgIHVuc3VwcG9ydGVkOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gc3dpdGNoIGNoYWluXCIsIGUpO1xuICAgIH1cbiAgfVxuICBhc3luYyBzZXR1cExpc3RlbmVycygpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgdXBkYXRlQ2hhaW5zKGNoYWlucykge1xuICAgIHRoaXMub3B0aW9ucy5jaGFpbnMgPSBjaGFpbnM7XG4gIH1cbiAgYXN5bmMgZ2V0VXNlcigpIHtcbiAgICBpZiAoIXRoaXMudXNlciB8fCAhdGhpcy51c2VyLndhbGxldCB8fCAhdGhpcy51c2VyLndhbGxldC5nZXRFdGhlcnNKc1NpZ25lciAvLyB3aGVuIHNlcmlhbGl6aW5nLCBmdW5jdGlvbnMgYXJlIGxvc3QsIG5lZWQgdG8gcmVoeWRyYXRlXG4gICAgKSB7XG4gICAgICBjb25zdCBlbWJlZGRlZFdhbGxldFNkayA9IHRoaXMuZ2V0RW1iZWRkZWRXYWxsZXRTREsoKTtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBlbWJlZGRlZFdhbGxldFNkay5nZXRVc2VyKCk7XG4gICAgICBzd2l0Y2ggKHVzZXIuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgVXNlcldhbGxldFN0YXR1cy5MT0dHRURfSU5fV0FMTEVUX0lOSVRJQUxJWkVEOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMudXNlciA9IHVzZXI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gaWYgbG9nZ2VkIG91dCBvciB1bml0aWFsaXplZCwgd2UgY2FuJ3QgZ2V0IGEgc2lnbmVyLCBzbyB0aHJvdyBhbiBlcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1iZWRkZWQgV2FsbGV0IGlzIG5vdCBhdXRoZW50aWNhdGVkLCBwbGVhc2UgYXV0aGVudGljYXRlIGZpcnN0XCIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXNlcjtcbiAgfVxuICBhc3luYyBnZXRFbWFpbCgpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5nZXRVc2VyKCk7XG4gICAgcmV0dXJuIHVzZXIuYXV0aERldGFpbHMuZW1haWw7XG4gIH1cbiAgYXN5bmMgZ2V0UmVjb3ZlcnlJbmZvcm1hdGlvbigpIHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgdGhpcy5nZXRVc2VyKCk7XG4gICAgcmV0dXJuIHVzZXIuYXV0aERldGFpbHM7XG4gIH1cbiAgYXN5bmMgc2VuZFZlcmlmaWNhdGlvbkVtYWlsKF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgZW1haWxcbiAgICB9ID0gX3JlZjtcbiAgICBjb25zdCBld1NESyA9IHRoaXMuZ2V0RW1iZWRkZWRXYWxsZXRTREsoKTtcbiAgICByZXR1cm4gZXdTREsuYXV0aC5zZW5kRW1haWxMb2dpbk90cCh7XG4gICAgICBlbWFpbFxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGF1dGhlbnRpY2F0ZShwYXJhbXMpIHtcbiAgICBjb25zdCBld1NESyA9IHRoaXMuZ2V0RW1iZWRkZWRXYWxsZXRTREsoKTtcbiAgICBjb25zdCBzdHJhdGVneSA9IHBhcmFtcy5zdHJhdGVneTtcbiAgICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgICBjYXNlIFwiZW1haWxfdmVyaWZpY2F0aW9uXCI6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gYXdhaXQgZXdTREsuYXV0aC52ZXJpZnlFbWFpbExvZ2luT3RwKHtcbiAgICAgICAgICAgIGVtYWlsOiBwYXJhbXMuZW1haWwsXG4gICAgICAgICAgICBvdHA6IHBhcmFtcy52ZXJpZmljYXRpb25Db2RlLFxuICAgICAgICAgICAgcmVjb3ZlcnlDb2RlOiBwYXJhbXMucmVjb3ZlcnlDb2RlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJhcHBsZVwiOlxuICAgICAgY2FzZSBcImZhY2Vib29rXCI6XG4gICAgICBjYXNlIFwiZ29vZ2xlXCI6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBvYXV0aFByb3ZpZGVyID0gb2F1dGhTdHJhdGVneVRvQXV0aFByb3ZpZGVyW3N0cmF0ZWd5XTtcbiAgICAgICAgICByZXR1cm4gZXdTREsuYXV0aC5sb2dpbldpdGhPYXV0aCh7XG4gICAgICAgICAgICBvYXV0aFByb3ZpZGVyLFxuICAgICAgICAgICAgY2xvc2VPcGVuZWRXaW5kb3c6IHBhcmFtcy5jbG9zZU9wZW5lZFdpbmRvdyxcbiAgICAgICAgICAgIG9wZW5lZFdpbmRvdzogcGFyYW1zLm9wZW5lZFdpbmRvd1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICBjYXNlIFwiand0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gZXdTREsuYXV0aC5sb2dpbldpdGhDdXN0b21Kd3Qoe1xuICAgICAgICAgICAgand0OiBwYXJhbXMuand0LFxuICAgICAgICAgICAgZW5jcnlwdGlvbktleTogcGFyYW1zLmVuY3J5cHRpb25LZXlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSBcImlmcmFtZV9lbWFpbF92ZXJpZmljYXRpb25cIjpcbiAgICAgICAge1xuICAgICAgICAgIHJldHVybiBld1NESy5hdXRoLmxvZ2luV2l0aEVtYWlsT3RwKHtcbiAgICAgICAgICAgIGVtYWlsOiBwYXJhbXMuZW1haWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgY2FzZSBcImlmcmFtZVwiOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gZXdTREsuYXV0aC5sb2dpbldpdGhNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBhc3NlcnRVbnJlYWNoYWJsZShzdHJhdGVneSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRVbnJlYWNoYWJsZSh4KSB7XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW06IFwiICsgeCk7XG59XG5jb25zdCBvYXV0aFN0cmF0ZWd5VG9BdXRoUHJvdmlkZXIgPSB7XG4gIGdvb2dsZTogQXV0aFByb3ZpZGVyLkdPT0dMRSxcbiAgZmFjZWJvb2s6IEF1dGhQcm92aWRlci5GQUNFQk9PSyxcbiAgYXBwbGU6IEF1dGhQcm92aWRlci5BUFBMRVxufTtcblxuZXhwb3J0IHsgRW1iZWRkZWRXYWxsZXRDb25uZWN0b3IgfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@thirdweb-dev/react/node_modules/@thirdweb-dev/wallets/evm/connectors/embedded-wallet/dist/thirdweb-dev-wallets-evm-connectors-embedded-wallet.browser.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs":
/*!********************************************************************!*\
  !*** ./node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs ***!
  \********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainToPublicRpc: function() { return /* binding */ e; },\n/* harmony export */   DEFAULT_BRAND_OPTIONS: function() { return /* binding */ n; },\n/* harmony export */   getPaperOriginUrl: function() { return /* binding */ i; }\n/* harmony export */ });\nvar e={Ethereum:\"https://ethereum.rpc.thirdweb.com\",Goerli:\"https://goerli.rpc.thirdweb.com\",Mumbai:\"https://mumbai.rpc.thirdweb.com\",Polygon:\"https://polygon.rpc.thirdweb.com\",Avalanche:\"https://avalanche.rpc.thirdweb.com\",Optimism:\"https://optimism.rpc.thirdweb.com\",OptimismGoerli:\"https://optimism-goerli.rpc.thirdweb.com\",BSC:\"https://binance.rpc.thirdweb.com\",BSCTestnet:\"https://binance-testnet.rpc.thirdweb.com\",ArbitrumOne:\"https://arbitrum.rpc.thirdweb.com\",ArbitrumGoerli:\"https://arbitrum-goerli.rpc.thirdweb.com\",Fantom:\"https://fantom.rpc.thirdweb.com\",FantomTestnet:\"https://fantom-testnet.rpc.thirdweb.com\",Sepolia:\"https://sepolia.rpc.thirdweb.com\",AvalancheFuji:\"https://avalanche-fuji.rpc.thirdweb.com\"};var o=()=>typeof window!=\"undefined\"&&window.localStorage.getItem(\"IS_PAPER_DEV\")===\"true\",r=()=>typeof window!=\"undefined\"&&window.location.origin.includes(\"paper.xyz\"),i=()=>{var t;return o()?(t=window.localStorage.getItem(\"PAPER_DEV_URL\"))!=null?t:\"http://localhost:3000\":r()?window.location.origin:\"https://withpaper.com\"};var n={colorPrimary:\"#cf3781\",colorBackground:\"#ffffff\",colorText:\"#1a202c\",borderRadius:12,fontFamily:\"Open Sans\"};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcGFwZXJ4eXovc2RrLWNvbW1vbi11dGlsaXRpZXMvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyw0c0JBQTRzQixpTEFBaUwsTUFBTSxnSkFBZ0osT0FBTyw2R0FBNkw7QUFDOXRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AcGFwZXJ4eXovc2RrLWNvbW1vbi11dGlsaXRpZXMvZGlzdC9pbmRleC5tanM/ZGRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZT17RXRoZXJldW06XCJodHRwczovL2V0aGVyZXVtLnJwYy50aGlyZHdlYi5jb21cIixHb2VybGk6XCJodHRwczovL2dvZXJsaS5ycGMudGhpcmR3ZWIuY29tXCIsTXVtYmFpOlwiaHR0cHM6Ly9tdW1iYWkucnBjLnRoaXJkd2ViLmNvbVwiLFBvbHlnb246XCJodHRwczovL3BvbHlnb24ucnBjLnRoaXJkd2ViLmNvbVwiLEF2YWxhbmNoZTpcImh0dHBzOi8vYXZhbGFuY2hlLnJwYy50aGlyZHdlYi5jb21cIixPcHRpbWlzbTpcImh0dHBzOi8vb3B0aW1pc20ucnBjLnRoaXJkd2ViLmNvbVwiLE9wdGltaXNtR29lcmxpOlwiaHR0cHM6Ly9vcHRpbWlzbS1nb2VybGkucnBjLnRoaXJkd2ViLmNvbVwiLEJTQzpcImh0dHBzOi8vYmluYW5jZS5ycGMudGhpcmR3ZWIuY29tXCIsQlNDVGVzdG5ldDpcImh0dHBzOi8vYmluYW5jZS10ZXN0bmV0LnJwYy50aGlyZHdlYi5jb21cIixBcmJpdHJ1bU9uZTpcImh0dHBzOi8vYXJiaXRydW0ucnBjLnRoaXJkd2ViLmNvbVwiLEFyYml0cnVtR29lcmxpOlwiaHR0cHM6Ly9hcmJpdHJ1bS1nb2VybGkucnBjLnRoaXJkd2ViLmNvbVwiLEZhbnRvbTpcImh0dHBzOi8vZmFudG9tLnJwYy50aGlyZHdlYi5jb21cIixGYW50b21UZXN0bmV0OlwiaHR0cHM6Ly9mYW50b20tdGVzdG5ldC5ycGMudGhpcmR3ZWIuY29tXCIsU2Vwb2xpYTpcImh0dHBzOi8vc2Vwb2xpYS5ycGMudGhpcmR3ZWIuY29tXCIsQXZhbGFuY2hlRnVqaTpcImh0dHBzOi8vYXZhbGFuY2hlLWZ1amkucnBjLnRoaXJkd2ViLmNvbVwifTt2YXIgbz0oKT0+dHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIiYmd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiSVNfUEFQRVJfREVWXCIpPT09XCJ0cnVlXCIscj0oKT0+dHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIiYmd2luZG93LmxvY2F0aW9uLm9yaWdpbi5pbmNsdWRlcyhcInBhcGVyLnh5elwiKSxpPSgpPT57dmFyIHQ7cmV0dXJuIG8oKT8odD13aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJQQVBFUl9ERVZfVVJMXCIpKSE9bnVsbD90OlwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI6cigpP3dpbmRvdy5sb2NhdGlvbi5vcmlnaW46XCJodHRwczovL3dpdGhwYXBlci5jb21cIn07dmFyIG49e2NvbG9yUHJpbWFyeTpcIiNjZjM3ODFcIixjb2xvckJhY2tncm91bmQ6XCIjZmZmZmZmXCIsY29sb3JUZXh0OlwiIzFhMjAyY1wiLGJvcmRlclJhZGl1czoxMixmb250RmFtaWx5OlwiT3BlbiBTYW5zXCJ9O2V4cG9ydHtlIGFzIENoYWluVG9QdWJsaWNScGMsbiBhcyBERUZBVUxUX0JSQU5EX09QVElPTlMsaSBhcyBnZXRQYXBlck9yaWdpblVybH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@paperxyz/sdk-common-utilities/dist/index.mjs\n"));

/***/ })

}]);